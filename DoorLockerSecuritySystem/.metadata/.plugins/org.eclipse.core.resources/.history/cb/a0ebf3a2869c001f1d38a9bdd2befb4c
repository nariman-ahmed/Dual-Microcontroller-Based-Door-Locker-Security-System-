/*
 * CONTROL.c
 *
 *  Created on: 2 Nov 2024
 *      Author: NARIMAN AHMED
 */
#include "gpio.h"
#include "uart.h"
#include "pmw.h"
#include "twi.h"
#include "timer.h"
#include "buzzer.h"
#include "dc_motor.h"
#include "external_eeprom.h"
#include "pir.h"
#include "lcd.h"          //LCD TO DEBUG
#include "util/delay.h"
#include "avr/io.h"
#include "avr/interrupt.h"


#define HMI_MC_READY          	   0x10
#define CONTROL_MC_READY      	   0x20
#define EEPROM_START_ADDRESS  	 0x0311

#define SUCCESS          			 1
#define FAIL             			 0

#define OPERATION_NEW_PASS     		10
#define OPERATION_MENU_SELECT       20
#define OPERATION_CHANGE_PASS		30
#define OPERATION_OPEN_DOOR			40
#define TRIGGER_ALARM               50
#define DOOR_OPEN_CW                60
#define DOOR_CLOSE_ACW               61
#define DOOR_STOP                   62
#define ALARM_ON                    63
#define ALARM_OFF					64

UART_ConfigType uart_config = {8,2,1,9600};
TWI_ConfigType twi_config = {0x01,9600};
Timer_ConfigType timer1_config = {0,7318,TIMER1,F_CPU_1024,COMPARE_MODE};
Buzzer_Config buzzerConfig = {PORTC_ID, PIN7_ID};

uint8 received_pass[5];
uint8 confirmed_pass[5];
uint8 confirmed;
uint8 final_pass[5];
uint8 eeprom_pass[5];
uint8 current_operation=0;
uint8 authentication=FAIL;
uint8 change_pass_failed_count=0;
uint8 open_door_pass_failed_count=0;
volatile uint8 ticks=0;


void callBackTimer(void){
	ticks++;
}

void receivePass(void){
	while(UART_recieveByte()!=HMI_MC_READY){}

	for(int i=0;i<5;i++)
	{
		received_pass[i]=UART_recieveByte();
	}
}

void receiveConfirmedPass(void){
	while(UART_recieveByte()!=HMI_MC_READY){}

	for(int i=0;i<5;i++)
	{
		confirmed_pass[i]=UART_recieveByte();
	}
}

//checks pass and confirmed pass
void send_newPassConfirmation(void){

	UART_sendByte(CONTROL_MC_READY);

	for(int i=0;i<5;i++)
	{
		if(received_pass[i]!=confirmed_pass[i])
		{
			confirmed=FALSE;
			UART_sendByte(confirmed);
			return;
		}
	}

	confirmed=TRUE;
	UART_sendByte(confirmed);

}

void storePasswordInEEPROM(uint8 *password) {
	for (uint8 i = 0; i < 5; i++) {
		EEPROM_writeByte(EEPROM_START_ADDRESS + i, password[i]);
		_delay_ms(10);  // Ensure the write operation has time to complete
	}
}

void readPasswordFromEEPROM(uint8 *password) {
	for (uint8 i = 0; i < 5; i++) {
		EEPROM_readByte(EEPROM_START_ADDRESS + i, &password[i]);
		_delay_ms(10);  // Delay to ensure the read operation completes properly
	}
}

void newPasswordSequence(void){
	receivePass();
	receiveConfirmedPass();

	send_newPassConfirmation();

	if(confirmed)
	{
		//SAVE PASSWORD IN EEPROM
		for(int i=0;i<5;i++)
		{
			final_pass[i]=received_pass[i];
		}
		storePasswordInEEPROM(final_pass);
		return;
	}
	else
	{
		newPasswordSequence();
	}

}

void currentPasswordAuthentication(void){

	uint8 current_pass[5];
	authentication=SUCCESS;

	while(UART_recieveByte()!=HMI_MC_READY){}

	for(int i=0;i<5;i++)
	{
		current_pass[i]=UART_recieveByte();
	}

	readPasswordFromEEPROM(eeprom_pass);

	for(int i=0;i<5;i++)
	{
		if(eeprom_pass[i]!=current_pass[i])
		{
			//authentication failed
			authentication=FAIL;
			//UART_sendByte(FAIL);
		}
	}

	UART_sendByte(authentication);

	//debug
	LCD_clearScreen();
	LCD_displayString("current vs eeprom");
	LCD_moveCursor(1,0);
	for(int i=0;i<5;i++)
	{
		LCD_integerToString(current_pass[i]);
	}
	LCD_displayString("  ");
	for(int i=0;i<5;i++)
	{
		LCD_integerToString(eeprom_pass[i]);
	}
	_delay_ms(1000);

}

void alarms(void){

	UART_sendByte(ALARM_ON);
	BUZZER_on(&buzzerConfig);
	LCD_clearScreen();
	LCD_displayString("system locked.");

//	Timer_setCallBack(&alarm_callBackTimer,TIMER1);
//	Timer_init(&timer1_config);
//	_delay_ms(10000);
	ticks=0;
	while(ticks<3);

	UART_sendByte(ALARM_OFF);
	BUZZER_off(&buzzerConfig);
	LCD_clearScreen();
	LCD_displayString("system Unlocked.");

}

void doorMechanism(void){
	LCD_clearScreen();
	LCD_displayString("door open");

	UART_sendByte(DOOR_OPEN_CW);
	DcMotor_Rotate(MOTOR_CW);

	//door 15 second delay
	ticks=0;
	while(ticks<5);

	while(PIR_getState()!=FALSE){}    //talama howa true fa fee nas bet3ady
	DcMotor_Rotate(MOTOR_OFF);
	UART_sendByte(DOOR_CLOSE_ACW);
	DcMotor_Rotate(MOTOR_ACW);

	//door 15 second delay
	ticks=0;
	while(ticks<5);

	UART_sendByte(DOOR_STOP);
	DcMotor_Rotate(MOTOR_OFF);

}

void operationChangePass(void){

	uint8 flag=0;

	currentPasswordAuthentication();
	_delay_ms(500);
	LCD_clearScreen();
	LCD_displayString("authentication ");
	LCD_integerToString(authentication);

	if(authentication==SUCCESS)
	{
		newPasswordSequence();
	}
	else if(authentication==FAIL)  //lock for 1 min, buzzer, then go to main
	{
		flag=UART_recieveByte();
		if(flag==FAIL)
		{
			_delay_ms(50);
			operationChangePass();
		}
		else if(flag==TRIGGER_ALARM)
		{
			alarms();
		}
	}
}

void operationOpenDoor(void){

	uint8 flag=0;

	currentPasswordAuthentication();
	_delay_ms(500);
	LCD_clearScreen();
	LCD_displayString("authentication ");
	LCD_integerToString(authentication);

	if(authentication==SUCCESS)
	{
		LCD_clearScreen();
		LCD_displayString("ch pass success.");
		doorMechanism();
	}
	else if(authentication==FAIL)  //lock for 1 min, buzzer, then go to main
	{
		flag=UART_recieveByte();
		if(flag==FAIL)
		{
			_delay_ms(50);
			operationOpenDoor();
		}
		else if(flag==TRIGGER_ALARM)
		{
			alarms();
		}
	}
}






int main(void){

	SREG|=(1<<7);

	Timer_init(&timer1_config);
	Timer_setCallBack(callBackTimer,TIMER1);
	Timer_setCallBack(&callBackTimer,TIMER1);
	UART_init(&uart_config);
	TWI_init(&twi_config);
	BUZZER_init(&buzzerConfig);
	DcMotor_init();
	PIR_init();
	LCD_init();

	newPasswordSequence();
	//debugging
	LCD_clearScreen();
	LCD_displayString("pass:");
	readPasswordFromEEPROM(eeprom_pass);
	for(int i=0;i<5;i++)
	{
		LCD_integerToString(eeprom_pass[i]);
	}

	_delay_ms(500);

	while(1)
	{
		//ayza ashoof el user ekhtar eh mel menu
		while(UART_recieveByte()!=HMI_MC_READY){}

		current_operation=UART_recieveByte();
//		LCD_clearScreen();
//		LCD_integerToString(current_operation);
//		_delay_ms(500);

		if(current_operation==OPERATION_OPEN_DOOR)
		{

			operationOpenDoor();

		}
		else if(current_operation==OPERATION_CHANGE_PASS)
		{

			operationChangePass();

		}

		//telling HMI im ready to start the loop again
		LCD_clearScreen();
		LCD_displayString("resettingg");
		UART_sendByte(CONTROL_MC_READY);


	}



	return 0;
}


