
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00003988  00003a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080016c  0080016c  00003b28  2**0
                  ALLOC
  3 .stab         00003948  00000000  00000000  00003b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001504  00000000  00000000  00007470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a86d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c508  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c8f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d0c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__vector_4>
      14:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__vector_9>
      28:	0c 94 de 19 	jmp	0x33bc	; 0x33bc <__vector_10>
      2c:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <main>
      8a:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e5       	ldi	r26, 0x55	; 85
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 46 1c 	jmp	0x388c	; 0x388c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e5       	ldi	r24, 0x55	; 85
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 62 1c 	jmp	0x38c4	; 0x38c4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 56 1c 	jmp	0x38ac	; 0x38ac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <callBackTimer>:
uint8 menuSelection=0;
uint8 change_pass_failed=0;
uint8 open_door_pass_failed=0;
volatile uint8 ticks;

void callBackTimer(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     b4e:	80 91 82 01 	lds	r24, 0x0182
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 82 01 	sts	0x0182, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <mainMenuSelector>:

void mainMenuSelector(void){
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	2f 97       	sbiw	r28, 0x0f	; 15
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
	uint8 key=0;
     b72:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
     b74:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
     b78:	80 e6       	ldi	r24, 0x60	; 96
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
	LCD_moveCursor(1,0);
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
     b88:	8e e6       	ldi	r24, 0x6E	; 110
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>

	key=KEYPAD_getPressedKey();
     b90:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
     b94:	8f 87       	std	Y+15, r24	; 0x0f
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	aa ef       	ldi	r26, 0xFA	; 250
     b9c:	b3 e4       	ldi	r27, 0x43	; 67
     b9e:	8b 87       	std	Y+11, r24	; 0x0b
     ba0:	9c 87       	std	Y+12, r25	; 0x0c
     ba2:	ad 87       	std	Y+13, r26	; 0x0d
     ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	4a ef       	ldi	r20, 0xFA	; 250
     bb4:	54 e4       	ldi	r21, 0x44	; 68
     bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	8f 83       	std	Y+7, r24	; 0x07
     bc0:	98 87       	std	Y+8, r25	; 0x08
     bc2:	a9 87       	std	Y+9, r26	; 0x09
     bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc6:	6f 81       	ldd	r22, Y+7	; 0x07
     bc8:	78 85       	ldd	r23, Y+8	; 0x08
     bca:	89 85       	ldd	r24, Y+9	; 0x09
     bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e8       	ldi	r20, 0x80	; 128
     bd4:	5f e3       	ldi	r21, 0x3F	; 63
     bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bda:	88 23       	and	r24, r24
     bdc:	2c f4       	brge	.+10     	; 0xbe8 <mainMenuSelector+0x8a>
		__ticks = 1;
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	9e 83       	std	Y+6, r25	; 0x06
     be4:	8d 83       	std	Y+5, r24	; 0x05
     be6:	3f c0       	rjmp	.+126    	; 0xc66 <mainMenuSelector+0x108>
	else if (__tmp > 65535)
     be8:	6f 81       	ldd	r22, Y+7	; 0x07
     bea:	78 85       	ldd	r23, Y+8	; 0x08
     bec:	89 85       	ldd	r24, Y+9	; 0x09
     bee:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	4f e7       	ldi	r20, 0x7F	; 127
     bf6:	57 e4       	ldi	r21, 0x47	; 71
     bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	4c f5       	brge	.+82     	; 0xc52 <mainMenuSelector+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c00:	6b 85       	ldd	r22, Y+11	; 0x0b
     c02:	7c 85       	ldd	r23, Y+12	; 0x0c
     c04:	8d 85       	ldd	r24, Y+13	; 0x0d
     c06:	9e 85       	ldd	r25, Y+14	; 0x0e
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	40 e2       	ldi	r20, 0x20	; 32
     c0e:	51 e4       	ldi	r21, 0x41	; 65
     c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	cd 01       	movw	r24, r26
     c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	9e 83       	std	Y+6, r25	; 0x06
     c26:	8d 83       	std	Y+5, r24	; 0x05
     c28:	0f c0       	rjmp	.+30     	; 0xc48 <mainMenuSelector+0xea>
     c2a:	88 ec       	ldi	r24, 0xC8	; 200
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9c 83       	std	Y+4, r25	; 0x04
     c30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c32:	8b 81       	ldd	r24, Y+3	; 0x03
     c34:	9c 81       	ldd	r25, Y+4	; 0x04
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <mainMenuSelector+0xd8>
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	9e 83       	std	Y+6, r25	; 0x06
     c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c48:	8d 81       	ldd	r24, Y+5	; 0x05
     c4a:	9e 81       	ldd	r25, Y+6	; 0x06
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	69 f7       	brne	.-38     	; 0xc2a <mainMenuSelector+0xcc>
     c50:	14 c0       	rjmp	.+40     	; 0xc7a <mainMenuSelector+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c52:	6f 81       	ldd	r22, Y+7	; 0x07
     c54:	78 85       	ldd	r23, Y+8	; 0x08
     c56:	89 85       	ldd	r24, Y+9	; 0x09
     c58:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <mainMenuSelector+0x114>
     c76:	9a 83       	std	Y+2, r25	; 0x02
     c78:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	if(key=='+')
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	8b 32       	cpi	r24, 0x2B	; 43
     c7e:	21 f4       	brne	.+8      	; 0xc88 <mainMenuSelector+0x12a>
	{
		menuSelection=OPEN_DOOR;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 6c 01 	sts	0x016C, r24
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <mainMenuSelector+0x136>
	}
	else if(key=='-')
     c88:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8a:	8d 32       	cpi	r24, 0x2D	; 45
     c8c:	19 f4       	brne	.+6      	; 0xc94 <mainMenuSelector+0x136>
	{
		menuSelection=CHANGE_PASS;
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	80 93 6c 01 	sts	0x016C, r24
	}
}
     c94:	2f 96       	adiw	r28, 0x0f	; 15
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <enterPassword>:

void enterPassword(void){
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	60 97       	sbiw	r28, 0x10	; 16
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61

	uint8 num=0, i=0;
     cbe:	18 8a       	std	Y+16, r1	; 0x10
     cc0:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
     cc2:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
	LCD_displayString("Enter new pass:");
     cc6:	8e e7       	ldi	r24, 0x7E	; 126
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
	LCD_moveCursor(1,0);
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_moveCursor>

	num = KEYPAD_getPressedKey();
     cd6:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
     cda:	88 8b       	std	Y+16, r24	; 0x10
     cdc:	84 c0       	rjmp	.+264    	; 0xde6 <enterPassword+0x140>

	while(num!='=')
	{
		pass[i]=KEYPAD_getPressedKey();
     cde:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce0:	08 2f       	mov	r16, r24
     ce2:	10 e0       	ldi	r17, 0x00	; 0
     ce4:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
     ce8:	f8 01       	movw	r30, r16
     cea:	e9 58       	subi	r30, 0x89	; 137
     cec:	fe 4f       	sbci	r31, 0xFE	; 254
     cee:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     cf0:	8a e2       	ldi	r24, 0x2A	; 42
     cf2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <LCD_displayCharacter>
		i++;
     cf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	8f 87       	std	Y+15, r24	; 0x0f
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	aa ef       	ldi	r26, 0xFA	; 250
     d02:	b3 e4       	ldi	r27, 0x43	; 67
     d04:	8b 87       	std	Y+11, r24	; 0x0b
     d06:	9c 87       	std	Y+12, r25	; 0x0c
     d08:	ad 87       	std	Y+13, r26	; 0x0d
     d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d10:	8d 85       	ldd	r24, Y+13	; 0x0d
     d12:	9e 85       	ldd	r25, Y+14	; 0x0e
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	4a ef       	ldi	r20, 0xFA	; 250
     d1a:	54 e4       	ldi	r21, 0x44	; 68
     d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d20:	dc 01       	movw	r26, r24
     d22:	cb 01       	movw	r24, r22
     d24:	8f 83       	std	Y+7, r24	; 0x07
     d26:	98 87       	std	Y+8, r25	; 0x08
     d28:	a9 87       	std	Y+9, r26	; 0x09
     d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d2c:	6f 81       	ldd	r22, Y+7	; 0x07
     d2e:	78 85       	ldd	r23, Y+8	; 0x08
     d30:	89 85       	ldd	r24, Y+9	; 0x09
     d32:	9a 85       	ldd	r25, Y+10	; 0x0a
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d40:	88 23       	and	r24, r24
     d42:	2c f4       	brge	.+10     	; 0xd4e <enterPassword+0xa8>
		__ticks = 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9e 83       	std	Y+6, r25	; 0x06
     d4a:	8d 83       	std	Y+5, r24	; 0x05
     d4c:	3f c0       	rjmp	.+126    	; 0xdcc <enterPassword+0x126>
	else if (__tmp > 65535)
     d4e:	6f 81       	ldd	r22, Y+7	; 0x07
     d50:	78 85       	ldd	r23, Y+8	; 0x08
     d52:	89 85       	ldd	r24, Y+9	; 0x09
     d54:	9a 85       	ldd	r25, Y+10	; 0x0a
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	3f ef       	ldi	r19, 0xFF	; 255
     d5a:	4f e7       	ldi	r20, 0x7F	; 127
     d5c:	57 e4       	ldi	r21, 0x47	; 71
     d5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d62:	18 16       	cp	r1, r24
     d64:	4c f5       	brge	.+82     	; 0xdb8 <enterPassword+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d66:	6b 85       	ldd	r22, Y+11	; 0x0b
     d68:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	40 e2       	ldi	r20, 0x20	; 32
     d74:	51 e4       	ldi	r21, 0x41	; 65
     d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	0f c0       	rjmp	.+30     	; 0xdae <enterPassword+0x108>
     d90:	88 ec       	ldi	r24, 0xC8	; 200
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	9c 83       	std	Y+4, r25	; 0x04
     d96:	8b 83       	std	Y+3, r24	; 0x03
     d98:	8b 81       	ldd	r24, Y+3	; 0x03
     d9a:	9c 81       	ldd	r25, Y+4	; 0x04
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <enterPassword+0xf6>
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	9e 83       	std	Y+6, r25	; 0x06
     dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	69 f7       	brne	.-38     	; 0xd90 <enterPassword+0xea>
     db6:	14 c0       	rjmp	.+40     	; 0xde0 <enterPassword+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db8:	6f 81       	ldd	r22, Y+7	; 0x07
     dba:	78 85       	ldd	r23, Y+8	; 0x08
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9e 83       	std	Y+6, r25	; 0x06
     dca:	8d 83       	std	Y+5, r24	; 0x05
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	f1 f7       	brne	.-4      	; 0xdd8 <enterPassword+0x132>
     ddc:	9a 83       	std	Y+2, r25	; 0x02
     dde:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		num=KEYPAD_getPressedKey();
     de0:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
     de4:	88 8b       	std	Y+16, r24	; 0x10
	LCD_displayString("Enter new pass:");
	LCD_moveCursor(1,0);

	num = KEYPAD_getPressedKey();

	while(num!='=')
     de6:	88 89       	ldd	r24, Y+16	; 0x10
     de8:	8d 33       	cpi	r24, 0x3D	; 61
     dea:	09 f0       	breq	.+2      	; 0xdee <enterPassword+0x148>
     dec:	78 cf       	rjmp	.-272    	; 0xcde <enterPassword+0x38>
		i++;
		_delay_ms(500);
		num=KEYPAD_getPressedKey();
	}

}
     dee:	60 96       	adiw	r28, 0x10	; 16
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <enterConfirmedPassowrd>:

void enterConfirmedPassowrd(void){
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	60 97       	sbiw	r28, 0x10	; 16
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61

	uint8 num=0, i=0;
     e1c:	18 8a       	std	Y+16, r1	; 0x10
     e1e:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
     e20:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
	LCD_displayString("Enter same pass:");
     e24:	8e e8       	ldi	r24, 0x8E	; 142
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
	LCD_moveCursor(1,0);
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_moveCursor>

	num = KEYPAD_getPressedKey();
     e34:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
     e38:	88 8b       	std	Y+16, r24	; 0x10
     e3a:	84 c0       	rjmp	.+264    	; 0xf44 <enterConfirmedPassowrd+0x140>

	while(num!='=')
	{
		confirmed_pass[i]=KEYPAD_getPressedKey();
     e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3e:	08 2f       	mov	r16, r24
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
     e46:	f8 01       	movw	r30, r16
     e48:	e4 58       	subi	r30, 0x84	; 132
     e4a:	fe 4f       	sbci	r31, 0xFE	; 254
     e4c:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     e4e:	8a e2       	ldi	r24, 0x2A	; 42
     e50:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <LCD_displayCharacter>
		i++;
     e54:	8f 85       	ldd	r24, Y+15	; 0x0f
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	8f 87       	std	Y+15, r24	; 0x0f
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	aa ef       	ldi	r26, 0xFA	; 250
     e60:	b3 e4       	ldi	r27, 0x43	; 67
     e62:	8b 87       	std	Y+11, r24	; 0x0b
     e64:	9c 87       	std	Y+12, r25	; 0x0c
     e66:	ad 87       	std	Y+13, r26	; 0x0d
     e68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4a ef       	ldi	r20, 0xFA	; 250
     e78:	54 e4       	ldi	r21, 0x44	; 68
     e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	8f 83       	std	Y+7, r24	; 0x07
     e84:	98 87       	std	Y+8, r25	; 0x08
     e86:	a9 87       	std	Y+9, r26	; 0x09
     e88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e8a:	6f 81       	ldd	r22, Y+7	; 0x07
     e8c:	78 85       	ldd	r23, Y+8	; 0x08
     e8e:	89 85       	ldd	r24, Y+9	; 0x09
     e90:	9a 85       	ldd	r25, Y+10	; 0x0a
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e8       	ldi	r20, 0x80	; 128
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e9e:	88 23       	and	r24, r24
     ea0:	2c f4       	brge	.+10     	; 0xeac <enterConfirmedPassowrd+0xa8>
		__ticks = 1;
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	3f c0       	rjmp	.+126    	; 0xf2a <enterConfirmedPassowrd+0x126>
	else if (__tmp > 65535)
     eac:	6f 81       	ldd	r22, Y+7	; 0x07
     eae:	78 85       	ldd	r23, Y+8	; 0x08
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	3f ef       	ldi	r19, 0xFF	; 255
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	57 e4       	ldi	r21, 0x47	; 71
     ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ec0:	18 16       	cp	r1, r24
     ec2:	4c f5       	brge	.+82     	; 0xf16 <enterConfirmedPassowrd+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eca:	9e 85       	ldd	r25, Y+14	; 0x0e
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9e 83       	std	Y+6, r25	; 0x06
     eea:	8d 83       	std	Y+5, r24	; 0x05
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <enterConfirmedPassowrd+0x108>
     eee:	88 ec       	ldi	r24, 0xC8	; 200
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	8b 83       	std	Y+3, r24	; 0x03
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <enterConfirmedPassowrd+0xf6>
     efe:	9c 83       	std	Y+4, r25	; 0x04
     f00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	8d 81       	ldd	r24, Y+5	; 0x05
     f04:	9e 81       	ldd	r25, Y+6	; 0x06
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	9e 83       	std	Y+6, r25	; 0x06
     f0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	69 f7       	brne	.-38     	; 0xeee <enterConfirmedPassowrd+0xea>
     f14:	14 c0       	rjmp	.+40     	; 0xf3e <enterConfirmedPassowrd+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f16:	6f 81       	ldd	r22, Y+7	; 0x07
     f18:	78 85       	ldd	r23, Y+8	; 0x08
     f1a:	89 85       	ldd	r24, Y+9	; 0x09
     f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	9e 83       	std	Y+6, r25	; 0x06
     f28:	8d 83       	std	Y+5, r24	; 0x05
     f2a:	8d 81       	ldd	r24, Y+5	; 0x05
     f2c:	9e 81       	ldd	r25, Y+6	; 0x06
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <enterConfirmedPassowrd+0x132>
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		num=KEYPAD_getPressedKey();
     f3e:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
     f42:	88 8b       	std	Y+16, r24	; 0x10
	LCD_displayString("Enter same pass:");
	LCD_moveCursor(1,0);

	num = KEYPAD_getPressedKey();

	while(num!='=')
     f44:	88 89       	ldd	r24, Y+16	; 0x10
     f46:	8d 33       	cpi	r24, 0x3D	; 61
     f48:	09 f0       	breq	.+2      	; 0xf4c <enterConfirmedPassowrd+0x148>
     f4a:	78 cf       	rjmp	.-272    	; 0xe3c <enterConfirmedPassowrd+0x38>
		i++;
		_delay_ms(500);
		num=KEYPAD_getPressedKey();
	}

}
     f4c:	60 96       	adiw	r28, 0x10	; 16
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <sendPassword>:

void sendPassword(void){
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <sendPassword+0x6>
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62

	UART_sendByte(HMI_MC_READY);
     f6c:	80 e1       	ldi	r24, 0x10	; 16
     f6e:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
	for(int i=0;i<5;i++)
     f72:	1a 82       	std	Y+2, r1	; 0x02
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	0d c0       	rjmp	.+26     	; 0xf92 <sendPassword+0x30>
	{
		UART_sendByte(pass[i]);
     f78:	89 81       	ldd	r24, Y+1	; 0x01
     f7a:	9a 81       	ldd	r25, Y+2	; 0x02
     f7c:	fc 01       	movw	r30, r24
     f7e:	e9 58       	subi	r30, 0x89	; 137
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	80 81       	ld	r24, Z
     f84:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
}

void sendPassword(void){

	UART_sendByte(HMI_MC_READY);
	for(int i=0;i<5;i++)
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	85 30       	cpi	r24, 0x05	; 5
     f98:	91 05       	cpc	r25, r1
     f9a:	74 f3       	brlt	.-36     	; 0xf78 <sendPassword+0x16>
	{
		UART_sendByte(pass[i]);
	}
}
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <sendConfirmedPassword>:

void sendConfirmedPassword(void){
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <sendConfirmedPassword+0x6>
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62

	UART_sendByte(HMI_MC_READY);
     fb0:	80 e1       	ldi	r24, 0x10	; 16
     fb2:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
	for(int i=0;i<5;i++)
     fb6:	1a 82       	std	Y+2, r1	; 0x02
     fb8:	19 82       	std	Y+1, r1	; 0x01
     fba:	0d c0       	rjmp	.+26     	; 0xfd6 <sendConfirmedPassword+0x30>
	{
		UART_sendByte(confirmed_pass[i]);
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	fc 01       	movw	r30, r24
     fc2:	e4 58       	subi	r30, 0x84	; 132
     fc4:	fe 4f       	sbci	r31, 0xFE	; 254
     fc6:	80 81       	ld	r24, Z
     fc8:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
}

void sendConfirmedPassword(void){

	UART_sendByte(HMI_MC_READY);
	for(int i=0;i<5;i++)
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	85 30       	cpi	r24, 0x05	; 5
     fdc:	91 05       	cpc	r25, r1
     fde:	74 f3       	brlt	.-36     	; 0xfbc <sendConfirmedPassword+0x16>
	{
		UART_sendByte(confirmed_pass[i]);
	}
}
     fe0:	0f 90       	pop	r0
     fe2:	0f 90       	pop	r0
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <receive_newPasswordConfirmation>:

void receive_newPasswordConfirmation(void){
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62

	while(UART_recieveByte()!=CONTROL_MC_READY){}
     ff2:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
     ff6:	80 32       	cpi	r24, 0x20	; 32
     ff8:	e1 f7       	brne	.-8      	; 0xff2 <receive_newPasswordConfirmation+0x8>

	confirmed=UART_recieveByte();
     ffa:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
     ffe:	80 93 81 01 	sts	0x0181, r24
}
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <newPasswordSequence>:

void newPasswordSequence(void){
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	e8 97       	sbiw	r28, 0x38	; 56
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61

	enterPassword();
    101c:	0e 94 53 06 	call	0xca6	; 0xca6 <enterPassword>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	aa ef       	ldi	r26, 0xFA	; 250
    1026:	b3 e4       	ldi	r27, 0x43	; 67
    1028:	8d ab       	std	Y+53, r24	; 0x35
    102a:	9e ab       	std	Y+54, r25	; 0x36
    102c:	af ab       	std	Y+55, r26	; 0x37
    102e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1030:	6d a9       	ldd	r22, Y+53	; 0x35
    1032:	7e a9       	ldd	r23, Y+54	; 0x36
    1034:	8f a9       	ldd	r24, Y+55	; 0x37
    1036:	98 ad       	ldd	r25, Y+56	; 0x38
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	4a ef       	ldi	r20, 0xFA	; 250
    103e:	54 e4       	ldi	r21, 0x44	; 68
    1040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	89 ab       	std	Y+49, r24	; 0x31
    104a:	9a ab       	std	Y+50, r25	; 0x32
    104c:	ab ab       	std	Y+51, r26	; 0x33
    104e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1050:	69 a9       	ldd	r22, Y+49	; 0x31
    1052:	7a a9       	ldd	r23, Y+50	; 0x32
    1054:	8b a9       	ldd	r24, Y+51	; 0x33
    1056:	9c a9       	ldd	r25, Y+52	; 0x34
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e8       	ldi	r20, 0x80	; 128
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1064:	88 23       	and	r24, r24
    1066:	2c f4       	brge	.+10     	; 0x1072 <newPasswordSequence+0x6a>
		__ticks = 1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	98 ab       	std	Y+48, r25	; 0x30
    106e:	8f a7       	std	Y+47, r24	; 0x2f
    1070:	3f c0       	rjmp	.+126    	; 0x10f0 <newPasswordSequence+0xe8>
	else if (__tmp > 65535)
    1072:	69 a9       	ldd	r22, Y+49	; 0x31
    1074:	7a a9       	ldd	r23, Y+50	; 0x32
    1076:	8b a9       	ldd	r24, Y+51	; 0x33
    1078:	9c a9       	ldd	r25, Y+52	; 0x34
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	3f ef       	ldi	r19, 0xFF	; 255
    107e:	4f e7       	ldi	r20, 0x7F	; 127
    1080:	57 e4       	ldi	r21, 0x47	; 71
    1082:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1086:	18 16       	cp	r1, r24
    1088:	4c f5       	brge	.+82     	; 0x10dc <newPasswordSequence+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    108a:	6d a9       	ldd	r22, Y+53	; 0x35
    108c:	7e a9       	ldd	r23, Y+54	; 0x36
    108e:	8f a9       	ldd	r24, Y+55	; 0x37
    1090:	98 ad       	ldd	r25, Y+56	; 0x38
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e2       	ldi	r20, 0x20	; 32
    1098:	51 e4       	ldi	r21, 0x41	; 65
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	98 ab       	std	Y+48, r25	; 0x30
    10b0:	8f a7       	std	Y+47, r24	; 0x2f
    10b2:	0f c0       	rjmp	.+30     	; 0x10d2 <newPasswordSequence+0xca>
    10b4:	88 ec       	ldi	r24, 0xC8	; 200
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9e a7       	std	Y+46, r25	; 0x2e
    10ba:	8d a7       	std	Y+45, r24	; 0x2d
    10bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    10be:	9e a5       	ldd	r25, Y+46	; 0x2e
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <newPasswordSequence+0xb8>
    10c4:	9e a7       	std	Y+46, r25	; 0x2e
    10c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    10ca:	98 a9       	ldd	r25, Y+48	; 0x30
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	98 ab       	std	Y+48, r25	; 0x30
    10d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d4:	98 a9       	ldd	r25, Y+48	; 0x30
    10d6:	00 97       	sbiw	r24, 0x00	; 0
    10d8:	69 f7       	brne	.-38     	; 0x10b4 <newPasswordSequence+0xac>
    10da:	14 c0       	rjmp	.+40     	; 0x1104 <newPasswordSequence+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10dc:	69 a9       	ldd	r22, Y+49	; 0x31
    10de:	7a a9       	ldd	r23, Y+50	; 0x32
    10e0:	8b a9       	ldd	r24, Y+51	; 0x33
    10e2:	9c a9       	ldd	r25, Y+52	; 0x34
    10e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	98 ab       	std	Y+48, r25	; 0x30
    10ee:	8f a7       	std	Y+47, r24	; 0x2f
    10f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    10f2:	98 a9       	ldd	r25, Y+48	; 0x30
    10f4:	9c a7       	std	Y+44, r25	; 0x2c
    10f6:	8b a7       	std	Y+43, r24	; 0x2b
    10f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <newPasswordSequence+0xf4>
    1100:	9c a7       	std	Y+44, r25	; 0x2c
    1102:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(500);

	enterConfirmedPassowrd();
    1104:	0e 94 02 07 	call	0xe04	; 0xe04 <enterConfirmedPassowrd>

	sendPassword();
    1108:	0e 94 b1 07 	call	0xf62	; 0xf62 <sendPassword>
	sendConfirmedPassword();
    110c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendConfirmedPassword>

	receive_newPasswordConfirmation();
    1110:	0e 94 f5 07 	call	0xfea	; 0xfea <receive_newPasswordConfirmation>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	aa ef       	ldi	r26, 0xFA	; 250
    111a:	b3 e4       	ldi	r27, 0x43	; 67
    111c:	8f a3       	std	Y+39, r24	; 0x27
    111e:	98 a7       	std	Y+40, r25	; 0x28
    1120:	a9 a7       	std	Y+41, r26	; 0x29
    1122:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	6f a1       	ldd	r22, Y+39	; 0x27
    1126:	78 a5       	ldd	r23, Y+40	; 0x28
    1128:	89 a5       	ldd	r24, Y+41	; 0x29
    112a:	9a a5       	ldd	r25, Y+42	; 0x2a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	4a ef       	ldi	r20, 0xFA	; 250
    1132:	54 e4       	ldi	r21, 0x44	; 68
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	8b a3       	std	Y+35, r24	; 0x23
    113e:	9c a3       	std	Y+36, r25	; 0x24
    1140:	ad a3       	std	Y+37, r26	; 0x25
    1142:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1144:	6b a1       	ldd	r22, Y+35	; 0x23
    1146:	7c a1       	ldd	r23, Y+36	; 0x24
    1148:	8d a1       	ldd	r24, Y+37	; 0x25
    114a:	9e a1       	ldd	r25, Y+38	; 0x26
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <newPasswordSequence+0x15e>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9a a3       	std	Y+34, r25	; 0x22
    1162:	89 a3       	std	Y+33, r24	; 0x21
    1164:	3f c0       	rjmp	.+126    	; 0x11e4 <newPasswordSequence+0x1dc>
	else if (__tmp > 65535)
    1166:	6b a1       	ldd	r22, Y+35	; 0x23
    1168:	7c a1       	ldd	r23, Y+36	; 0x24
    116a:	8d a1       	ldd	r24, Y+37	; 0x25
    116c:	9e a1       	ldd	r25, Y+38	; 0x26
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	4c f5       	brge	.+82     	; 0x11d0 <newPasswordSequence+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117e:	6f a1       	ldd	r22, Y+39	; 0x27
    1180:	78 a5       	ldd	r23, Y+40	; 0x28
    1182:	89 a5       	ldd	r24, Y+41	; 0x29
    1184:	9a a5       	ldd	r25, Y+42	; 0x2a
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e2       	ldi	r20, 0x20	; 32
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9a a3       	std	Y+34, r25	; 0x22
    11a4:	89 a3       	std	Y+33, r24	; 0x21
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <newPasswordSequence+0x1be>
    11a8:	88 ec       	ldi	r24, 0xC8	; 200
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	98 a3       	std	Y+32, r25	; 0x20
    11ae:	8f 8f       	std	Y+31, r24	; 0x1f
    11b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11b2:	98 a1       	ldd	r25, Y+32	; 0x20
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <newPasswordSequence+0x1ac>
    11b8:	98 a3       	std	Y+32, r25	; 0x20
    11ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	89 a1       	ldd	r24, Y+33	; 0x21
    11be:	9a a1       	ldd	r25, Y+34	; 0x22
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	9a a3       	std	Y+34, r25	; 0x22
    11c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c6:	89 a1       	ldd	r24, Y+33	; 0x21
    11c8:	9a a1       	ldd	r25, Y+34	; 0x22
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f7       	brne	.-38     	; 0x11a8 <newPasswordSequence+0x1a0>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <newPasswordSequence+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d0:	6b a1       	ldd	r22, Y+35	; 0x23
    11d2:	7c a1       	ldd	r23, Y+36	; 0x24
    11d4:	8d a1       	ldd	r24, Y+37	; 0x25
    11d6:	9e a1       	ldd	r25, Y+38	; 0x26
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9a a3       	std	Y+34, r25	; 0x22
    11e2:	89 a3       	std	Y+33, r24	; 0x21
    11e4:	89 a1       	ldd	r24, Y+33	; 0x21
    11e6:	9a a1       	ldd	r25, Y+34	; 0x22
    11e8:	9e 8f       	std	Y+30, r25	; 0x1e
    11ea:	8d 8f       	std	Y+29, r24	; 0x1d
    11ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <newPasswordSequence+0x1e8>
    11f4:	9e 8f       	std	Y+30, r25	; 0x1e
    11f6:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(500);

	LCD_clearScreen();
    11f8:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
	if(confirmed)
    11fc:	80 91 81 01 	lds	r24, 0x0181
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <newPasswordSequence+0x1fe>
    1204:	77 c0       	rjmp	.+238    	; 0x12f4 <newPasswordSequence+0x2ec>
	{
		LCD_displayString("CONFIRMED");
    1206:	8f e9       	ldi	r24, 0x9F	; 159
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	aa e7       	ldi	r26, 0x7A	; 122
    1214:	b4 e4       	ldi	r27, 0x44	; 68
    1216:	89 8f       	std	Y+25, r24	; 0x19
    1218:	9a 8f       	std	Y+26, r25	; 0x1a
    121a:	ab 8f       	std	Y+27, r26	; 0x1b
    121c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    121e:	69 8d       	ldd	r22, Y+25	; 0x19
    1220:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1222:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1224:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	4a ef       	ldi	r20, 0xFA	; 250
    122c:	54 e4       	ldi	r21, 0x44	; 68
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	8d 8b       	std	Y+21, r24	; 0x15
    1238:	9e 8b       	std	Y+22, r25	; 0x16
    123a:	af 8b       	std	Y+23, r26	; 0x17
    123c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    123e:	6d 89       	ldd	r22, Y+21	; 0x15
    1240:	7e 89       	ldd	r23, Y+22	; 0x16
    1242:	8f 89       	ldd	r24, Y+23	; 0x17
    1244:	98 8d       	ldd	r25, Y+24	; 0x18
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e8       	ldi	r20, 0x80	; 128
    124c:	5f e3       	ldi	r21, 0x3F	; 63
    124e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1252:	88 23       	and	r24, r24
    1254:	2c f4       	brge	.+10     	; 0x1260 <newPasswordSequence+0x258>
		__ticks = 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9c 8b       	std	Y+20, r25	; 0x14
    125c:	8b 8b       	std	Y+19, r24	; 0x13
    125e:	3f c0       	rjmp	.+126    	; 0x12de <newPasswordSequence+0x2d6>
	else if (__tmp > 65535)
    1260:	6d 89       	ldd	r22, Y+21	; 0x15
    1262:	7e 89       	ldd	r23, Y+22	; 0x16
    1264:	8f 89       	ldd	r24, Y+23	; 0x17
    1266:	98 8d       	ldd	r25, Y+24	; 0x18
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	3f ef       	ldi	r19, 0xFF	; 255
    126c:	4f e7       	ldi	r20, 0x7F	; 127
    126e:	57 e4       	ldi	r21, 0x47	; 71
    1270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	4c f5       	brge	.+82     	; 0x12ca <newPasswordSequence+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1278:	69 8d       	ldd	r22, Y+25	; 0x19
    127a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    127c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    127e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e2       	ldi	r20, 0x20	; 32
    1286:	51 e4       	ldi	r21, 0x41	; 65
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	9c 8b       	std	Y+20, r25	; 0x14
    129e:	8b 8b       	std	Y+19, r24	; 0x13
    12a0:	0f c0       	rjmp	.+30     	; 0x12c0 <newPasswordSequence+0x2b8>
    12a2:	88 ec       	ldi	r24, 0xC8	; 200
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9a 8b       	std	Y+18, r25	; 0x12
    12a8:	89 8b       	std	Y+17, r24	; 0x11
    12aa:	89 89       	ldd	r24, Y+17	; 0x11
    12ac:	9a 89       	ldd	r25, Y+18	; 0x12
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <newPasswordSequence+0x2a6>
    12b2:	9a 8b       	std	Y+18, r25	; 0x12
    12b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b6:	8b 89       	ldd	r24, Y+19	; 0x13
    12b8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ba:	01 97       	sbiw	r24, 0x01	; 1
    12bc:	9c 8b       	std	Y+20, r25	; 0x14
    12be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c0:	8b 89       	ldd	r24, Y+19	; 0x13
    12c2:	9c 89       	ldd	r25, Y+20	; 0x14
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	69 f7       	brne	.-38     	; 0x12a2 <newPasswordSequence+0x29a>
    12c8:	8f c0       	rjmp	.+286    	; 0x13e8 <newPasswordSequence+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ca:	6d 89       	ldd	r22, Y+21	; 0x15
    12cc:	7e 89       	ldd	r23, Y+22	; 0x16
    12ce:	8f 89       	ldd	r24, Y+23	; 0x17
    12d0:	98 8d       	ldd	r25, Y+24	; 0x18
    12d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	9c 8b       	std	Y+20, r25	; 0x14
    12dc:	8b 8b       	std	Y+19, r24	; 0x13
    12de:	8b 89       	ldd	r24, Y+19	; 0x13
    12e0:	9c 89       	ldd	r25, Y+20	; 0x14
    12e2:	98 8b       	std	Y+16, r25	; 0x10
    12e4:	8f 87       	std	Y+15, r24	; 0x0f
    12e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e8:	98 89       	ldd	r25, Y+16	; 0x10
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <newPasswordSequence+0x2e2>
    12ee:	98 8b       	std	Y+16, r25	; 0x10
    12f0:	8f 87       	std	Y+15, r24	; 0x0f
    12f2:	7a c0       	rjmp	.+244    	; 0x13e8 <newPasswordSequence+0x3e0>
		_delay_ms(1000);
		return;
	}
	else
	{
		LCD_displayString("UNMATCHED");
    12f4:	89 ea       	ldi	r24, 0xA9	; 169
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	aa e7       	ldi	r26, 0x7A	; 122
    1302:	b4 e4       	ldi	r27, 0x44	; 68
    1304:	8b 87       	std	Y+11, r24	; 0x0b
    1306:	9c 87       	std	Y+12, r25	; 0x0c
    1308:	ad 87       	std	Y+13, r26	; 0x0d
    130a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130c:	6b 85       	ldd	r22, Y+11	; 0x0b
    130e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1310:	8d 85       	ldd	r24, Y+13	; 0x0d
    1312:	9e 85       	ldd	r25, Y+14	; 0x0e
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	4a ef       	ldi	r20, 0xFA	; 250
    131a:	54 e4       	ldi	r21, 0x44	; 68
    131c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	8f 83       	std	Y+7, r24	; 0x07
    1326:	98 87       	std	Y+8, r25	; 0x08
    1328:	a9 87       	std	Y+9, r26	; 0x09
    132a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    132c:	6f 81       	ldd	r22, Y+7	; 0x07
    132e:	78 85       	ldd	r23, Y+8	; 0x08
    1330:	89 85       	ldd	r24, Y+9	; 0x09
    1332:	9a 85       	ldd	r25, Y+10	; 0x0a
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e8       	ldi	r20, 0x80	; 128
    133a:	5f e3       	ldi	r21, 0x3F	; 63
    133c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1340:	88 23       	and	r24, r24
    1342:	2c f4       	brge	.+10     	; 0x134e <newPasswordSequence+0x346>
		__ticks = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	9e 83       	std	Y+6, r25	; 0x06
    134a:	8d 83       	std	Y+5, r24	; 0x05
    134c:	3f c0       	rjmp	.+126    	; 0x13cc <newPasswordSequence+0x3c4>
	else if (__tmp > 65535)
    134e:	6f 81       	ldd	r22, Y+7	; 0x07
    1350:	78 85       	ldd	r23, Y+8	; 0x08
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	3f ef       	ldi	r19, 0xFF	; 255
    135a:	4f e7       	ldi	r20, 0x7F	; 127
    135c:	57 e4       	ldi	r21, 0x47	; 71
    135e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1362:	18 16       	cp	r1, r24
    1364:	4c f5       	brge	.+82     	; 0x13b8 <newPasswordSequence+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1366:	6b 85       	ldd	r22, Y+11	; 0x0b
    1368:	7c 85       	ldd	r23, Y+12	; 0x0c
    136a:	8d 85       	ldd	r24, Y+13	; 0x0d
    136c:	9e 85       	ldd	r25, Y+14	; 0x0e
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e2       	ldi	r20, 0x20	; 32
    1374:	51 e4       	ldi	r21, 0x41	; 65
    1376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	0f c0       	rjmp	.+30     	; 0x13ae <newPasswordSequence+0x3a6>
    1390:	88 ec       	ldi	r24, 0xC8	; 200
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8b 83       	std	Y+3, r24	; 0x03
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	f1 f7       	brne	.-4      	; 0x139c <newPasswordSequence+0x394>
    13a0:	9c 83       	std	Y+4, r25	; 0x04
    13a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	9e 81       	ldd	r25, Y+6	; 0x06
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	69 f7       	brne	.-38     	; 0x1390 <newPasswordSequence+0x388>
    13b6:	14 c0       	rjmp	.+40     	; 0x13e0 <newPasswordSequence+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13b8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ba:	78 85       	ldd	r23, Y+8	; 0x08
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	9e 83       	std	Y+6, r25	; 0x06
    13ca:	8d 83       	std	Y+5, r24	; 0x05
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	9e 81       	ldd	r25, Y+6	; 0x06
    13d0:	9a 83       	std	Y+2, r25	; 0x02
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <newPasswordSequence+0x3d0>
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    13e0:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
		newPasswordSequence();
    13e4:	0e 94 04 08 	call	0x1008	; 0x1008 <newPasswordSequence>
	}

}
    13e8:	e8 96       	adiw	r28, 0x38	; 56
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <currentPasswordAuthentication>:

uint8 currentPasswordAuthentication(void){
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	68 97       	sbiw	r28, 0x18	; 24
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61

	uint8 status=0, num=0, i=0;
    1412:	1b 8a       	std	Y+19, r1	; 0x13
    1414:	1a 8a       	std	Y+18, r1	; 0x12
    1416:	19 8a       	std	Y+17, r1	; 0x11
	uint8 current_pass[5];

	LCD_clearScreen();
    1418:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
	LCD_displayString("Enter current");
    141c:	83 eb       	ldi	r24, 0xB3	; 179
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
	LCD_moveCursor(1,0);
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_moveCursor>
	LCD_displayString("password:");
    142c:	81 ec       	ldi	r24, 0xC1	; 193
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
    1434:	87 c0       	rjmp	.+270    	; 0x1544 <currentPasswordAuthentication+0x14a>
	while(num!='=')
	{
		current_pass[i]=KEYPAD_getPressedKey();
    1436:	89 89       	ldd	r24, Y+17	; 0x11
    1438:	08 2f       	mov	r16, r24
    143a:	10 e0       	ldi	r17, 0x00	; 0
    143c:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
    1440:	28 2f       	mov	r18, r24
    1442:	ce 01       	movw	r24, r28
    1444:	44 96       	adiw	r24, 0x14	; 20
    1446:	fc 01       	movw	r30, r24
    1448:	e0 0f       	add	r30, r16
    144a:	f1 1f       	adc	r31, r17
    144c:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    144e:	8a e2       	ldi	r24, 0x2A	; 42
    1450:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <LCD_displayCharacter>
		i++;
    1454:	89 89       	ldd	r24, Y+17	; 0x11
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	89 8b       	std	Y+17, r24	; 0x11
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	aa ef       	ldi	r26, 0xFA	; 250
    1460:	b3 e4       	ldi	r27, 0x43	; 67
    1462:	8b 87       	std	Y+11, r24	; 0x0b
    1464:	9c 87       	std	Y+12, r25	; 0x0c
    1466:	ad 87       	std	Y+13, r26	; 0x0d
    1468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146a:	6b 85       	ldd	r22, Y+11	; 0x0b
    146c:	7c 85       	ldd	r23, Y+12	; 0x0c
    146e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1470:	9e 85       	ldd	r25, Y+14	; 0x0e
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a ef       	ldi	r20, 0xFA	; 250
    1478:	54 e4       	ldi	r21, 0x44	; 68
    147a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	8f 83       	std	Y+7, r24	; 0x07
    1484:	98 87       	std	Y+8, r25	; 0x08
    1486:	a9 87       	std	Y+9, r26	; 0x09
    1488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	40 e8       	ldi	r20, 0x80	; 128
    1498:	5f e3       	ldi	r21, 0x3F	; 63
    149a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    149e:	88 23       	and	r24, r24
    14a0:	2c f4       	brge	.+10     	; 0x14ac <currentPasswordAuthentication+0xb2>
		__ticks = 1;
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <currentPasswordAuthentication+0x130>
	else if (__tmp > 65535)
    14ac:	6f 81       	ldd	r22, Y+7	; 0x07
    14ae:	78 85       	ldd	r23, Y+8	; 0x08
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	3f ef       	ldi	r19, 0xFF	; 255
    14b8:	4f e7       	ldi	r20, 0x7F	; 127
    14ba:	57 e4       	ldi	r21, 0x47	; 71
    14bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c0:	18 16       	cp	r1, r24
    14c2:	4c f5       	brge	.+82     	; 0x1516 <currentPasswordAuthentication+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e2       	ldi	r20, 0x20	; 32
    14d2:	51 e4       	ldi	r21, 0x41	; 65
    14d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d8:	dc 01       	movw	r26, r24
    14da:	cb 01       	movw	r24, r22
    14dc:	bc 01       	movw	r22, r24
    14de:	cd 01       	movw	r24, r26
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	0f c0       	rjmp	.+30     	; 0x150c <currentPasswordAuthentication+0x112>
    14ee:	88 ec       	ldi	r24, 0xC8	; 200
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9c 83       	std	Y+4, r25	; 0x04
    14f4:	8b 83       	std	Y+3, r24	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	f1 f7       	brne	.-4      	; 0x14fa <currentPasswordAuthentication+0x100>
    14fe:	9c 83       	std	Y+4, r25	; 0x04
    1500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	9e 83       	std	Y+6, r25	; 0x06
    150a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	69 f7       	brne	.-38     	; 0x14ee <currentPasswordAuthentication+0xf4>
    1514:	14 c0       	rjmp	.+40     	; 0x153e <currentPasswordAuthentication+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1516:	6f 81       	ldd	r22, Y+7	; 0x07
    1518:	78 85       	ldd	r23, Y+8	; 0x08
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	9a 85       	ldd	r25, Y+10	; 0x0a
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9e 83       	std	Y+6, r25	; 0x06
    1528:	8d 83       	std	Y+5, r24	; 0x05
    152a:	8d 81       	ldd	r24, Y+5	; 0x05
    152c:	9e 81       	ldd	r25, Y+6	; 0x06
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	9a 81       	ldd	r25, Y+2	; 0x02
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <currentPasswordAuthentication+0x13c>
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		num=KEYPAD_getPressedKey();
    153e:	0e 94 90 10 	call	0x2120	; 0x2120 <KEYPAD_getPressedKey>
    1542:	8a 8b       	std	Y+18, r24	; 0x12

	LCD_clearScreen();
	LCD_displayString("Enter current");
	LCD_moveCursor(1,0);
	LCD_displayString("password:");
	while(num!='=')
    1544:	8a 89       	ldd	r24, Y+18	; 0x12
    1546:	8d 33       	cpi	r24, 0x3D	; 61
    1548:	09 f0       	breq	.+2      	; 0x154c <currentPasswordAuthentication+0x152>
    154a:	75 cf       	rjmp	.-278    	; 0x1436 <currentPasswordAuthentication+0x3c>
		i++;
		_delay_ms(500);
		num=KEYPAD_getPressedKey();
	}

	UART_sendByte(HMI_MC_READY);
    154c:	80 e1       	ldi	r24, 0x10	; 16
    154e:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>

	for(int i=0;i<5;i++)
    1552:	18 8a       	std	Y+16, r1	; 0x10
    1554:	1f 86       	std	Y+15, r1	; 0x0f
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <currentPasswordAuthentication+0x17c>
	{
		UART_sendByte(current_pass[i]);
    1558:	2f 85       	ldd	r18, Y+15	; 0x0f
    155a:	38 89       	ldd	r19, Y+16	; 0x10
    155c:	ce 01       	movw	r24, r28
    155e:	44 96       	adiw	r24, 0x14	; 20
    1560:	fc 01       	movw	r30, r24
    1562:	e2 0f       	add	r30, r18
    1564:	f3 1f       	adc	r31, r19
    1566:	80 81       	ld	r24, Z
    1568:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
		num=KEYPAD_getPressedKey();
	}

	UART_sendByte(HMI_MC_READY);

	for(int i=0;i<5;i++)
    156c:	8f 85       	ldd	r24, Y+15	; 0x0f
    156e:	98 89       	ldd	r25, Y+16	; 0x10
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	98 8b       	std	Y+16, r25	; 0x10
    1574:	8f 87       	std	Y+15, r24	; 0x0f
    1576:	8f 85       	ldd	r24, Y+15	; 0x0f
    1578:	98 89       	ldd	r25, Y+16	; 0x10
    157a:	85 30       	cpi	r24, 0x05	; 5
    157c:	91 05       	cpc	r25, r1
    157e:	64 f3       	brlt	.-40     	; 0x1558 <currentPasswordAuthentication+0x15e>
	{
		UART_sendByte(current_pass[i]);
	}

	status=UART_recieveByte();
    1580:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    1584:	8b 8b       	std	Y+19, r24	; 0x13

	return status;
    1586:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1588:	68 96       	adiw	r28, 0x18	; 24
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <alarm>:

void alarm(void){
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	2e 97       	sbiw	r28, 0x0e	; 14
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
	while(UART_recieveByte()!=ALARM_ON){}
    15b2:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    15b6:	8f 33       	cpi	r24, 0x3F	; 63
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <alarm+0x14>
	LCD_clearScreen();
    15ba:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
	LCD_displayString("SYSTEM LOCKED");
    15be:	8b ec       	ldi	r24, 0xCB	; 203
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
//	ticks=0;
//	while(ticks<3);
	while(UART_recieveByte()!=ALARM_OFF){}
    15c6:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    15ca:	80 34       	cpi	r24, 0x40	; 64
    15cc:	e1 f7       	brne	.-8      	; 0x15c6 <alarm+0x28>
	LCD_clearScreen();
    15ce:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
	LCD_displayString("SYSTEM UNLOCKED");
    15d2:	89 ed       	ldi	r24, 0xD9	; 217
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	aa e7       	ldi	r26, 0x7A	; 122
    15e0:	b4 e4       	ldi	r27, 0x44	; 68
    15e2:	8b 87       	std	Y+11, r24	; 0x0b
    15e4:	9c 87       	std	Y+12, r25	; 0x0c
    15e6:	ad 87       	std	Y+13, r26	; 0x0d
    15e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	4a ef       	ldi	r20, 0xFA	; 250
    15f8:	54 e4       	ldi	r21, 0x44	; 68
    15fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	8f 83       	std	Y+7, r24	; 0x07
    1604:	98 87       	std	Y+8, r25	; 0x08
    1606:	a9 87       	std	Y+9, r26	; 0x09
    1608:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    160a:	6f 81       	ldd	r22, Y+7	; 0x07
    160c:	78 85       	ldd	r23, Y+8	; 0x08
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	20 e0       	ldi	r18, 0x00	; 0
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	40 e8       	ldi	r20, 0x80	; 128
    1618:	5f e3       	ldi	r21, 0x3F	; 63
    161a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    161e:	88 23       	and	r24, r24
    1620:	2c f4       	brge	.+10     	; 0x162c <alarm+0x8e>
		__ticks = 1;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	3f c0       	rjmp	.+126    	; 0x16aa <alarm+0x10c>
	else if (__tmp > 65535)
    162c:	6f 81       	ldd	r22, Y+7	; 0x07
    162e:	78 85       	ldd	r23, Y+8	; 0x08
    1630:	89 85       	ldd	r24, Y+9	; 0x09
    1632:	9a 85       	ldd	r25, Y+10	; 0x0a
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	4c f5       	brge	.+82     	; 0x1696 <alarm+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1644:	6b 85       	ldd	r22, Y+11	; 0x0b
    1646:	7c 85       	ldd	r23, Y+12	; 0x0c
    1648:	8d 85       	ldd	r24, Y+13	; 0x0d
    164a:	9e 85       	ldd	r25, Y+14	; 0x0e
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e2       	ldi	r20, 0x20	; 32
    1652:	51 e4       	ldi	r21, 0x41	; 65
    1654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	bc 01       	movw	r22, r24
    165e:	cd 01       	movw	r24, r26
    1660:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	9e 83       	std	Y+6, r25	; 0x06
    166a:	8d 83       	std	Y+5, r24	; 0x05
    166c:	0f c0       	rjmp	.+30     	; 0x168c <alarm+0xee>
    166e:	88 ec       	ldi	r24, 0xC8	; 200
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9c 83       	std	Y+4, r25	; 0x04
    1674:	8b 83       	std	Y+3, r24	; 0x03
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <alarm+0xdc>
    167e:	9c 83       	std	Y+4, r25	; 0x04
    1680:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1682:	8d 81       	ldd	r24, Y+5	; 0x05
    1684:	9e 81       	ldd	r25, Y+6	; 0x06
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	69 f7       	brne	.-38     	; 0x166e <alarm+0xd0>
    1694:	14 c0       	rjmp	.+40     	; 0x16be <alarm+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1696:	6f 81       	ldd	r22, Y+7	; 0x07
    1698:	78 85       	ldd	r23, Y+8	; 0x08
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	8d 81       	ldd	r24, Y+5	; 0x05
    16ac:	9e 81       	ldd	r25, Y+6	; 0x06
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	89 83       	std	Y+1, r24	; 0x01
    16b2:	89 81       	ldd	r24, Y+1	; 0x01
    16b4:	9a 81       	ldd	r25, Y+2	; 0x02
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <alarm+0x118>
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    16be:	2e 96       	adiw	r28, 0x0e	; 14
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	cf 91       	pop	r28
    16cc:	df 91       	pop	r29
    16ce:	08 95       	ret

000016d0 <changePassword>:

void changePassword(void){
    16d0:	df 93       	push	r29
    16d2:	cf 93       	push	r28
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	2f 97       	sbiw	r28, 0x0f	; 15
    16da:	0f b6       	in	r0, 0x3f	; 63
    16dc:	f8 94       	cli
    16de:	de bf       	out	0x3e, r29	; 62
    16e0:	0f be       	out	0x3f, r0	; 63
    16e2:	cd bf       	out	0x3d, r28	; 61

	uint8 authentication=0;
    16e4:	1f 86       	std	Y+15, r1	; 0x0f

	authentication=currentPasswordAuthentication(); //can be SUCCCESS or FAIL
    16e6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <currentPasswordAuthentication>
    16ea:	8f 87       	std	Y+15, r24	; 0x0f

	if(authentication==SUCCESS)
    16ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	41 f4       	brne	.+16     	; 0x1702 <changePassword+0x32>
	{
		UART_sendByte(SUCCESS);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
		change_pass_failed=0;
    16f8:	10 92 6d 01 	sts	0x016D, r1
		newPasswordSequence();
    16fc:	0e 94 04 08 	call	0x1008	; 0x1008 <newPasswordSequence>
    1700:	a1 c0       	rjmp	.+322    	; 0x1844 <changePassword+0x174>
	}
	else if(authentication==FAIL)
    1702:	8f 85       	ldd	r24, Y+15	; 0x0f
    1704:	88 23       	and	r24, r24
    1706:	09 f0       	breq	.+2      	; 0x170a <changePassword+0x3a>
    1708:	9d c0       	rjmp	.+314    	; 0x1844 <changePassword+0x174>
	{
		change_pass_failed++;
    170a:	80 91 6d 01 	lds	r24, 0x016D
    170e:	8f 5f       	subi	r24, 0xFF	; 255
    1710:	80 93 6d 01 	sts	0x016D, r24
		if(change_pass_failed<3)   //entered wrong once or twice
    1714:	80 91 6d 01 	lds	r24, 0x016D
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	08 f0       	brcs	.+2      	; 0x171e <changePassword+0x4e>
    171c:	84 c0       	rjmp	.+264    	; 0x1826 <changePassword+0x156>
		{
			UART_sendByte(FAIL);
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
			LCD_clearScreen();
    1724:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
			LCD_displayString("fail count: ");
    1728:	89 ee       	ldi	r24, 0xE9	; 233
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
			LCD_integerToString(change_pass_failed);
    1730:	80 91 6d 01 	lds	r24, 0x016D
    1734:	88 2f       	mov	r24, r24
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <LCD_integerToString>
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	aa ef       	ldi	r26, 0xFA	; 250
    1742:	b3 e4       	ldi	r27, 0x43	; 67
    1744:	8b 87       	std	Y+11, r24	; 0x0b
    1746:	9c 87       	std	Y+12, r25	; 0x0c
    1748:	ad 87       	std	Y+13, r26	; 0x0d
    174a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    174c:	6b 85       	ldd	r22, Y+11	; 0x0b
    174e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1750:	8d 85       	ldd	r24, Y+13	; 0x0d
    1752:	9e 85       	ldd	r25, Y+14	; 0x0e
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4a ef       	ldi	r20, 0xFA	; 250
    175a:	54 e4       	ldi	r21, 0x44	; 68
    175c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	8f 83       	std	Y+7, r24	; 0x07
    1766:	98 87       	std	Y+8, r25	; 0x08
    1768:	a9 87       	std	Y+9, r26	; 0x09
    176a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    176c:	6f 81       	ldd	r22, Y+7	; 0x07
    176e:	78 85       	ldd	r23, Y+8	; 0x08
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	9a 85       	ldd	r25, Y+10	; 0x0a
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1780:	88 23       	and	r24, r24
    1782:	2c f4       	brge	.+10     	; 0x178e <changePassword+0xbe>
		__ticks = 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	3f c0       	rjmp	.+126    	; 0x180c <changePassword+0x13c>
	else if (__tmp > 65535)
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	3f ef       	ldi	r19, 0xFF	; 255
    179a:	4f e7       	ldi	r20, 0x7F	; 127
    179c:	57 e4       	ldi	r21, 0x47	; 71
    179e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	4c f5       	brge	.+82     	; 0x17f8 <changePassword+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    17aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e2       	ldi	r20, 0x20	; 32
    17b4:	51 e4       	ldi	r21, 0x41	; 65
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	bc 01       	movw	r22, r24
    17c0:	cd 01       	movw	r24, r26
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	9e 83       	std	Y+6, r25	; 0x06
    17cc:	8d 83       	std	Y+5, r24	; 0x05
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <changePassword+0x11e>
    17d0:	88 ec       	ldi	r24, 0xC8	; 200
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	8b 83       	std	Y+3, r24	; 0x03
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	01 97       	sbiw	r24, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <changePassword+0x10c>
    17e0:	9c 83       	std	Y+4, r25	; 0x04
    17e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	9e 83       	std	Y+6, r25	; 0x06
    17ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	69 f7       	brne	.-38     	; 0x17d0 <changePassword+0x100>
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <changePassword+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	9e 83       	std	Y+6, r25	; 0x06
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	9a 83       	std	Y+2, r25	; 0x02
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	9a 81       	ldd	r25, Y+2	; 0x02
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <changePassword+0x148>
    181c:	9a 83       	std	Y+2, r25	; 0x02
    181e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			changePassword();  //again
    1820:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <changePassword>
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <changePassword+0x174>
		}
		else if(change_pass_failed==3)   //third time, reset failed variable, lock for 1 min, trigger alarm.
    1826:	80 91 6d 01 	lds	r24, 0x016D
    182a:	83 30       	cpi	r24, 0x03	; 3
    182c:	59 f4       	brne	.+22     	; 0x1844 <changePassword+0x174>
		{
			UART_sendByte(TRIGGER_ALARM);
    182e:	82 e3       	ldi	r24, 0x32	; 50
    1830:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
			change_pass_failed=0;
    1834:	10 92 6d 01 	sts	0x016D, r1
			LCD_clearScreen();
    1838:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
			LCD_displayString("fail count:3");
    183c:	86 ef       	ldi	r24, 0xF6	; 246
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
			//send for CONTROL to trigger alarm
		}
	}

}
    1844:	2f 96       	adiw	r28, 0x0f	; 15
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <openDoor>:

void openDoor(void){
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	2f 97       	sbiw	r28, 0x0f	; 15
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61

	uint8 authentication=0;
    186a:	1f 86       	std	Y+15, r1	; 0x0f

	authentication=currentPasswordAuthentication(); //can be SUCCCESS or FAIL
    186c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <currentPasswordAuthentication>
    1870:	8f 87       	std	Y+15, r24	; 0x0f

	if(authentication==SUCCESS)
    1872:	8f 85       	ldd	r24, Y+15	; 0x0f
    1874:	81 30       	cpi	r24, 0x01	; 1
    1876:	91 f5       	brne	.+100    	; 0x18dc <openDoor+0x86>
	{
		//MOTOR STUFF AND OPEN DOOR FOR 15 SEC AND PIR
		open_door_pass_failed=0;
    1878:	10 92 6e 01 	sts	0x016E, r1
		LCD_clearScreen();
    187c:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
		LCD_displayString("SUCCESS");
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
		UART_sendByte(SUCCESS);
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>

		//LCD EL DOORRRR
		while(UART_recieveByte()!=DOOR_OPEN_CW){}
    188e:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    1892:	8c 33       	cpi	r24, 0x3C	; 60
    1894:	e1 f7       	brne	.-8      	; 0x188e <openDoor+0x38>
		LCD_clearScreen();
    1896:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
		LCD_displayString("Door Opening");
    189a:	8b e0       	ldi	r24, 0x0B	; 11
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
		while(UART_recieveByte()!=DOOR_CLOSE_ACW){}
    18a2:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    18a6:	8d 33       	cpi	r24, 0x3D	; 61
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <openDoor+0x4c>
		LCD_clearScreen();
    18aa:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
		LCD_displayString("Door Closing");
    18ae:	88 e1       	ldi	r24, 0x18	; 24
    18b0:	91 e0       	ldi	r25, 0x01	; 1
    18b2:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
		while(UART_recieveByte()!=DOOR_STOP){}
    18b6:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    18ba:	8e 33       	cpi	r24, 0x3E	; 62
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <openDoor+0x60>
		LCD_clearScreen();
    18be:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
		LCD_displayString("Door closed");
    18c2:	85 e2       	ldi	r24, 0x25	; 37
    18c4:	91 e0       	ldi	r25, 0x01	; 1
    18c6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
		LCD_moveCursor(1,0);
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_moveCursor>
		LCD_displayString("successfully.");
    18d2:	81 e3       	ldi	r24, 0x31	; 49
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
    18da:	97 c0       	rjmp	.+302    	; 0x1a0a <openDoor+0x1b4>
	}
	else if(authentication==FAIL)
    18dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18de:	88 23       	and	r24, r24
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <openDoor+0x8e>
    18e2:	93 c0       	rjmp	.+294    	; 0x1a0a <openDoor+0x1b4>
	{
		open_door_pass_failed++;
    18e4:	80 91 6e 01 	lds	r24, 0x016E
    18e8:	8f 5f       	subi	r24, 0xFF	; 255
    18ea:	80 93 6e 01 	sts	0x016E, r24
		if(open_door_pass_failed<3)   //entered wrong once or twice
    18ee:	80 91 6e 01 	lds	r24, 0x016E
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	08 f0       	brcs	.+2      	; 0x18f8 <openDoor+0xa2>
    18f6:	7e c0       	rjmp	.+252    	; 0x19f4 <openDoor+0x19e>
		{
			UART_sendByte(FAIL);
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
			LCD_clearScreen();
    18fe:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
			LCD_displayString("try again.");
    1902:	8f e3       	ldi	r24, 0x3F	; 63
    1904:	91 e0       	ldi	r25, 0x01	; 1
    1906:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a8 e4       	ldi	r26, 0x48	; 72
    1910:	b2 e4       	ldi	r27, 0x42	; 66
    1912:	8b 87       	std	Y+11, r24	; 0x0b
    1914:	9c 87       	std	Y+12, r25	; 0x0c
    1916:	ad 87       	std	Y+13, r26	; 0x0d
    1918:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191a:	6b 85       	ldd	r22, Y+11	; 0x0b
    191c:	7c 85       	ldd	r23, Y+12	; 0x0c
    191e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1920:	9e 85       	ldd	r25, Y+14	; 0x0e
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a ef       	ldi	r20, 0xFA	; 250
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	8f 83       	std	Y+7, r24	; 0x07
    1934:	98 87       	std	Y+8, r25	; 0x08
    1936:	a9 87       	std	Y+9, r26	; 0x09
    1938:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    193a:	6f 81       	ldd	r22, Y+7	; 0x07
    193c:	78 85       	ldd	r23, Y+8	; 0x08
    193e:	89 85       	ldd	r24, Y+9	; 0x09
    1940:	9a 85       	ldd	r25, Y+10	; 0x0a
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e8       	ldi	r20, 0x80	; 128
    1948:	5f e3       	ldi	r21, 0x3F	; 63
    194a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194e:	88 23       	and	r24, r24
    1950:	2c f4       	brge	.+10     	; 0x195c <openDoor+0x106>
		__ticks = 1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	3f c0       	rjmp	.+126    	; 0x19da <openDoor+0x184>
	else if (__tmp > 65535)
    195c:	6f 81       	ldd	r22, Y+7	; 0x07
    195e:	78 85       	ldd	r23, Y+8	; 0x08
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	9a 85       	ldd	r25, Y+10	; 0x0a
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	3f ef       	ldi	r19, 0xFF	; 255
    1968:	4f e7       	ldi	r20, 0x7F	; 127
    196a:	57 e4       	ldi	r21, 0x47	; 71
    196c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1970:	18 16       	cp	r1, r24
    1972:	4c f5       	brge	.+82     	; 0x19c6 <openDoor+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1974:	6b 85       	ldd	r22, Y+11	; 0x0b
    1976:	7c 85       	ldd	r23, Y+12	; 0x0c
    1978:	8d 85       	ldd	r24, Y+13	; 0x0d
    197a:	9e 85       	ldd	r25, Y+14	; 0x0e
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e2       	ldi	r20, 0x20	; 32
    1982:	51 e4       	ldi	r21, 0x41	; 65
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9e 83       	std	Y+6, r25	; 0x06
    199a:	8d 83       	std	Y+5, r24	; 0x05
    199c:	0f c0       	rjmp	.+30     	; 0x19bc <openDoor+0x166>
    199e:	88 ec       	ldi	r24, 0xC8	; 200
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9c 83       	std	Y+4, r25	; 0x04
    19a4:	8b 83       	std	Y+3, r24	; 0x03
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	9c 81       	ldd	r25, Y+4	; 0x04
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	f1 f7       	brne	.-4      	; 0x19aa <openDoor+0x154>
    19ae:	9c 83       	std	Y+4, r25	; 0x04
    19b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b2:	8d 81       	ldd	r24, Y+5	; 0x05
    19b4:	9e 81       	ldd	r25, Y+6	; 0x06
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	9e 83       	std	Y+6, r25	; 0x06
    19ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	9e 81       	ldd	r25, Y+6	; 0x06
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	69 f7       	brne	.-38     	; 0x199e <openDoor+0x148>
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <openDoor+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c6:	6f 81       	ldd	r22, Y+7	; 0x07
    19c8:	78 85       	ldd	r23, Y+8	; 0x08
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d2:	dc 01       	movw	r26, r24
    19d4:	cb 01       	movw	r24, r22
    19d6:	9e 83       	std	Y+6, r25	; 0x06
    19d8:	8d 83       	std	Y+5, r24	; 0x05
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	9e 81       	ldd	r25, Y+6	; 0x06
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	9a 81       	ldd	r25, Y+2	; 0x02
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <openDoor+0x190>
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(50);
			openDoor();  //again
    19ee:	0e 94 2b 0c 	call	0x1856	; 0x1856 <openDoor>
    19f2:	0b c0       	rjmp	.+22     	; 0x1a0a <openDoor+0x1b4>
		}
		else if(open_door_pass_failed==3)   //third time, reset failed variable, lock for 1 min, trigger alarm.
    19f4:	80 91 6e 01 	lds	r24, 0x016E
    19f8:	83 30       	cpi	r24, 0x03	; 3
    19fa:	39 f4       	brne	.+14     	; 0x1a0a <openDoor+0x1b4>
		{
			UART_sendByte(TRIGGER_ALARM);
    19fc:	82 e3       	ldi	r24, 0x32	; 50
    19fe:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
			open_door_pass_failed=0;
    1a02:	10 92 6e 01 	sts	0x016E, r1
			alarm();
    1a06:	0e 94 cf 0a 	call	0x159e	; 0x159e <alarm>
		}
	}

}
    1a0a:	2f 96       	adiw	r28, 0x0f	; 15
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <main>:





int main(void){
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62


	SREG|=(1<<7);
    1a24:	af e5       	ldi	r26, 0x5F	; 95
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ef e5       	ldi	r30, 0x5F	; 95
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	80 68       	ori	r24, 0x80	; 128
    1a30:	8c 93       	st	X, r24

	LCD_init();
    1a32:	0e 94 c6 12 	call	0x258c	; 0x258c <LCD_init>
	Timer_init(&timer1_config);
    1a36:	8d e5       	ldi	r24, 0x5D	; 93
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	0e 94 4d 18 	call	0x309a	; 0x309a <Timer_init>
	Timer_setCallBack(callBackTimer,TIMER1);
    1a3e:	83 ea       	ldi	r24, 0xA3	; 163
    1a40:	95 e0       	ldi	r25, 0x05	; 5
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	0e 94 72 19 	call	0x32e4	; 0x32e4 <Timer_setCallBack>
	Timer_setCallBack(&callBackTimer,TIMER1);
    1a48:	83 ea       	ldi	r24, 0xA3	; 163
    1a4a:	95 e0       	ldi	r25, 0x05	; 5
    1a4c:	61 e0       	ldi	r22, 0x01	; 1
    1a4e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <Timer_setCallBack>
	UART_init(&uart_config);
    1a52:	84 e6       	ldi	r24, 0x64	; 100
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	0e 94 dd 1a 	call	0x35ba	; 0x35ba <UART_init>

	newPasswordSequence();
    1a5a:	0e 94 04 08 	call	0x1008	; 0x1008 <newPasswordSequence>

	while(1)
	{
		//start up with password setup
		mainMenuSelector();
    1a5e:	0e 94 af 05 	call	0xb5e	; 0xb5e <mainMenuSelector>
		//hayen2el 3al menu lewahdo
		UART_sendByte(HMI_MC_READY);
    1a62:	80 e1       	ldi	r24, 0x10	; 16
    1a64:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>

		if(menuSelection==OPEN_DOOR)
    1a68:	80 91 6c 01 	lds	r24, 0x016C
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	31 f4       	brne	.+12     	; 0x1a7c <main+0x60>
		{
			UART_sendByte(OPERATION_OPEN_DOOR);     //SEND CURRENT OPERATION
    1a70:	88 e2       	ldi	r24, 0x28	; 40
    1a72:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
			openDoor();
    1a76:	0e 94 2b 0c 	call	0x1856	; 0x1856 <openDoor>
    1a7a:	09 c0       	rjmp	.+18     	; 0x1a8e <main+0x72>
		}
		else if(menuSelection==CHANGE_PASS)
    1a7c:	80 91 6c 01 	lds	r24, 0x016C
    1a80:	82 30       	cpi	r24, 0x02	; 2
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <main+0x72>
		{
			UART_sendByte(OPERATION_CHANGE_PASS);
    1a84:	8e e1       	ldi	r24, 0x1E	; 30
    1a86:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
			changePassword();
    1a8a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <changePassword>
		}

		LCD_clearScreen();
    1a8e:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <LCD_clearScreen>
		LCD_displayString("resettingg");
    1a92:	8a e4       	ldi	r24, 0x4A	; 74
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>

		while(UART_recieveByte()!=CONTROL_MC_READY);
    1a9a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    1a9e:	80 32       	cpi	r24, 0x20	; 32
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a <main+0x7e>
    1aa2:	dd cf       	rjmp	.-70     	; 0x1a5e <main+0x42>

00001aa4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <GPIO_setupPinDirection+0x6>
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <GPIO_setupPinDirection+0x8>
    1aac:	0f 92       	push	r0
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	6a 83       	std	Y+2, r22	; 0x02
    1ab6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	88 30       	cpi	r24, 0x08	; 8
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <GPIO_setupPinDirection+0x1c>
    1abe:	d5 c0       	rjmp	.+426    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	84 30       	cpi	r24, 0x04	; 4
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <GPIO_setupPinDirection+0x24>
    1ac6:	d1 c0       	rjmp	.+418    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	3d 83       	std	Y+5, r19	; 0x05
    1ad0:	2c 83       	std	Y+4, r18	; 0x04
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <GPIO_setupPinDirection+0x3a>
    1adc:	43 c0       	rjmp	.+134    	; 0x1b64 <GPIO_setupPinDirection+0xc0>
    1ade:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae2:	22 30       	cpi	r18, 0x02	; 2
    1ae4:	31 05       	cpc	r19, r1
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <GPIO_setupPinDirection+0x4e>
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	9d 81       	ldd	r25, Y+5	; 0x05
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	71 f0       	breq	.+28     	; 0x1b0c <GPIO_setupPinDirection+0x68>
    1af0:	bc c0       	rjmp	.+376    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
    1af2:	2c 81       	ldd	r18, Y+4	; 0x04
    1af4:	3d 81       	ldd	r19, Y+5	; 0x05
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <GPIO_setupPinDirection+0x5a>
    1afc:	5f c0       	rjmp	.+190    	; 0x1bbc <GPIO_setupPinDirection+0x118>
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	9d 81       	ldd	r25, Y+5	; 0x05
    1b02:	83 30       	cpi	r24, 0x03	; 3
    1b04:	91 05       	cpc	r25, r1
    1b06:	09 f4       	brne	.+2      	; 0x1b0a <GPIO_setupPinDirection+0x66>
    1b08:	85 c0       	rjmp	.+266    	; 0x1c14 <GPIO_setupPinDirection+0x170>
    1b0a:	af c0       	rjmp	.+350    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	81 30       	cpi	r24, 0x01	; 1
    1b10:	a1 f4       	brne	.+40     	; 0x1b3a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1b12:	aa e3       	ldi	r26, 0x3A	; 58
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	ea e3       	ldi	r30, 0x3A	; 58
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <GPIO_setupPinDirection+0x8c>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <GPIO_setupPinDirection+0x88>
    1b34:	84 2b       	or	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	98 c0       	rjmp	.+304    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1b3a:	aa e3       	ldi	r26, 0x3A	; 58
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	ea e3       	ldi	r30, 0x3A	; 58
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_setupPinDirection+0xb4>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_setupPinDirection+0xb0>
    1b5c:	80 95       	com	r24
    1b5e:	84 23       	and	r24, r20
    1b60:	8c 93       	st	X, r24
    1b62:	83 c0       	rjmp	.+262    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	81 30       	cpi	r24, 0x01	; 1
    1b68:	a1 f4       	brne	.+40     	; 0x1b92 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1b6a:	a7 e3       	ldi	r26, 0x37	; 55
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e7 e3       	ldi	r30, 0x37	; 55
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	8a 81       	ldd	r24, Y+2	; 0x02
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	02 2e       	mov	r0, r18
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <GPIO_setupPinDirection+0xe4>
    1b84:	88 0f       	add	r24, r24
    1b86:	99 1f       	adc	r25, r25
    1b88:	0a 94       	dec	r0
    1b8a:	e2 f7       	brpl	.-8      	; 0x1b84 <GPIO_setupPinDirection+0xe0>
    1b8c:	84 2b       	or	r24, r20
    1b8e:	8c 93       	st	X, r24
    1b90:	6c c0       	rjmp	.+216    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1b92:	a7 e3       	ldi	r26, 0x37	; 55
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e7 e3       	ldi	r30, 0x37	; 55
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	48 2f       	mov	r20, r24
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	02 2e       	mov	r0, r18
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <GPIO_setupPinDirection+0x10c>
    1bac:	88 0f       	add	r24, r24
    1bae:	99 1f       	adc	r25, r25
    1bb0:	0a 94       	dec	r0
    1bb2:	e2 f7       	brpl	.-8      	; 0x1bac <GPIO_setupPinDirection+0x108>
    1bb4:	80 95       	com	r24
    1bb6:	84 23       	and	r24, r20
    1bb8:	8c 93       	st	X, r24
    1bba:	57 c0       	rjmp	.+174    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	a1 f4       	brne	.+40     	; 0x1bea <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1bc2:	a4 e3       	ldi	r26, 0x34	; 52
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e4 e3       	ldi	r30, 0x34	; 52
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	48 2f       	mov	r20, r24
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	02 2e       	mov	r0, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <GPIO_setupPinDirection+0x13c>
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	0a 94       	dec	r0
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <GPIO_setupPinDirection+0x138>
    1be4:	84 2b       	or	r24, r20
    1be6:	8c 93       	st	X, r24
    1be8:	40 c0       	rjmp	.+128    	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1bea:	a4 e3       	ldi	r26, 0x34	; 52
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	e4 e3       	ldi	r30, 0x34	; 52
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	48 2f       	mov	r20, r24
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	02 2e       	mov	r0, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <GPIO_setupPinDirection+0x164>
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	0a 94       	dec	r0
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <GPIO_setupPinDirection+0x160>
    1c0c:	80 95       	com	r24
    1c0e:	84 23       	and	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	2b c0       	rjmp	.+86     	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	a1 f4       	brne	.+40     	; 0x1c42 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1c1a:	a1 e3       	ldi	r26, 0x31	; 49
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e1 e3       	ldi	r30, 0x31	; 49
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <GPIO_setupPinDirection+0x194>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <GPIO_setupPinDirection+0x190>
    1c3c:	84 2b       	or	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1c42:	a1 e3       	ldi	r26, 0x31	; 49
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e1 e3       	ldi	r30, 0x31	; 49
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <GPIO_setupPinDirection+0x1bc>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <GPIO_setupPinDirection+0x1b8>
    1c64:	80 95       	com	r24
    1c66:	84 23       	and	r24, r20
    1c68:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <GPIO_writePin+0x6>
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <GPIO_writePin+0x8>
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	89 83       	std	Y+1, r24	; 0x01
    1c8a:	6a 83       	std	Y+2, r22	; 0x02
    1c8c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	88 30       	cpi	r24, 0x08	; 8
    1c92:	08 f0       	brcs	.+2      	; 0x1c96 <GPIO_writePin+0x1c>
    1c94:	d5 c0       	rjmp	.+426    	; 0x1e40 <GPIO_writePin+0x1c6>
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	84 30       	cpi	r24, 0x04	; 4
    1c9a:	08 f0       	brcs	.+2      	; 0x1c9e <GPIO_writePin+0x24>
    1c9c:	d1 c0       	rjmp	.+418    	; 0x1e40 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	3d 83       	std	Y+5, r19	; 0x05
    1ca6:	2c 83       	std	Y+4, r18	; 0x04
    1ca8:	8c 81       	ldd	r24, Y+4	; 0x04
    1caa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	91 05       	cpc	r25, r1
    1cb0:	09 f4       	brne	.+2      	; 0x1cb4 <GPIO_writePin+0x3a>
    1cb2:	43 c0       	rjmp	.+134    	; 0x1d3a <GPIO_writePin+0xc0>
    1cb4:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb8:	22 30       	cpi	r18, 0x02	; 2
    1cba:	31 05       	cpc	r19, r1
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <GPIO_writePin+0x4e>
    1cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc2:	00 97       	sbiw	r24, 0x00	; 0
    1cc4:	71 f0       	breq	.+28     	; 0x1ce2 <GPIO_writePin+0x68>
    1cc6:	bc c0       	rjmp	.+376    	; 0x1e40 <GPIO_writePin+0x1c6>
    1cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cca:	3d 81       	ldd	r19, Y+5	; 0x05
    1ccc:	22 30       	cpi	r18, 0x02	; 2
    1cce:	31 05       	cpc	r19, r1
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <GPIO_writePin+0x5a>
    1cd2:	5f c0       	rjmp	.+190    	; 0x1d92 <GPIO_writePin+0x118>
    1cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd8:	83 30       	cpi	r24, 0x03	; 3
    1cda:	91 05       	cpc	r25, r1
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <GPIO_writePin+0x66>
    1cde:	85 c0       	rjmp	.+266    	; 0x1dea <GPIO_writePin+0x170>
    1ce0:	af c0       	rjmp	.+350    	; 0x1e40 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	a1 f4       	brne	.+40     	; 0x1d10 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ce8:	ab e3       	ldi	r26, 0x3B	; 59
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	eb e3       	ldi	r30, 0x3B	; 59
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	48 2f       	mov	r20, r24
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <GPIO_writePin+0x8c>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <GPIO_writePin+0x88>
    1d0a:	84 2b       	or	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	98 c0       	rjmp	.+304    	; 0x1e40 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1d10:	ab e3       	ldi	r26, 0x3B	; 59
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	eb e3       	ldi	r30, 0x3B	; 59
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <GPIO_writePin+0xb4>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <GPIO_writePin+0xb0>
    1d32:	80 95       	com	r24
    1d34:	84 23       	and	r24, r20
    1d36:	8c 93       	st	X, r24
    1d38:	83 c0       	rjmp	.+262    	; 0x1e40 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	a1 f4       	brne	.+40     	; 0x1d68 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1d40:	a8 e3       	ldi	r26, 0x38	; 56
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e8 e3       	ldi	r30, 0x38	; 56
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <GPIO_writePin+0xe4>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <GPIO_writePin+0xe0>
    1d62:	84 2b       	or	r24, r20
    1d64:	8c 93       	st	X, r24
    1d66:	6c c0       	rjmp	.+216    	; 0x1e40 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1d68:	a8 e3       	ldi	r26, 0x38	; 56
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e8 e3       	ldi	r30, 0x38	; 56
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	48 2f       	mov	r20, r24
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	02 2e       	mov	r0, r18
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <GPIO_writePin+0x10c>
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <GPIO_writePin+0x108>
    1d8a:	80 95       	com	r24
    1d8c:	84 23       	and	r24, r20
    1d8e:	8c 93       	st	X, r24
    1d90:	57 c0       	rjmp	.+174    	; 0x1e40 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	a1 f4       	brne	.+40     	; 0x1dc0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1d98:	a5 e3       	ldi	r26, 0x35	; 53
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e5 e3       	ldi	r30, 0x35	; 53
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	48 2f       	mov	r20, r24
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <GPIO_writePin+0x13c>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <GPIO_writePin+0x138>
    1dba:	84 2b       	or	r24, r20
    1dbc:	8c 93       	st	X, r24
    1dbe:	40 c0       	rjmp	.+128    	; 0x1e40 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1dc0:	a5 e3       	ldi	r26, 0x35	; 53
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e5 e3       	ldi	r30, 0x35	; 53
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	48 2f       	mov	r20, r24
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	02 2e       	mov	r0, r18
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <GPIO_writePin+0x164>
    1dda:	88 0f       	add	r24, r24
    1ddc:	99 1f       	adc	r25, r25
    1dde:	0a 94       	dec	r0
    1de0:	e2 f7       	brpl	.-8      	; 0x1dda <GPIO_writePin+0x160>
    1de2:	80 95       	com	r24
    1de4:	84 23       	and	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	2b c0       	rjmp	.+86     	; 0x1e40 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	a1 f4       	brne	.+40     	; 0x1e18 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1df0:	a2 e3       	ldi	r26, 0x32	; 50
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e2 e3       	ldi	r30, 0x32	; 50
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <GPIO_writePin+0x194>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <GPIO_writePin+0x190>
    1e12:	84 2b       	or	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	14 c0       	rjmp	.+40     	; 0x1e40 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1e18:	a2 e3       	ldi	r26, 0x32	; 50
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e2 e3       	ldi	r30, 0x32	; 50
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <GPIO_writePin+0x1bc>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <GPIO_writePin+0x1b8>
    1e3a:	80 95       	com	r24
    1e3c:	84 23       	and	r24, r20
    1e3e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <GPIO_readPin+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <GPIO_readPin+0x8>
    1e58:	0f 92       	push	r0
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	8a 83       	std	Y+2, r24	; 0x02
    1e60:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1e62:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	88 30       	cpi	r24, 0x08	; 8
    1e68:	08 f0       	brcs	.+2      	; 0x1e6c <GPIO_readPin+0x1c>
    1e6a:	84 c0       	rjmp	.+264    	; 0x1f74 <GPIO_readPin+0x124>
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	84 30       	cpi	r24, 0x04	; 4
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <GPIO_readPin+0x24>
    1e72:	80 c0       	rjmp	.+256    	; 0x1f74 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3d 83       	std	Y+5, r19	; 0x05
    1e7c:	2c 83       	std	Y+4, r18	; 0x04
    1e7e:	4c 81       	ldd	r20, Y+4	; 0x04
    1e80:	5d 81       	ldd	r21, Y+5	; 0x05
    1e82:	41 30       	cpi	r20, 0x01	; 1
    1e84:	51 05       	cpc	r21, r1
    1e86:	79 f1       	breq	.+94     	; 0x1ee6 <GPIO_readPin+0x96>
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	91 05       	cpc	r25, r1
    1e90:	34 f4       	brge	.+12     	; 0x1e9e <GPIO_readPin+0x4e>
    1e92:	2c 81       	ldd	r18, Y+4	; 0x04
    1e94:	3d 81       	ldd	r19, Y+5	; 0x05
    1e96:	21 15       	cp	r18, r1
    1e98:	31 05       	cpc	r19, r1
    1e9a:	69 f0       	breq	.+26     	; 0x1eb6 <GPIO_readPin+0x66>
    1e9c:	6b c0       	rjmp	.+214    	; 0x1f74 <GPIO_readPin+0x124>
    1e9e:	4c 81       	ldd	r20, Y+4	; 0x04
    1ea0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ea2:	42 30       	cpi	r20, 0x02	; 2
    1ea4:	51 05       	cpc	r21, r1
    1ea6:	b9 f1       	breq	.+110    	; 0x1f16 <GPIO_readPin+0xc6>
    1ea8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eaa:	9d 81       	ldd	r25, Y+5	; 0x05
    1eac:	83 30       	cpi	r24, 0x03	; 3
    1eae:	91 05       	cpc	r25, r1
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <GPIO_readPin+0x64>
    1eb2:	49 c0       	rjmp	.+146    	; 0x1f46 <GPIO_readPin+0xf6>
    1eb4:	5f c0       	rjmp	.+190    	; 0x1f74 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1eb6:	e9 e3       	ldi	r30, 0x39	; 57
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a9 01       	movw	r20, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <GPIO_readPin+0x7e>
    1eca:	55 95       	asr	r21
    1ecc:	47 95       	ror	r20
    1ece:	8a 95       	dec	r24
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <GPIO_readPin+0x7a>
    1ed2:	ca 01       	movw	r24, r20
    1ed4:	81 70       	andi	r24, 0x01	; 1
    1ed6:	90 70       	andi	r25, 0x00	; 0
    1ed8:	88 23       	and	r24, r24
    1eda:	19 f0       	breq	.+6      	; 0x1ee2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	49 c0       	rjmp	.+146    	; 0x1f74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ee2:	19 82       	std	Y+1, r1	; 0x01
    1ee4:	47 c0       	rjmp	.+142    	; 0x1f74 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ee6:	e6 e3       	ldi	r30, 0x36	; 54
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a9 01       	movw	r20, r18
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <GPIO_readPin+0xae>
    1efa:	55 95       	asr	r21
    1efc:	47 95       	ror	r20
    1efe:	8a 95       	dec	r24
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <GPIO_readPin+0xaa>
    1f02:	ca 01       	movw	r24, r20
    1f04:	81 70       	andi	r24, 0x01	; 1
    1f06:	90 70       	andi	r25, 0x00	; 0
    1f08:	88 23       	and	r24, r24
    1f0a:	19 f0       	breq	.+6      	; 0x1f12 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	31 c0       	rjmp	.+98     	; 0x1f74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f12:	19 82       	std	Y+1, r1	; 0x01
    1f14:	2f c0       	rjmp	.+94     	; 0x1f74 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1f16:	e3 e3       	ldi	r30, 0x33	; 51
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a9 01       	movw	r20, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <GPIO_readPin+0xde>
    1f2a:	55 95       	asr	r21
    1f2c:	47 95       	ror	r20
    1f2e:	8a 95       	dec	r24
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <GPIO_readPin+0xda>
    1f32:	ca 01       	movw	r24, r20
    1f34:	81 70       	andi	r24, 0x01	; 1
    1f36:	90 70       	andi	r25, 0x00	; 0
    1f38:	88 23       	and	r24, r24
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    1f40:	19 c0       	rjmp	.+50     	; 0x1f74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f42:	19 82       	std	Y+1, r1	; 0x01
    1f44:	17 c0       	rjmp	.+46     	; 0x1f74 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1f46:	e0 e3       	ldi	r30, 0x30	; 48
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	a9 01       	movw	r20, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <GPIO_readPin+0x10e>
    1f5a:	55 95       	asr	r21
    1f5c:	47 95       	ror	r20
    1f5e:	8a 95       	dec	r24
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <GPIO_readPin+0x10a>
    1f62:	ca 01       	movw	r24, r20
    1f64:	81 70       	andi	r24, 0x01	; 1
    1f66:	90 70       	andi	r25, 0x00	; 0
    1f68:	88 23       	and	r24, r24
    1f6a:	19 f0       	breq	.+6      	; 0x1f72 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1f72:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <GPIO_setupPortDirection+0x6>
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <GPIO_setupPortDirection+0x8>
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	89 83       	std	Y+1, r24	; 0x01
    1f94:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	84 30       	cpi	r24, 0x04	; 4
    1f9a:	90 f5       	brcc	.+100    	; 0x2000 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	3c 83       	std	Y+4, r19	; 0x04
    1fa4:	2b 83       	std	Y+3, r18	; 0x03
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	91 05       	cpc	r25, r1
    1fae:	d1 f0       	breq	.+52     	; 0x1fe4 <GPIO_setupPortDirection+0x5e>
    1fb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <GPIO_setupPortDirection+0x3e>
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	61 f0       	breq	.+24     	; 0x1fda <GPIO_setupPortDirection+0x54>
    1fc2:	1e c0       	rjmp	.+60     	; 0x2000 <GPIO_setupPortDirection+0x7a>
    1fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	81 f0       	breq	.+32     	; 0x1fee <GPIO_setupPortDirection+0x68>
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	81 f0       	breq	.+32     	; 0x1ff8 <GPIO_setupPortDirection+0x72>
    1fd8:	13 c0       	rjmp	.+38     	; 0x2000 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1fda:	ea e3       	ldi	r30, 0x3A	; 58
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	80 83       	st	Z, r24
    1fe2:	0e c0       	rjmp	.+28     	; 0x2000 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1fe4:	e7 e3       	ldi	r30, 0x37	; 55
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	80 83       	st	Z, r24
    1fec:	09 c0       	rjmp	.+18     	; 0x2000 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1fee:	e4 e3       	ldi	r30, 0x34	; 52
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff4:	80 83       	st	Z, r24
    1ff6:	04 c0       	rjmp	.+8      	; 0x2000 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1ff8:	e1 e3       	ldi	r30, 0x31	; 49
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	80 83       	st	Z, r24
			break;
		}
	}
}
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <GPIO_writePort+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <GPIO_writePort+0x8>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	84 30       	cpi	r24, 0x04	; 4
    2022:	90 f5       	brcc	.+100    	; 0x2088 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	3c 83       	std	Y+4, r19	; 0x04
    202c:	2b 83       	std	Y+3, r18	; 0x03
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	9c 81       	ldd	r25, Y+4	; 0x04
    2032:	81 30       	cpi	r24, 0x01	; 1
    2034:	91 05       	cpc	r25, r1
    2036:	d1 f0       	breq	.+52     	; 0x206c <GPIO_writePort+0x5e>
    2038:	2b 81       	ldd	r18, Y+3	; 0x03
    203a:	3c 81       	ldd	r19, Y+4	; 0x04
    203c:	22 30       	cpi	r18, 0x02	; 2
    203e:	31 05       	cpc	r19, r1
    2040:	2c f4       	brge	.+10     	; 0x204c <GPIO_writePort+0x3e>
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	9c 81       	ldd	r25, Y+4	; 0x04
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	61 f0       	breq	.+24     	; 0x2062 <GPIO_writePort+0x54>
    204a:	1e c0       	rjmp	.+60     	; 0x2088 <GPIO_writePort+0x7a>
    204c:	2b 81       	ldd	r18, Y+3	; 0x03
    204e:	3c 81       	ldd	r19, Y+4	; 0x04
    2050:	22 30       	cpi	r18, 0x02	; 2
    2052:	31 05       	cpc	r19, r1
    2054:	81 f0       	breq	.+32     	; 0x2076 <GPIO_writePort+0x68>
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	91 05       	cpc	r25, r1
    205e:	81 f0       	breq	.+32     	; 0x2080 <GPIO_writePort+0x72>
    2060:	13 c0       	rjmp	.+38     	; 0x2088 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2062:	eb e3       	ldi	r30, 0x3B	; 59
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	80 83       	st	Z, r24
    206a:	0e c0       	rjmp	.+28     	; 0x2088 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    206c:	e8 e3       	ldi	r30, 0x38	; 56
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	80 83       	st	Z, r24
    2074:	09 c0       	rjmp	.+18     	; 0x2088 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2076:	e5 e3       	ldi	r30, 0x35	; 53
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	80 83       	st	Z, r24
    207e:	04 c0       	rjmp	.+8      	; 0x2088 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2080:	e2 e3       	ldi	r30, 0x32	; 50
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	80 83       	st	Z, r24
			break;
		}
	}
}
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <GPIO_readPort+0x6>
    209c:	00 d0       	rcall	.+0      	; 0x209e <GPIO_readPort+0x8>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    20a4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20a6:	8a 81       	ldd	r24, Y+2	; 0x02
    20a8:	84 30       	cpi	r24, 0x04	; 4
    20aa:	90 f5       	brcc	.+100    	; 0x2110 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	3c 83       	std	Y+4, r19	; 0x04
    20b4:	2b 83       	std	Y+3, r18	; 0x03
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	91 05       	cpc	r25, r1
    20be:	d1 f0       	breq	.+52     	; 0x20f4 <GPIO_readPort+0x5e>
    20c0:	2b 81       	ldd	r18, Y+3	; 0x03
    20c2:	3c 81       	ldd	r19, Y+4	; 0x04
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	2c f4       	brge	.+10     	; 0x20d4 <GPIO_readPort+0x3e>
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	61 f0       	breq	.+24     	; 0x20ea <GPIO_readPort+0x54>
    20d2:	1e c0       	rjmp	.+60     	; 0x2110 <GPIO_readPort+0x7a>
    20d4:	2b 81       	ldd	r18, Y+3	; 0x03
    20d6:	3c 81       	ldd	r19, Y+4	; 0x04
    20d8:	22 30       	cpi	r18, 0x02	; 2
    20da:	31 05       	cpc	r19, r1
    20dc:	81 f0       	breq	.+32     	; 0x20fe <GPIO_readPort+0x68>
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	83 30       	cpi	r24, 0x03	; 3
    20e4:	91 05       	cpc	r25, r1
    20e6:	81 f0       	breq	.+32     	; 0x2108 <GPIO_readPort+0x72>
    20e8:	13 c0       	rjmp	.+38     	; 0x2110 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    20ea:	e9 e3       	ldi	r30, 0x39	; 57
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	80 81       	ld	r24, Z
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	0e c0       	rjmp	.+28     	; 0x2110 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    20f4:	e6 e3       	ldi	r30, 0x36	; 54
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	09 c0       	rjmp	.+18     	; 0x2110 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    20fe:	e3 e3       	ldi	r30, 0x33	; 51
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2108:	e0 e3       	ldi	r30, 0x30	; 48
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2110:	89 81       	ldd	r24, Y+1	; 0x01
}
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <KEYPAD_getPressedKey>:
	#endif
#else
static uint8 KEYPAD_adjust_standard_4x4(uint8 key);
#endif

uint8 KEYPAD_getPressedKey(void){
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	61 97       	sbiw	r28, 0x11	; 17
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
	//set up row pins
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	40 e0       	ldi	r20, 0x00	; 0
    213a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	61 e0       	ldi	r22, 0x01	; 1
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	62 e0       	ldi	r22, 0x02	; 2
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	63 e0       	ldi	r22, 0x03	; 3
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>

	//set up col pins
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	64 e0       	ldi	r22, 0x04	; 4
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	65 e0       	ldi	r22, 0x05	; 5
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	66 e0       	ldi	r22, 0x06	; 6
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS==4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	67 e0       	ldi	r22, 0x07	; 7
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
	uint8 key;
	uint8 row, col;

	while(1){
		//loop on rows
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    2184:	18 8a       	std	Y+16, r1	; 0x10
    2186:	ad c0       	rjmp	.+346    	; 0x22e2 <KEYPAD_getPressedKey+0x1c2>
		{
			//set chosen row as output and to high
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	68 89       	ldd	r22, Y+16	; 0x10
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	68 89       	ldd	r22, Y+16	; 0x10
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <GPIO_writePin>

			//loop on columns and read pin
			for(col=0;col<KEYPAD_NUM_COLS;col++)
    219c:	1f 86       	std	Y+15, r1	; 0x0f
    219e:	24 c0       	rjmp	.+72     	; 0x21e8 <KEYPAD_getPressedKey+0xc8>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col)==KEYPAD_BUTTON_PRESSED)
    21a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a2:	98 2f       	mov	r25, r24
    21a4:	9c 5f       	subi	r25, 0xFC	; 252
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	69 2f       	mov	r22, r25
    21aa:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <GPIO_readPin>
    21ae:	88 23       	and	r24, r24
    21b0:	c1 f4       	brne	.+48     	; 0x21e2 <KEYPAD_getPressedKey+0xc2>
				{
					key=((row*KEYPAD_NUM_COLS)+col+1);
    21b2:	88 89       	ldd	r24, Y+16	; 0x10
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	88 0f       	add	r24, r24
    21be:	99 1f       	adc	r25, r25
    21c0:	98 2f       	mov	r25, r24
    21c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21c4:	89 0f       	add	r24, r25
    21c6:	8f 5f       	subi	r24, 0xFF	; 255
    21c8:	89 8b       	std	Y+17, r24	; 0x11
						#endif
                    #elif(KEYPAD_NUM_COLS==4)
						#ifdef STANDARD_KEYPAD
							return KEYPAD_adjust_standard_4x4(key);
						#else
							return KEYPAD_adjust_nonstandard_4x4(key);
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	0e 94 1f 12 	call	0x243e	; 0x243e <KEYPAD_adjust_nonstandard_4x4>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5);
		}
	}

}
    21d0:	61 96       	adiw	r28, 0x11	; 17
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	de bf       	out	0x3e, r29	; 62
    21d8:	0f be       	out	0x3f, r0	; 63
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret
			//set chosen row as output and to high
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,KEYPAD_BUTTON_PRESSED);

			//loop on columns and read pin
			for(col=0;col<KEYPAD_NUM_COLS;col++)
    21e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	8f 87       	std	Y+15, r24	; 0x0f
    21e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ea:	84 30       	cpi	r24, 0x04	; 4
    21ec:	c8 f2       	brcs	.-78     	; 0x21a0 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_adjust_nonstandard_4x4(key);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	68 89       	ldd	r22, Y+16	; 0x10
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a0 ea       	ldi	r26, 0xA0	; 160
    21fe:	b0 e4       	ldi	r27, 0x40	; 64
    2200:	8b 87       	std	Y+11, r24	; 0x0b
    2202:	9c 87       	std	Y+12, r25	; 0x0c
    2204:	ad 87       	std	Y+13, r26	; 0x0d
    2206:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2208:	6b 85       	ldd	r22, Y+11	; 0x0b
    220a:	7c 85       	ldd	r23, Y+12	; 0x0c
    220c:	8d 85       	ldd	r24, Y+13	; 0x0d
    220e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	4a ef       	ldi	r20, 0xFA	; 250
    2216:	54 e4       	ldi	r21, 0x44	; 68
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	8f 83       	std	Y+7, r24	; 0x07
    2222:	98 87       	std	Y+8, r25	; 0x08
    2224:	a9 87       	std	Y+9, r26	; 0x09
    2226:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e8       	ldi	r20, 0x80	; 128
    2236:	5f e3       	ldi	r21, 0x3F	; 63
    2238:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    223c:	88 23       	and	r24, r24
    223e:	2c f4       	brge	.+10     	; 0x224a <KEYPAD_getPressedKey+0x12a>
		__ticks = 1;
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9e 83       	std	Y+6, r25	; 0x06
    2246:	8d 83       	std	Y+5, r24	; 0x05
    2248:	3f c0       	rjmp	.+126    	; 0x22c8 <KEYPAD_getPressedKey+0x1a8>
	else if (__tmp > 65535)
    224a:	6f 81       	ldd	r22, Y+7	; 0x07
    224c:	78 85       	ldd	r23, Y+8	; 0x08
    224e:	89 85       	ldd	r24, Y+9	; 0x09
    2250:	9a 85       	ldd	r25, Y+10	; 0x0a
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	3f ef       	ldi	r19, 0xFF	; 255
    2256:	4f e7       	ldi	r20, 0x7F	; 127
    2258:	57 e4       	ldi	r21, 0x47	; 71
    225a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225e:	18 16       	cp	r1, r24
    2260:	4c f5       	brge	.+82     	; 0x22b4 <KEYPAD_getPressedKey+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2262:	6b 85       	ldd	r22, Y+11	; 0x0b
    2264:	7c 85       	ldd	r23, Y+12	; 0x0c
    2266:	8d 85       	ldd	r24, Y+13	; 0x0d
    2268:	9e 85       	ldd	r25, Y+14	; 0x0e
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e2       	ldi	r20, 0x20	; 32
    2270:	51 e4       	ldi	r21, 0x41	; 65
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	bc 01       	movw	r22, r24
    227c:	cd 01       	movw	r24, r26
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9e 83       	std	Y+6, r25	; 0x06
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	0f c0       	rjmp	.+30     	; 0x22aa <KEYPAD_getPressedKey+0x18a>
    228c:	88 ec       	ldi	r24, 0xC8	; 200
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	9c 83       	std	Y+4, r25	; 0x04
    2292:	8b 83       	std	Y+3, r24	; 0x03
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <KEYPAD_getPressedKey+0x178>
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	69 f7       	brne	.-38     	; 0x228c <KEYPAD_getPressedKey+0x16c>
    22b2:	14 c0       	rjmp	.+40     	; 0x22dc <KEYPAD_getPressedKey+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b4:	6f 81       	ldd	r22, Y+7	; 0x07
    22b6:	78 85       	ldd	r23, Y+8	; 0x08
    22b8:	89 85       	ldd	r24, Y+9	; 0x09
    22ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	9a 83       	std	Y+2, r25	; 0x02
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <KEYPAD_getPressedKey+0x1b4>
    22d8:	9a 83       	std	Y+2, r25	; 0x02
    22da:	89 83       	std	Y+1, r24	; 0x01
	uint8 key;
	uint8 row, col;

	while(1){
		//loop on rows
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    22dc:	88 89       	ldd	r24, Y+16	; 0x10
    22de:	8f 5f       	subi	r24, 0xFF	; 255
    22e0:	88 8b       	std	Y+16, r24	; 0x10
    22e2:	88 89       	ldd	r24, Y+16	; 0x10
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	08 f4       	brcc	.+2      	; 0x22ea <KEYPAD_getPressedKey+0x1ca>
    22e8:	4f cf       	rjmp	.-354    	; 0x2188 <KEYPAD_getPressedKey+0x68>
    22ea:	4c cf       	rjmp	.-360    	; 0x2184 <KEYPAD_getPressedKey+0x64>

000022ec <KEYPAD_adjust_standard_4x4>:
		}
	}

}

static uint8 KEYPAD_adjust_standard_4x4(uint8 key){
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <KEYPAD_adjust_standard_4x4+0x6>
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <KEYPAD_adjust_standard_4x4+0x8>
    22f4:	0f 92       	push	r0
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	89 83       	std	Y+1, r24	; 0x01
	switch(key)
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	3c 83       	std	Y+4, r19	; 0x04
    2304:	2b 83       	std	Y+3, r18	; 0x03
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	88 30       	cpi	r24, 0x08	; 8
    230c:	91 05       	cpc	r25, r1
    230e:	09 f4       	brne	.+2      	; 0x2312 <KEYPAD_adjust_standard_4x4+0x26>
    2310:	70 c0       	rjmp	.+224    	; 0x23f2 <KEYPAD_adjust_standard_4x4+0x106>
    2312:	2b 81       	ldd	r18, Y+3	; 0x03
    2314:	3c 81       	ldd	r19, Y+4	; 0x04
    2316:	29 30       	cpi	r18, 0x09	; 9
    2318:	31 05       	cpc	r19, r1
    231a:	5c f5       	brge	.+86     	; 0x2372 <KEYPAD_adjust_standard_4x4+0x86>
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	84 30       	cpi	r24, 0x04	; 4
    2322:	91 05       	cpc	r25, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <KEYPAD_adjust_standard_4x4+0x3c>
    2326:	59 c0       	rjmp	.+178    	; 0x23da <KEYPAD_adjust_standard_4x4+0xee>
    2328:	2b 81       	ldd	r18, Y+3	; 0x03
    232a:	3c 81       	ldd	r19, Y+4	; 0x04
    232c:	25 30       	cpi	r18, 0x05	; 5
    232e:	31 05       	cpc	r19, r1
    2330:	9c f4       	brge	.+38     	; 0x2358 <KEYPAD_adjust_standard_4x4+0x6c>
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	82 30       	cpi	r24, 0x02	; 2
    2338:	91 05       	cpc	r25, r1
    233a:	09 f4       	brne	.+2      	; 0x233e <KEYPAD_adjust_standard_4x4+0x52>
    233c:	48 c0       	rjmp	.+144    	; 0x23ce <KEYPAD_adjust_standard_4x4+0xe2>
    233e:	2b 81       	ldd	r18, Y+3	; 0x03
    2340:	3c 81       	ldd	r19, Y+4	; 0x04
    2342:	23 30       	cpi	r18, 0x03	; 3
    2344:	31 05       	cpc	r19, r1
    2346:	0c f0       	brlt	.+2      	; 0x234a <KEYPAD_adjust_standard_4x4+0x5e>
    2348:	45 c0       	rjmp	.+138    	; 0x23d4 <KEYPAD_adjust_standard_4x4+0xe8>
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	81 30       	cpi	r24, 0x01	; 1
    2350:	91 05       	cpc	r25, r1
    2352:	09 f4       	brne	.+2      	; 0x2356 <KEYPAD_adjust_standard_4x4+0x6a>
    2354:	39 c0       	rjmp	.+114    	; 0x23c8 <KEYPAD_adjust_standard_4x4+0xdc>
    2356:	67 c0       	rjmp	.+206    	; 0x2426 <KEYPAD_adjust_standard_4x4+0x13a>
    2358:	2b 81       	ldd	r18, Y+3	; 0x03
    235a:	3c 81       	ldd	r19, Y+4	; 0x04
    235c:	26 30       	cpi	r18, 0x06	; 6
    235e:	31 05       	cpc	r19, r1
    2360:	09 f4       	brne	.+2      	; 0x2364 <KEYPAD_adjust_standard_4x4+0x78>
    2362:	41 c0       	rjmp	.+130    	; 0x23e6 <KEYPAD_adjust_standard_4x4+0xfa>
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	87 30       	cpi	r24, 0x07	; 7
    236a:	91 05       	cpc	r25, r1
    236c:	0c f0       	brlt	.+2      	; 0x2370 <KEYPAD_adjust_standard_4x4+0x84>
    236e:	3e c0       	rjmp	.+124    	; 0x23ec <KEYPAD_adjust_standard_4x4+0x100>
    2370:	37 c0       	rjmp	.+110    	; 0x23e0 <KEYPAD_adjust_standard_4x4+0xf4>
    2372:	2b 81       	ldd	r18, Y+3	; 0x03
    2374:	3c 81       	ldd	r19, Y+4	; 0x04
    2376:	2c 30       	cpi	r18, 0x0C	; 12
    2378:	31 05       	cpc	r19, r1
    237a:	09 f4       	brne	.+2      	; 0x237e <KEYPAD_adjust_standard_4x4+0x92>
    237c:	46 c0       	rjmp	.+140    	; 0x240a <KEYPAD_adjust_standard_4x4+0x11e>
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	8d 30       	cpi	r24, 0x0D	; 13
    2384:	91 05       	cpc	r25, r1
    2386:	5c f4       	brge	.+22     	; 0x239e <KEYPAD_adjust_standard_4x4+0xb2>
    2388:	2b 81       	ldd	r18, Y+3	; 0x03
    238a:	3c 81       	ldd	r19, Y+4	; 0x04
    238c:	2a 30       	cpi	r18, 0x0A	; 10
    238e:	31 05       	cpc	r19, r1
    2390:	b1 f1       	breq	.+108    	; 0x23fe <KEYPAD_adjust_standard_4x4+0x112>
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	8b 30       	cpi	r24, 0x0B	; 11
    2398:	91 05       	cpc	r25, r1
    239a:	a4 f5       	brge	.+104    	; 0x2404 <KEYPAD_adjust_standard_4x4+0x118>
    239c:	2d c0       	rjmp	.+90     	; 0x23f8 <KEYPAD_adjust_standard_4x4+0x10c>
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	2e 30       	cpi	r18, 0x0E	; 14
    23a4:	31 05       	cpc	r19, r1
    23a6:	b9 f1       	breq	.+110    	; 0x2416 <KEYPAD_adjust_standard_4x4+0x12a>
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	8e 30       	cpi	r24, 0x0E	; 14
    23ae:	91 05       	cpc	r25, r1
    23b0:	7c f1       	brlt	.+94     	; 0x2410 <KEYPAD_adjust_standard_4x4+0x124>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	2f 30       	cpi	r18, 0x0F	; 15
    23b8:	31 05       	cpc	r19, r1
    23ba:	79 f1       	breq	.+94     	; 0x241a <KEYPAD_adjust_standard_4x4+0x12e>
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	80 31       	cpi	r24, 0x10	; 16
    23c2:	91 05       	cpc	r25, r1
    23c4:	69 f1       	breq	.+90     	; 0x2420 <KEYPAD_adjust_standard_4x4+0x134>
    23c6:	2f c0       	rjmp	.+94     	; 0x2426 <KEYPAD_adjust_standard_4x4+0x13a>
	{
	case 1:
		return 1;
    23c8:	91 e0       	ldi	r25, 0x01	; 1
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	2d c0       	rjmp	.+90     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 2:
		return 2;
    23ce:	22 e0       	ldi	r18, 0x02	; 2
    23d0:	2a 83       	std	Y+2, r18	; 0x02
    23d2:	2a c0       	rjmp	.+84     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 3:
		return 3;
    23d4:	33 e0       	ldi	r19, 0x03	; 3
    23d6:	3a 83       	std	Y+2, r19	; 0x02
    23d8:	27 c0       	rjmp	.+78     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 4:
		return 'A';
    23da:	81 e4       	ldi	r24, 0x41	; 65
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	24 c0       	rjmp	.+72     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 5:
		return 4;
    23e0:	94 e0       	ldi	r25, 0x04	; 4
    23e2:	9a 83       	std	Y+2, r25	; 0x02
    23e4:	21 c0       	rjmp	.+66     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 6:
		return 5;
    23e6:	25 e0       	ldi	r18, 0x05	; 5
    23e8:	2a 83       	std	Y+2, r18	; 0x02
    23ea:	1e c0       	rjmp	.+60     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 7:
		return 6;
    23ec:	36 e0       	ldi	r19, 0x06	; 6
    23ee:	3a 83       	std	Y+2, r19	; 0x02
    23f0:	1b c0       	rjmp	.+54     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 8:
		return 'B';
    23f2:	82 e4       	ldi	r24, 0x42	; 66
    23f4:	8a 83       	std	Y+2, r24	; 0x02
    23f6:	18 c0       	rjmp	.+48     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 9:
		return 7;
    23f8:	97 e0       	ldi	r25, 0x07	; 7
    23fa:	9a 83       	std	Y+2, r25	; 0x02
    23fc:	15 c0       	rjmp	.+42     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 10:
		return 8;
    23fe:	28 e0       	ldi	r18, 0x08	; 8
    2400:	2a 83       	std	Y+2, r18	; 0x02
    2402:	12 c0       	rjmp	.+36     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 11:
		return 9;
    2404:	39 e0       	ldi	r19, 0x09	; 9
    2406:	3a 83       	std	Y+2, r19	; 0x02
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 12:
		return 'C';
    240a:	83 e4       	ldi	r24, 0x43	; 67
    240c:	8a 83       	std	Y+2, r24	; 0x02
    240e:	0c c0       	rjmp	.+24     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 13:
		return '*';
    2410:	9a e2       	ldi	r25, 0x2A	; 42
    2412:	9a 83       	std	Y+2, r25	; 0x02
    2414:	09 c0       	rjmp	.+18     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 14:
		return 0;
    2416:	1a 82       	std	Y+2, r1	; 0x02
    2418:	07 c0       	rjmp	.+14     	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 15:
		return '#';
    241a:	23 e2       	ldi	r18, 0x23	; 35
    241c:	2a 83       	std	Y+2, r18	; 0x02
    241e:	04 c0       	rjmp	.+8      	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
	case 16:
		return 'D';
    2420:	34 e4       	ldi	r19, 0x44	; 68
    2422:	3a 83       	std	Y+2, r19	; 0x02
    2424:	01 c0       	rjmp	.+2      	; 0x2428 <KEYPAD_adjust_standard_4x4+0x13c>
    2426:	02 c0       	rjmp	.+4      	; 0x242c <KEYPAD_adjust_standard_4x4+0x140>
	default:
		break;
	}
}
    2428:	8a 81       	ldd	r24, Y+2	; 0x02
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	8d 81       	ldd	r24, Y+5	; 0x05
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	08 95       	ret

0000243e <KEYPAD_adjust_nonstandard_4x4>:
}

#elif(KEYPAD_NUM_COLS==4)

static uint8 KEYPAD_adjust_nonstandard_4x4(uint8 button_number)
{
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	00 d0       	rcall	.+0      	; 0x2444 <KEYPAD_adjust_nonstandard_4x4+0x6>
    2444:	00 d0       	rcall	.+0      	; 0x2446 <KEYPAD_adjust_nonstandard_4x4+0x8>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    244c:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	3c 83       	std	Y+4, r19	; 0x04
    2456:	2b 83       	std	Y+3, r18	; 0x03
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	88 30       	cpi	r24, 0x08	; 8
    245e:	91 05       	cpc	r25, r1
    2460:	09 f4       	brne	.+2      	; 0x2464 <KEYPAD_adjust_nonstandard_4x4+0x26>
    2462:	70 c0       	rjmp	.+224    	; 0x2544 <KEYPAD_adjust_nonstandard_4x4+0x106>
    2464:	2b 81       	ldd	r18, Y+3	; 0x03
    2466:	3c 81       	ldd	r19, Y+4	; 0x04
    2468:	29 30       	cpi	r18, 0x09	; 9
    246a:	31 05       	cpc	r19, r1
    246c:	5c f5       	brge	.+86     	; 0x24c4 <KEYPAD_adjust_nonstandard_4x4+0x86>
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	84 30       	cpi	r24, 0x04	; 4
    2474:	91 05       	cpc	r25, r1
    2476:	09 f4       	brne	.+2      	; 0x247a <KEYPAD_adjust_nonstandard_4x4+0x3c>
    2478:	59 c0       	rjmp	.+178    	; 0x252c <KEYPAD_adjust_nonstandard_4x4+0xee>
    247a:	2b 81       	ldd	r18, Y+3	; 0x03
    247c:	3c 81       	ldd	r19, Y+4	; 0x04
    247e:	25 30       	cpi	r18, 0x05	; 5
    2480:	31 05       	cpc	r19, r1
    2482:	9c f4       	brge	.+38     	; 0x24aa <KEYPAD_adjust_nonstandard_4x4+0x6c>
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	91 05       	cpc	r25, r1
    248c:	09 f4       	brne	.+2      	; 0x2490 <KEYPAD_adjust_nonstandard_4x4+0x52>
    248e:	48 c0       	rjmp	.+144    	; 0x2520 <KEYPAD_adjust_nonstandard_4x4+0xe2>
    2490:	2b 81       	ldd	r18, Y+3	; 0x03
    2492:	3c 81       	ldd	r19, Y+4	; 0x04
    2494:	23 30       	cpi	r18, 0x03	; 3
    2496:	31 05       	cpc	r19, r1
    2498:	0c f0       	brlt	.+2      	; 0x249c <KEYPAD_adjust_nonstandard_4x4+0x5e>
    249a:	45 c0       	rjmp	.+138    	; 0x2526 <KEYPAD_adjust_nonstandard_4x4+0xe8>
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	91 05       	cpc	r25, r1
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <KEYPAD_adjust_nonstandard_4x4+0x6a>
    24a6:	39 c0       	rjmp	.+114    	; 0x251a <KEYPAD_adjust_nonstandard_4x4+0xdc>
    24a8:	67 c0       	rjmp	.+206    	; 0x2578 <KEYPAD_adjust_nonstandard_4x4+0x13a>
    24aa:	2b 81       	ldd	r18, Y+3	; 0x03
    24ac:	3c 81       	ldd	r19, Y+4	; 0x04
    24ae:	26 30       	cpi	r18, 0x06	; 6
    24b0:	31 05       	cpc	r19, r1
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <KEYPAD_adjust_nonstandard_4x4+0x78>
    24b4:	41 c0       	rjmp	.+130    	; 0x2538 <KEYPAD_adjust_nonstandard_4x4+0xfa>
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	87 30       	cpi	r24, 0x07	; 7
    24bc:	91 05       	cpc	r25, r1
    24be:	0c f0       	brlt	.+2      	; 0x24c2 <KEYPAD_adjust_nonstandard_4x4+0x84>
    24c0:	3e c0       	rjmp	.+124    	; 0x253e <KEYPAD_adjust_nonstandard_4x4+0x100>
    24c2:	37 c0       	rjmp	.+110    	; 0x2532 <KEYPAD_adjust_nonstandard_4x4+0xf4>
    24c4:	2b 81       	ldd	r18, Y+3	; 0x03
    24c6:	3c 81       	ldd	r19, Y+4	; 0x04
    24c8:	2c 30       	cpi	r18, 0x0C	; 12
    24ca:	31 05       	cpc	r19, r1
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <KEYPAD_adjust_nonstandard_4x4+0x92>
    24ce:	46 c0       	rjmp	.+140    	; 0x255c <KEYPAD_adjust_nonstandard_4x4+0x11e>
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	9c 81       	ldd	r25, Y+4	; 0x04
    24d4:	8d 30       	cpi	r24, 0x0D	; 13
    24d6:	91 05       	cpc	r25, r1
    24d8:	5c f4       	brge	.+22     	; 0x24f0 <KEYPAD_adjust_nonstandard_4x4+0xb2>
    24da:	2b 81       	ldd	r18, Y+3	; 0x03
    24dc:	3c 81       	ldd	r19, Y+4	; 0x04
    24de:	2a 30       	cpi	r18, 0x0A	; 10
    24e0:	31 05       	cpc	r19, r1
    24e2:	b1 f1       	breq	.+108    	; 0x2550 <KEYPAD_adjust_nonstandard_4x4+0x112>
    24e4:	8b 81       	ldd	r24, Y+3	; 0x03
    24e6:	9c 81       	ldd	r25, Y+4	; 0x04
    24e8:	8b 30       	cpi	r24, 0x0B	; 11
    24ea:	91 05       	cpc	r25, r1
    24ec:	a4 f5       	brge	.+104    	; 0x2556 <KEYPAD_adjust_nonstandard_4x4+0x118>
    24ee:	2d c0       	rjmp	.+90     	; 0x254a <KEYPAD_adjust_nonstandard_4x4+0x10c>
    24f0:	2b 81       	ldd	r18, Y+3	; 0x03
    24f2:	3c 81       	ldd	r19, Y+4	; 0x04
    24f4:	2e 30       	cpi	r18, 0x0E	; 14
    24f6:	31 05       	cpc	r19, r1
    24f8:	b9 f1       	breq	.+110    	; 0x2568 <KEYPAD_adjust_nonstandard_4x4+0x12a>
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	8e 30       	cpi	r24, 0x0E	; 14
    2500:	91 05       	cpc	r25, r1
    2502:	7c f1       	brlt	.+94     	; 0x2562 <KEYPAD_adjust_nonstandard_4x4+0x124>
    2504:	2b 81       	ldd	r18, Y+3	; 0x03
    2506:	3c 81       	ldd	r19, Y+4	; 0x04
    2508:	2f 30       	cpi	r18, 0x0F	; 15
    250a:	31 05       	cpc	r19, r1
    250c:	79 f1       	breq	.+94     	; 0x256c <KEYPAD_adjust_nonstandard_4x4+0x12e>
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	80 31       	cpi	r24, 0x10	; 16
    2514:	91 05       	cpc	r25, r1
    2516:	69 f1       	breq	.+90     	; 0x2572 <KEYPAD_adjust_nonstandard_4x4+0x134>
    2518:	2f c0       	rjmp	.+94     	; 0x2578 <KEYPAD_adjust_nonstandard_4x4+0x13a>
	{
		case 1: keypad_button = 7;
    251a:	87 e0       	ldi	r24, 0x07	; 7
    251c:	89 83       	std	Y+1, r24	; 0x01
    251e:	2e c0       	rjmp	.+92     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 2: keypad_button = 8;
    2520:	88 e0       	ldi	r24, 0x08	; 8
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	2b c0       	rjmp	.+86     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 3: keypad_button = 9;
    2526:	89 e0       	ldi	r24, 0x09	; 9
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	28 c0       	rjmp	.+80     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    252c:	85 e2       	ldi	r24, 0x25	; 37
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	25 c0       	rjmp	.+74     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 5: keypad_button = 4;
    2532:	84 e0       	ldi	r24, 0x04	; 4
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	22 c0       	rjmp	.+68     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 6: keypad_button = 5;
    2538:	85 e0       	ldi	r24, 0x05	; 5
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	1f c0       	rjmp	.+62     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 7: keypad_button = 6;
    253e:	86 e0       	ldi	r24, 0x06	; 6
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	1c c0       	rjmp	.+56     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2544:	8a e2       	ldi	r24, 0x2A	; 42
    2546:	89 83       	std	Y+1, r24	; 0x01
    2548:	19 c0       	rjmp	.+50     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 9: keypad_button = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	16 c0       	rjmp	.+44     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 10: keypad_button = 2;
    2550:	82 e0       	ldi	r24, 0x02	; 2
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	13 c0       	rjmp	.+38     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 11: keypad_button = 3;
    2556:	83 e0       	ldi	r24, 0x03	; 3
    2558:	89 83       	std	Y+1, r24	; 0x01
    255a:	10 c0       	rjmp	.+32     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    255c:	8d e2       	ldi	r24, 0x2D	; 45
    255e:	89 83       	std	Y+1, r24	; 0x01
    2560:	0d c0       	rjmp	.+26     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2562:	8d e0       	ldi	r24, 0x0D	; 13
    2564:	89 83       	std	Y+1, r24	; 0x01
    2566:	0a c0       	rjmp	.+20     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 14: keypad_button = 0;
    2568:	19 82       	std	Y+1, r1	; 0x01
    256a:	08 c0       	rjmp	.+16     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    256c:	8d e3       	ldi	r24, 0x3D	; 61
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	05 c0       	rjmp	.+10     	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2572:	8b e2       	ldi	r24, 0x2B	; 43
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	02 c0       	rjmp	.+4      	; 0x257c <KEYPAD_adjust_nonstandard_4x4+0x13e>
				break;
		default: keypad_button = button_number;
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    257c:	89 81       	ldd	r24, Y+1	; 0x01
}
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <LCD_init>:
#include "lcd.h"
#include "gpio.h"
#include "common_macros.h"


void LCD_init(void){
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
    2594:	2e 97       	sbiw	r28, 0x0e	; 14
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61

	//set up RS,E,DATA
	GPIO_setupPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	41 e0       	ldi	r20, 0x01	; 1
    25a6:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(E_PORT,E_PIN,PIN_OUTPUT);
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	61 e0       	ldi	r22, 0x01	; 1
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>

#if(LCD_DATA_BITS_MODE==8)
	GPIO_setupPortDirection(DATA_PORT_ID,PORT_OUTPUT);
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	6f ef       	ldi	r22, 0xFF	; 255
    25b8:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    25bc:	88 e3       	ldi	r24, 0x38	; 56
    25be:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_sendCommand>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a0 ea       	ldi	r26, 0xA0	; 160
    25c8:	b1 e4       	ldi	r27, 0x41	; 65
    25ca:	8b 87       	std	Y+11, r24	; 0x0b
    25cc:	9c 87       	std	Y+12, r25	; 0x0c
    25ce:	ad 87       	std	Y+13, r26	; 0x0d
    25d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a ef       	ldi	r20, 0xFA	; 250
    25e0:	54 e4       	ldi	r21, 0x44	; 68
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	8f 83       	std	Y+7, r24	; 0x07
    25ec:	98 87       	std	Y+8, r25	; 0x08
    25ee:	a9 87       	std	Y+9, r26	; 0x09
    25f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f2:	6f 81       	ldd	r22, Y+7	; 0x07
    25f4:	78 85       	ldd	r23, Y+8	; 0x08
    25f6:	89 85       	ldd	r24, Y+9	; 0x09
    25f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e8       	ldi	r20, 0x80	; 128
    2600:	5f e3       	ldi	r21, 0x3F	; 63
    2602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2606:	88 23       	and	r24, r24
    2608:	2c f4       	brge	.+10     	; 0x2614 <LCD_init+0x88>
		__ticks = 1;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9e 83       	std	Y+6, r25	; 0x06
    2610:	8d 83       	std	Y+5, r24	; 0x05
    2612:	3f c0       	rjmp	.+126    	; 0x2692 <LCD_init+0x106>
	else if (__tmp > 65535)
    2614:	6f 81       	ldd	r22, Y+7	; 0x07
    2616:	78 85       	ldd	r23, Y+8	; 0x08
    2618:	89 85       	ldd	r24, Y+9	; 0x09
    261a:	9a 85       	ldd	r25, Y+10	; 0x0a
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	3f ef       	ldi	r19, 0xFF	; 255
    2620:	4f e7       	ldi	r20, 0x7F	; 127
    2622:	57 e4       	ldi	r21, 0x47	; 71
    2624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2628:	18 16       	cp	r1, r24
    262a:	4c f5       	brge	.+82     	; 0x267e <LCD_init+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262c:	6b 85       	ldd	r22, Y+11	; 0x0b
    262e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2630:	8d 85       	ldd	r24, Y+13	; 0x0d
    2632:	9e 85       	ldd	r25, Y+14	; 0x0e
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e2       	ldi	r20, 0x20	; 32
    263a:	51 e4       	ldi	r21, 0x41	; 65
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9e 83       	std	Y+6, r25	; 0x06
    2652:	8d 83       	std	Y+5, r24	; 0x05
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <LCD_init+0xe8>
    2656:	88 ec       	ldi	r24, 0xC8	; 200
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_init+0xd6>
    2666:	9c 83       	std	Y+4, r25	; 0x04
    2668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	9e 81       	ldd	r25, Y+6	; 0x06
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	69 f7       	brne	.-38     	; 0x2656 <LCD_init+0xca>
    267c:	14 c0       	rjmp	.+40     	; 0x26a6 <LCD_init+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9e 83       	std	Y+6, r25	; 0x06
    2690:	8d 83       	std	Y+5, r24	; 0x05
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	9e 81       	ldd	r25, Y+6	; 0x06
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <LCD_init+0x112>
    26a2:	9a 83       	std	Y+2, r25	; 0x02
    26a4:	89 83       	std	Y+1, r24	; 0x01

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif

	_delay_ms(20);
	LCD_sendCommand(LCD_CURSOR_OFF);
    26a6:	8c e0       	ldi	r24, 0x0C	; 12
    26a8:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    26ac:	81 e0       	ldi	r24, 0x01	; 1
    26ae:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_sendCommand>

}
    26b2:	2e 96       	adiw	r28, 0x0e	; 14
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	e9 97       	sbiw	r28, 0x39	; 57
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	89 af       	std	Y+57, r24	; 0x39

	//RS=O,E=1,SEND,E=0, and delay between
	GPIO_writePin(RS_PORT,RS_PIN,LOGIC_LOW);
    26da:	82 e0       	ldi	r24, 0x02	; 2
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <GPIO_writePin>
    26e4:	80 e0       	ldi	r24, 0x00	; 0
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a0 e8       	ldi	r26, 0x80	; 128
    26ea:	bf e3       	ldi	r27, 0x3F	; 63
    26ec:	8d ab       	std	Y+53, r24	; 0x35
    26ee:	9e ab       	std	Y+54, r25	; 0x36
    26f0:	af ab       	std	Y+55, r26	; 0x37
    26f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f4:	6d a9       	ldd	r22, Y+53	; 0x35
    26f6:	7e a9       	ldd	r23, Y+54	; 0x36
    26f8:	8f a9       	ldd	r24, Y+55	; 0x37
    26fa:	98 ad       	ldd	r25, Y+56	; 0x38
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	4a ef       	ldi	r20, 0xFA	; 250
    2702:	54 e4       	ldi	r21, 0x44	; 68
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	89 ab       	std	Y+49, r24	; 0x31
    270e:	9a ab       	std	Y+50, r25	; 0x32
    2710:	ab ab       	std	Y+51, r26	; 0x33
    2712:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2714:	69 a9       	ldd	r22, Y+49	; 0x31
    2716:	7a a9       	ldd	r23, Y+50	; 0x32
    2718:	8b a9       	ldd	r24, Y+51	; 0x33
    271a:	9c a9       	ldd	r25, Y+52	; 0x34
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e8       	ldi	r20, 0x80	; 128
    2722:	5f e3       	ldi	r21, 0x3F	; 63
    2724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2728:	88 23       	and	r24, r24
    272a:	2c f4       	brge	.+10     	; 0x2736 <LCD_sendCommand+0x72>
		__ticks = 1;
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	98 ab       	std	Y+48, r25	; 0x30
    2732:	8f a7       	std	Y+47, r24	; 0x2f
    2734:	3f c0       	rjmp	.+126    	; 0x27b4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2736:	69 a9       	ldd	r22, Y+49	; 0x31
    2738:	7a a9       	ldd	r23, Y+50	; 0x32
    273a:	8b a9       	ldd	r24, Y+51	; 0x33
    273c:	9c a9       	ldd	r25, Y+52	; 0x34
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	3f ef       	ldi	r19, 0xFF	; 255
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	57 e4       	ldi	r21, 0x47	; 71
    2746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	4c f5       	brge	.+82     	; 0x27a0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    274e:	6d a9       	ldd	r22, Y+53	; 0x35
    2750:	7e a9       	ldd	r23, Y+54	; 0x36
    2752:	8f a9       	ldd	r24, Y+55	; 0x37
    2754:	98 ad       	ldd	r25, Y+56	; 0x38
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e2       	ldi	r20, 0x20	; 32
    275c:	51 e4       	ldi	r21, 0x41	; 65
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	98 ab       	std	Y+48, r25	; 0x30
    2774:	8f a7       	std	Y+47, r24	; 0x2f
    2776:	0f c0       	rjmp	.+30     	; 0x2796 <LCD_sendCommand+0xd2>
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9e a7       	std	Y+46, r25	; 0x2e
    277e:	8d a7       	std	Y+45, r24	; 0x2d
    2780:	8d a5       	ldd	r24, Y+45	; 0x2d
    2782:	9e a5       	ldd	r25, Y+46	; 0x2e
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_sendCommand+0xc0>
    2788:	9e a7       	std	Y+46, r25	; 0x2e
    278a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278c:	8f a5       	ldd	r24, Y+47	; 0x2f
    278e:	98 a9       	ldd	r25, Y+48	; 0x30
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	98 ab       	std	Y+48, r25	; 0x30
    2794:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2796:	8f a5       	ldd	r24, Y+47	; 0x2f
    2798:	98 a9       	ldd	r25, Y+48	; 0x30
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	69 f7       	brne	.-38     	; 0x2778 <LCD_sendCommand+0xb4>
    279e:	14 c0       	rjmp	.+40     	; 0x27c8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a0:	69 a9       	ldd	r22, Y+49	; 0x31
    27a2:	7a a9       	ldd	r23, Y+50	; 0x32
    27a4:	8b a9       	ldd	r24, Y+51	; 0x33
    27a6:	9c a9       	ldd	r25, Y+52	; 0x34
    27a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	98 ab       	std	Y+48, r25	; 0x30
    27b2:	8f a7       	std	Y+47, r24	; 0x2f
    27b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27b6:	98 a9       	ldd	r25, Y+48	; 0x30
    27b8:	9c a7       	std	Y+44, r25	; 0x2c
    27ba:	8b a7       	std	Y+43, r24	; 0x2b
    27bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    27be:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c0:	01 97       	sbiw	r24, 0x01	; 1
    27c2:	f1 f7       	brne	.-4      	; 0x27c0 <LCD_sendCommand+0xfc>
    27c4:	9c a7       	std	Y+44, r25	; 0x2c
    27c6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_HIGH);
    27c8:	82 e0       	ldi	r24, 0x02	; 2
    27ca:	61 e0       	ldi	r22, 0x01	; 1
    27cc:	41 e0       	ldi	r20, 0x01	; 1
    27ce:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <GPIO_writePin>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a0 e8       	ldi	r26, 0x80	; 128
    27d8:	bf e3       	ldi	r27, 0x3F	; 63
    27da:	8f a3       	std	Y+39, r24	; 0x27
    27dc:	98 a7       	std	Y+40, r25	; 0x28
    27de:	a9 a7       	std	Y+41, r26	; 0x29
    27e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e2:	6f a1       	ldd	r22, Y+39	; 0x27
    27e4:	78 a5       	ldd	r23, Y+40	; 0x28
    27e6:	89 a5       	ldd	r24, Y+41	; 0x29
    27e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a ef       	ldi	r20, 0xFA	; 250
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8b a3       	std	Y+35, r24	; 0x23
    27fc:	9c a3       	std	Y+36, r25	; 0x24
    27fe:	ad a3       	std	Y+37, r26	; 0x25
    2800:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2802:	6b a1       	ldd	r22, Y+35	; 0x23
    2804:	7c a1       	ldd	r23, Y+36	; 0x24
    2806:	8d a1       	ldd	r24, Y+37	; 0x25
    2808:	9e a1       	ldd	r25, Y+38	; 0x26
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e8       	ldi	r20, 0x80	; 128
    2810:	5f e3       	ldi	r21, 0x3F	; 63
    2812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2816:	88 23       	and	r24, r24
    2818:	2c f4       	brge	.+10     	; 0x2824 <LCD_sendCommand+0x160>
		__ticks = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9a a3       	std	Y+34, r25	; 0x22
    2820:	89 a3       	std	Y+33, r24	; 0x21
    2822:	3f c0       	rjmp	.+126    	; 0x28a2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2824:	6b a1       	ldd	r22, Y+35	; 0x23
    2826:	7c a1       	ldd	r23, Y+36	; 0x24
    2828:	8d a1       	ldd	r24, Y+37	; 0x25
    282a:	9e a1       	ldd	r25, Y+38	; 0x26
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	4f e7       	ldi	r20, 0x7F	; 127
    2832:	57 e4       	ldi	r21, 0x47	; 71
    2834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2838:	18 16       	cp	r1, r24
    283a:	4c f5       	brge	.+82     	; 0x288e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	6f a1       	ldd	r22, Y+39	; 0x27
    283e:	78 a5       	ldd	r23, Y+40	; 0x28
    2840:	89 a5       	ldd	r24, Y+41	; 0x29
    2842:	9a a5       	ldd	r25, Y+42	; 0x2a
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9a a3       	std	Y+34, r25	; 0x22
    2862:	89 a3       	std	Y+33, r24	; 0x21
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <LCD_sendCommand+0x1c0>
    2866:	88 ec       	ldi	r24, 0xC8	; 200
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	98 a3       	std	Y+32, r25	; 0x20
    286c:	8f 8f       	std	Y+31, r24	; 0x1f
    286e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2870:	98 a1       	ldd	r25, Y+32	; 0x20
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_sendCommand+0x1ae>
    2876:	98 a3       	std	Y+32, r25	; 0x20
    2878:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287a:	89 a1       	ldd	r24, Y+33	; 0x21
    287c:	9a a1       	ldd	r25, Y+34	; 0x22
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	9a a3       	std	Y+34, r25	; 0x22
    2882:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	89 a1       	ldd	r24, Y+33	; 0x21
    2886:	9a a1       	ldd	r25, Y+34	; 0x22
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	69 f7       	brne	.-38     	; 0x2866 <LCD_sendCommand+0x1a2>
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	6b a1       	ldd	r22, Y+35	; 0x23
    2890:	7c a1       	ldd	r23, Y+36	; 0x24
    2892:	8d a1       	ldd	r24, Y+37	; 0x25
    2894:	9e a1       	ldd	r25, Y+38	; 0x26
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9a a3       	std	Y+34, r25	; 0x22
    28a0:	89 a3       	std	Y+33, r24	; 0x21
    28a2:	89 a1       	ldd	r24, Y+33	; 0x21
    28a4:	9a a1       	ldd	r25, Y+34	; 0x22
    28a6:	9e 8f       	std	Y+30, r25	; 0x1e
    28a8:	8d 8f       	std	Y+29, r24	; 0x1d
    28aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <LCD_sendCommand+0x1ea>
    28b2:	9e 8f       	std	Y+30, r25	; 0x1e
    28b4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(DATA_PORT_ID,command);
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	69 ad       	ldd	r22, Y+57	; 0x39
    28ba:	0e 94 07 10 	call	0x200e	; 0x200e <GPIO_writePort>
    28be:	80 e0       	ldi	r24, 0x00	; 0
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	a0 e8       	ldi	r26, 0x80	; 128
    28c4:	bf e3       	ldi	r27, 0x3F	; 63
    28c6:	89 8f       	std	Y+25, r24	; 0x19
    28c8:	9a 8f       	std	Y+26, r25	; 0x1a
    28ca:	ab 8f       	std	Y+27, r26	; 0x1b
    28cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ce:	69 8d       	ldd	r22, Y+25	; 0x19
    28d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	4a ef       	ldi	r20, 0xFA	; 250
    28dc:	54 e4       	ldi	r21, 0x44	; 68
    28de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	8d 8b       	std	Y+21, r24	; 0x15
    28e8:	9e 8b       	std	Y+22, r25	; 0x16
    28ea:	af 8b       	std	Y+23, r26	; 0x17
    28ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ee:	6d 89       	ldd	r22, Y+21	; 0x15
    28f0:	7e 89       	ldd	r23, Y+22	; 0x16
    28f2:	8f 89       	ldd	r24, Y+23	; 0x17
    28f4:	98 8d       	ldd	r25, Y+24	; 0x18
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e8       	ldi	r20, 0x80	; 128
    28fc:	5f e3       	ldi	r21, 0x3F	; 63
    28fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2902:	88 23       	and	r24, r24
    2904:	2c f4       	brge	.+10     	; 0x2910 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	9c 8b       	std	Y+20, r25	; 0x14
    290c:	8b 8b       	std	Y+19, r24	; 0x13
    290e:	3f c0       	rjmp	.+126    	; 0x298e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2910:	6d 89       	ldd	r22, Y+21	; 0x15
    2912:	7e 89       	ldd	r23, Y+22	; 0x16
    2914:	8f 89       	ldd	r24, Y+23	; 0x17
    2916:	98 8d       	ldd	r25, Y+24	; 0x18
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	3f ef       	ldi	r19, 0xFF	; 255
    291c:	4f e7       	ldi	r20, 0x7F	; 127
    291e:	57 e4       	ldi	r21, 0x47	; 71
    2920:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2924:	18 16       	cp	r1, r24
    2926:	4c f5       	brge	.+82     	; 0x297a <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2928:	69 8d       	ldd	r22, Y+25	; 0x19
    292a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e2       	ldi	r20, 0x20	; 32
    2936:	51 e4       	ldi	r21, 0x41	; 65
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2948:	dc 01       	movw	r26, r24
    294a:	cb 01       	movw	r24, r22
    294c:	9c 8b       	std	Y+20, r25	; 0x14
    294e:	8b 8b       	std	Y+19, r24	; 0x13
    2950:	0f c0       	rjmp	.+30     	; 0x2970 <LCD_sendCommand+0x2ac>
    2952:	88 ec       	ldi	r24, 0xC8	; 200
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	9a 8b       	std	Y+18, r25	; 0x12
    2958:	89 8b       	std	Y+17, r24	; 0x11
    295a:	89 89       	ldd	r24, Y+17	; 0x11
    295c:	9a 89       	ldd	r25, Y+18	; 0x12
    295e:	01 97       	sbiw	r24, 0x01	; 1
    2960:	f1 f7       	brne	.-4      	; 0x295e <LCD_sendCommand+0x29a>
    2962:	9a 8b       	std	Y+18, r25	; 0x12
    2964:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2966:	8b 89       	ldd	r24, Y+19	; 0x13
    2968:	9c 89       	ldd	r25, Y+20	; 0x14
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	9c 8b       	std	Y+20, r25	; 0x14
    296e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2970:	8b 89       	ldd	r24, Y+19	; 0x13
    2972:	9c 89       	ldd	r25, Y+20	; 0x14
    2974:	00 97       	sbiw	r24, 0x00	; 0
    2976:	69 f7       	brne	.-38     	; 0x2952 <LCD_sendCommand+0x28e>
    2978:	14 c0       	rjmp	.+40     	; 0x29a2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    297a:	6d 89       	ldd	r22, Y+21	; 0x15
    297c:	7e 89       	ldd	r23, Y+22	; 0x16
    297e:	8f 89       	ldd	r24, Y+23	; 0x17
    2980:	98 8d       	ldd	r25, Y+24	; 0x18
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9c 8b       	std	Y+20, r25	; 0x14
    298c:	8b 8b       	std	Y+19, r24	; 0x13
    298e:	8b 89       	ldd	r24, Y+19	; 0x13
    2990:	9c 89       	ldd	r25, Y+20	; 0x14
    2992:	98 8b       	std	Y+16, r25	; 0x10
    2994:	8f 87       	std	Y+15, r24	; 0x0f
    2996:	8f 85       	ldd	r24, Y+15	; 0x0f
    2998:	98 89       	ldd	r25, Y+16	; 0x10
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	f1 f7       	brne	.-4      	; 0x299a <LCD_sendCommand+0x2d6>
    299e:	98 8b       	std	Y+16, r25	; 0x10
    29a0:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(DATA_PORT_ID,DATA_PORT_FRIST_PIN+2,GET_BIT(command,2));
	GPIO_writePin(DATA_PORT_ID,DATA_PORT_FRIST_PIN+3,GET_BIT(command,3));
#endif

	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_LOW);
    29a2:	82 e0       	ldi	r24, 0x02	; 2
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <GPIO_writePin>
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a0 e8       	ldi	r26, 0x80	; 128
    29b2:	bf e3       	ldi	r27, 0x3F	; 63
    29b4:	8b 87       	std	Y+11, r24	; 0x0b
    29b6:	9c 87       	std	Y+12, r25	; 0x0c
    29b8:	ad 87       	std	Y+13, r26	; 0x0d
    29ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29be:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a ef       	ldi	r20, 0xFA	; 250
    29ca:	54 e4       	ldi	r21, 0x44	; 68
    29cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8f 83       	std	Y+7, r24	; 0x07
    29d6:	98 87       	std	Y+8, r25	; 0x08
    29d8:	a9 87       	std	Y+9, r26	; 0x09
    29da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f0:	88 23       	and	r24, r24
    29f2:	2c f4       	brge	.+10     	; 0x29fe <LCD_sendCommand+0x33a>
		__ticks = 1;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9e 83       	std	Y+6, r25	; 0x06
    29fa:	8d 83       	std	Y+5, r24	; 0x05
    29fc:	3f c0       	rjmp	.+126    	; 0x2a7c <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    29fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2a00:	78 85       	ldd	r23, Y+8	; 0x08
    2a02:	89 85       	ldd	r24, Y+9	; 0x09
    2a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	3f ef       	ldi	r19, 0xFF	; 255
    2a0a:	4f e7       	ldi	r20, 0x7F	; 127
    2a0c:	57 e4       	ldi	r21, 0x47	; 71
    2a0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	4c f5       	brge	.+82     	; 0x2a68 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e2       	ldi	r20, 0x20	; 32
    2a24:	51 e4       	ldi	r21, 0x41	; 65
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
    2a3e:	0f c0       	rjmp	.+30     	; 0x2a5e <LCD_sendCommand+0x39a>
    2a40:	88 ec       	ldi	r24, 0xC8	; 200
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	9c 83       	std	Y+4, r25	; 0x04
    2a46:	8b 83       	std	Y+3, r24	; 0x03
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <LCD_sendCommand+0x388>
    2a50:	9c 83       	std	Y+4, r25	; 0x04
    2a52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	9e 81       	ldd	r25, Y+6	; 0x06
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	00 97       	sbiw	r24, 0x00	; 0
    2a64:	69 f7       	brne	.-38     	; 0x2a40 <LCD_sendCommand+0x37c>
    2a66:	14 c0       	rjmp	.+40     	; 0x2a90 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a68:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6a:	78 85       	ldd	r23, Y+8	; 0x08
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	9e 83       	std	Y+6, r25	; 0x06
    2a7a:	8d 83       	std	Y+5, r24	; 0x05
    2a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	01 97       	sbiw	r24, 0x01	; 1
    2a8a:	f1 f7       	brne	.-4      	; 0x2a88 <LCD_sendCommand+0x3c4>
    2a8c:	9a 83       	std	Y+2, r25	; 0x02
    2a8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2a90:	e9 96       	adiw	r28, 0x39	; 57
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	e9 97       	sbiw	r28, 0x39	; 57
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	89 af       	std	Y+57, r24	; 0x39

	//RS=1,E=1,SEND,E=0, and delay between
	GPIO_writePin(RS_PORT,RS_PIN,LOGIC_HIGH);
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	41 e0       	ldi	r20, 0x01	; 1
    2abe:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <GPIO_writePin>
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	a0 e8       	ldi	r26, 0x80	; 128
    2ac8:	bf e3       	ldi	r27, 0x3F	; 63
    2aca:	8d ab       	std	Y+53, r24	; 0x35
    2acc:	9e ab       	std	Y+54, r25	; 0x36
    2ace:	af ab       	std	Y+55, r26	; 0x37
    2ad0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ad4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ad6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ad8:	98 ad       	ldd	r25, Y+56	; 0x38
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4a ef       	ldi	r20, 0xFA	; 250
    2ae0:	54 e4       	ldi	r21, 0x44	; 68
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	89 ab       	std	Y+49, r24	; 0x31
    2aec:	9a ab       	std	Y+50, r25	; 0x32
    2aee:	ab ab       	std	Y+51, r26	; 0x33
    2af0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2af2:	69 a9       	ldd	r22, Y+49	; 0x31
    2af4:	7a a9       	ldd	r23, Y+50	; 0x32
    2af6:	8b a9       	ldd	r24, Y+51	; 0x33
    2af8:	9c a9       	ldd	r25, Y+52	; 0x34
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e8       	ldi	r20, 0x80	; 128
    2b00:	5f e3       	ldi	r21, 0x3F	; 63
    2b02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b06:	88 23       	and	r24, r24
    2b08:	2c f4       	brge	.+10     	; 0x2b14 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	98 ab       	std	Y+48, r25	; 0x30
    2b10:	8f a7       	std	Y+47, r24	; 0x2f
    2b12:	3f c0       	rjmp	.+126    	; 0x2b92 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2b14:	69 a9       	ldd	r22, Y+49	; 0x31
    2b16:	7a a9       	ldd	r23, Y+50	; 0x32
    2b18:	8b a9       	ldd	r24, Y+51	; 0x33
    2b1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	3f ef       	ldi	r19, 0xFF	; 255
    2b20:	4f e7       	ldi	r20, 0x7F	; 127
    2b22:	57 e4       	ldi	r21, 0x47	; 71
    2b24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b28:	18 16       	cp	r1, r24
    2b2a:	4c f5       	brge	.+82     	; 0x2b7e <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b30:	8f a9       	ldd	r24, Y+55	; 0x37
    2b32:	98 ad       	ldd	r25, Y+56	; 0x38
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e2       	ldi	r20, 0x20	; 32
    2b3a:	51 e4       	ldi	r21, 0x41	; 65
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	bc 01       	movw	r22, r24
    2b46:	cd 01       	movw	r24, r26
    2b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	98 ab       	std	Y+48, r25	; 0x30
    2b52:	8f a7       	std	Y+47, r24	; 0x2f
    2b54:	0f c0       	rjmp	.+30     	; 0x2b74 <LCD_displayCharacter+0xd2>
    2b56:	88 ec       	ldi	r24, 0xC8	; 200
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9e a7       	std	Y+46, r25	; 0x2e
    2b5c:	8d a7       	std	Y+45, r24	; 0x2d
    2b5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b60:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <LCD_displayCharacter+0xc0>
    2b66:	9e a7       	std	Y+46, r25	; 0x2e
    2b68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	98 ab       	std	Y+48, r25	; 0x30
    2b72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b74:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b76:	98 a9       	ldd	r25, Y+48	; 0x30
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	69 f7       	brne	.-38     	; 0x2b56 <LCD_displayCharacter+0xb4>
    2b7c:	14 c0       	rjmp	.+40     	; 0x2ba6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b80:	7a a9       	ldd	r23, Y+50	; 0x32
    2b82:	8b a9       	ldd	r24, Y+51	; 0x33
    2b84:	9c a9       	ldd	r25, Y+52	; 0x34
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	98 ab       	std	Y+48, r25	; 0x30
    2b90:	8f a7       	std	Y+47, r24	; 0x2f
    2b92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b94:	98 a9       	ldd	r25, Y+48	; 0x30
    2b96:	9c a7       	std	Y+44, r25	; 0x2c
    2b98:	8b a7       	std	Y+43, r24	; 0x2b
    2b9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	f1 f7       	brne	.-4      	; 0x2b9e <LCD_displayCharacter+0xfc>
    2ba2:	9c a7       	std	Y+44, r25	; 0x2c
    2ba4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_HIGH);
    2ba6:	82 e0       	ldi	r24, 0x02	; 2
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	41 e0       	ldi	r20, 0x01	; 1
    2bac:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <GPIO_writePin>
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	a0 e8       	ldi	r26, 0x80	; 128
    2bb6:	bf e3       	ldi	r27, 0x3F	; 63
    2bb8:	8f a3       	std	Y+39, r24	; 0x27
    2bba:	98 a7       	std	Y+40, r25	; 0x28
    2bbc:	a9 a7       	std	Y+41, r26	; 0x29
    2bbe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc0:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc2:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc4:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	4a ef       	ldi	r20, 0xFA	; 250
    2bce:	54 e4       	ldi	r21, 0x44	; 68
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	8b a3       	std	Y+35, r24	; 0x23
    2bda:	9c a3       	std	Y+36, r25	; 0x24
    2bdc:	ad a3       	std	Y+37, r26	; 0x25
    2bde:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2be0:	6b a1       	ldd	r22, Y+35	; 0x23
    2be2:	7c a1       	ldd	r23, Y+36	; 0x24
    2be4:	8d a1       	ldd	r24, Y+37	; 0x25
    2be6:	9e a1       	ldd	r25, Y+38	; 0x26
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e8       	ldi	r20, 0x80	; 128
    2bee:	5f e3       	ldi	r21, 0x3F	; 63
    2bf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf4:	88 23       	and	r24, r24
    2bf6:	2c f4       	brge	.+10     	; 0x2c02 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2bf8:	81 e0       	ldi	r24, 0x01	; 1
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	9a a3       	std	Y+34, r25	; 0x22
    2bfe:	89 a3       	std	Y+33, r24	; 0x21
    2c00:	3f c0       	rjmp	.+126    	; 0x2c80 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2c02:	6b a1       	ldd	r22, Y+35	; 0x23
    2c04:	7c a1       	ldd	r23, Y+36	; 0x24
    2c06:	8d a1       	ldd	r24, Y+37	; 0x25
    2c08:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0a:	20 e0       	ldi	r18, 0x00	; 0
    2c0c:	3f ef       	ldi	r19, 0xFF	; 255
    2c0e:	4f e7       	ldi	r20, 0x7F	; 127
    2c10:	57 e4       	ldi	r21, 0x47	; 71
    2c12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c16:	18 16       	cp	r1, r24
    2c18:	4c f5       	brge	.+82     	; 0x2c6c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c1c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c1e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c20:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e2       	ldi	r20, 0x20	; 32
    2c28:	51 e4       	ldi	r21, 0x41	; 65
    2c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	bc 01       	movw	r22, r24
    2c34:	cd 01       	movw	r24, r26
    2c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	9a a3       	std	Y+34, r25	; 0x22
    2c40:	89 a3       	std	Y+33, r24	; 0x21
    2c42:	0f c0       	rjmp	.+30     	; 0x2c62 <LCD_displayCharacter+0x1c0>
    2c44:	88 ec       	ldi	r24, 0xC8	; 200
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	98 a3       	std	Y+32, r25	; 0x20
    2c4a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c4e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_displayCharacter+0x1ae>
    2c54:	98 a3       	std	Y+32, r25	; 0x20
    2c56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c58:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	9a a3       	std	Y+34, r25	; 0x22
    2c60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c62:	89 a1       	ldd	r24, Y+33	; 0x21
    2c64:	9a a1       	ldd	r25, Y+34	; 0x22
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	69 f7       	brne	.-38     	; 0x2c44 <LCD_displayCharacter+0x1a2>
    2c6a:	14 c0       	rjmp	.+40     	; 0x2c94 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c70:	8d a1       	ldd	r24, Y+37	; 0x25
    2c72:	9e a1       	ldd	r25, Y+38	; 0x26
    2c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	9a a3       	std	Y+34, r25	; 0x22
    2c7e:	89 a3       	std	Y+33, r24	; 0x21
    2c80:	89 a1       	ldd	r24, Y+33	; 0x21
    2c82:	9a a1       	ldd	r25, Y+34	; 0x22
    2c84:	9e 8f       	std	Y+30, r25	; 0x1e
    2c86:	8d 8f       	std	Y+29, r24	; 0x1d
    2c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	f1 f7       	brne	.-4      	; 0x2c8c <LCD_displayCharacter+0x1ea>
    2c90:	9e 8f       	std	Y+30, r25	; 0x1e
    2c92:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(DATA_PORT_ID,data);
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	69 ad       	ldd	r22, Y+57	; 0x39
    2c98:	0e 94 07 10 	call	0x200e	; 0x200e <GPIO_writePort>
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a0 e8       	ldi	r26, 0x80	; 128
    2ca2:	bf e3       	ldi	r27, 0x3F	; 63
    2ca4:	89 8f       	std	Y+25, r24	; 0x19
    2ca6:	9a 8f       	std	Y+26, r25	; 0x1a
    2ca8:	ab 8f       	std	Y+27, r26	; 0x1b
    2caa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	69 8d       	ldd	r22, Y+25	; 0x19
    2cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	4a ef       	ldi	r20, 0xFA	; 250
    2cba:	54 e4       	ldi	r21, 0x44	; 68
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8d 8b       	std	Y+21, r24	; 0x15
    2cc6:	9e 8b       	std	Y+22, r25	; 0x16
    2cc8:	af 8b       	std	Y+23, r26	; 0x17
    2cca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cce:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e8       	ldi	r20, 0x80	; 128
    2cda:	5f e3       	ldi	r21, 0x3F	; 63
    2cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce0:	88 23       	and	r24, r24
    2ce2:	2c f4       	brge	.+10     	; 0x2cee <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	8b 8b       	std	Y+19, r24	; 0x13
    2cec:	3f c0       	rjmp	.+126    	; 0x2d6c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2cee:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	3f ef       	ldi	r19, 0xFF	; 255
    2cfa:	4f e7       	ldi	r20, 0x7F	; 127
    2cfc:	57 e4       	ldi	r21, 0x47	; 71
    2cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d02:	18 16       	cp	r1, r24
    2d04:	4c f5       	brge	.+82     	; 0x2d58 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d06:	69 8d       	ldd	r22, Y+25	; 0x19
    2d08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9c 8b       	std	Y+20, r25	; 0x14
    2d2c:	8b 8b       	std	Y+19, r24	; 0x13
    2d2e:	0f c0       	rjmp	.+30     	; 0x2d4e <LCD_displayCharacter+0x2ac>
    2d30:	88 ec       	ldi	r24, 0xC8	; 200
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9a 8b       	std	Y+18, r25	; 0x12
    2d36:	89 8b       	std	Y+17, r24	; 0x11
    2d38:	89 89       	ldd	r24, Y+17	; 0x11
    2d3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <LCD_displayCharacter+0x29a>
    2d40:	9a 8b       	std	Y+18, r25	; 0x12
    2d42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d44:	8b 89       	ldd	r24, Y+19	; 0x13
    2d46:	9c 89       	ldd	r25, Y+20	; 0x14
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9c 8b       	std	Y+20, r25	; 0x14
    2d4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d50:	9c 89       	ldd	r25, Y+20	; 0x14
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	69 f7       	brne	.-38     	; 0x2d30 <LCD_displayCharacter+0x28e>
    2d56:	14 c0       	rjmp	.+40     	; 0x2d80 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d58:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9c 8b       	std	Y+20, r25	; 0x14
    2d6a:	8b 8b       	std	Y+19, r24	; 0x13
    2d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d70:	98 8b       	std	Y+16, r25	; 0x10
    2d72:	8f 87       	std	Y+15, r24	; 0x0f
    2d74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d76:	98 89       	ldd	r25, Y+16	; 0x10
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <LCD_displayCharacter+0x2d6>
    2d7c:	98 8b       	std	Y+16, r25	; 0x10
    2d7e:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(DATA_PORT_ID,DATA_PORT_FRIST_PIN+3,GET_BIT(data,3));

#endif

	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_LOW);
    2d80:	82 e0       	ldi	r24, 0x02	; 2
    2d82:	61 e0       	ldi	r22, 0x01	; 1
    2d84:	40 e0       	ldi	r20, 0x00	; 0
    2d86:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <GPIO_writePin>
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	a0 e8       	ldi	r26, 0x80	; 128
    2d90:	bf e3       	ldi	r27, 0x3F	; 63
    2d92:	8b 87       	std	Y+11, r24	; 0x0b
    2d94:	9c 87       	std	Y+12, r25	; 0x0c
    2d96:	ad 87       	std	Y+13, r26	; 0x0d
    2d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	4a ef       	ldi	r20, 0xFA	; 250
    2da8:	54 e4       	ldi	r21, 0x44	; 68
    2daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dae:	dc 01       	movw	r26, r24
    2db0:	cb 01       	movw	r24, r22
    2db2:	8f 83       	std	Y+7, r24	; 0x07
    2db4:	98 87       	std	Y+8, r25	; 0x08
    2db6:	a9 87       	std	Y+9, r26	; 0x09
    2db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dba:	6f 81       	ldd	r22, Y+7	; 0x07
    2dbc:	78 85       	ldd	r23, Y+8	; 0x08
    2dbe:	89 85       	ldd	r24, Y+9	; 0x09
    2dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	40 e8       	ldi	r20, 0x80	; 128
    2dc8:	5f e3       	ldi	r21, 0x3F	; 63
    2dca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dce:	88 23       	and	r24, r24
    2dd0:	2c f4       	brge	.+10     	; 0x2ddc <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2dd2:	81 e0       	ldi	r24, 0x01	; 1
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	3f c0       	rjmp	.+126    	; 0x2e5a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dde:	78 85       	ldd	r23, Y+8	; 0x08
    2de0:	89 85       	ldd	r24, Y+9	; 0x09
    2de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	3f ef       	ldi	r19, 0xFF	; 255
    2de8:	4f e7       	ldi	r20, 0x7F	; 127
    2dea:	57 e4       	ldi	r21, 0x47	; 71
    2dec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df0:	18 16       	cp	r1, r24
    2df2:	4c f5       	brge	.+82     	; 0x2e46 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e2       	ldi	r20, 0x20	; 32
    2e02:	51 e4       	ldi	r21, 0x41	; 65
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	bc 01       	movw	r22, r24
    2e0e:	cd 01       	movw	r24, r26
    2e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e14:	dc 01       	movw	r26, r24
    2e16:	cb 01       	movw	r24, r22
    2e18:	9e 83       	std	Y+6, r25	; 0x06
    2e1a:	8d 83       	std	Y+5, r24	; 0x05
    2e1c:	0f c0       	rjmp	.+30     	; 0x2e3c <LCD_displayCharacter+0x39a>
    2e1e:	88 ec       	ldi	r24, 0xC8	; 200
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	9c 83       	std	Y+4, r25	; 0x04
    2e24:	8b 83       	std	Y+3, r24	; 0x03
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	f1 f7       	brne	.-4      	; 0x2e2a <LCD_displayCharacter+0x388>
    2e2e:	9c 83       	std	Y+4, r25	; 0x04
    2e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	9e 83       	std	Y+6, r25	; 0x06
    2e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	69 f7       	brne	.-38     	; 0x2e1e <LCD_displayCharacter+0x37c>
    2e44:	14 c0       	rjmp	.+40     	; 0x2e6e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e46:	6f 81       	ldd	r22, Y+7	; 0x07
    2e48:	78 85       	ldd	r23, Y+8	; 0x08
    2e4a:	89 85       	ldd	r24, Y+9	; 0x09
    2e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9e 83       	std	Y+6, r25	; 0x06
    2e58:	8d 83       	std	Y+5, r24	; 0x05
    2e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e5e:	9a 83       	std	Y+2, r25	; 0x02
    2e60:	89 83       	std	Y+1, r24	; 0x01
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	f1 f7       	brne	.-4      	; 0x2e66 <LCD_displayCharacter+0x3c4>
    2e6a:	9a 83       	std	Y+2, r25	; 0x02
    2e6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2e6e:	e9 96       	adiw	r28, 0x39	; 57
    2e70:	0f b6       	in	r0, 0x3f	; 63
    2e72:	f8 94       	cli
    2e74:	de bf       	out	0x3e, r29	; 62
    2e76:	0f be       	out	0x3f, r0	; 63
    2e78:	cd bf       	out	0x3d, r28	; 61
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <LCD_displayString>:

void LCD_displayString(const char* str){
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <LCD_displayString+0x6>
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <LCD_displayString+0x8>
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	9c 83       	std	Y+4, r25	; 0x04
    2e8e:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;str[i]!='\0';i++)
    2e90:	1a 82       	std	Y+2, r1	; 0x02
    2e92:	19 82       	std	Y+1, r1	; 0x01
    2e94:	0f c0       	rjmp	.+30     	; 0x2eb4 <LCD_displayString+0x34>
	{
		LCD_displayCharacter(str[i]);
    2e96:	29 81       	ldd	r18, Y+1	; 0x01
    2e98:	3a 81       	ldd	r19, Y+2	; 0x02
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e2 0f       	add	r30, r18
    2ea2:	f3 1f       	adc	r31, r19
    2ea4:	80 81       	ld	r24, Z
    2ea6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <LCD_displayCharacter>

}

void LCD_displayString(const char* str){

	for(int i=0;str[i]!='\0';i++)
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	9a 81       	ldd	r25, Y+2	; 0x02
    2eae:	01 96       	adiw	r24, 0x01	; 1
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	29 81       	ldd	r18, Y+1	; 0x01
    2eb6:	3a 81       	ldd	r19, Y+2	; 0x02
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	9c 81       	ldd	r25, Y+4	; 0x04
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	e2 0f       	add	r30, r18
    2ec0:	f3 1f       	adc	r31, r19
    2ec2:	80 81       	ld	r24, Z
    2ec4:	88 23       	and	r24, r24
    2ec6:	39 f7       	brne	.-50     	; 0x2e96 <LCD_displayString+0x16>
	{
		LCD_displayCharacter(str[i]);
	}

}
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row, uint8 col){
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <LCD_moveCursor+0x6>
    2edc:	00 d0       	rcall	.+0      	; 0x2ede <LCD_moveCursor+0x8>
    2ede:	0f 92       	push	r0
    2ee0:	cd b7       	in	r28, 0x3d	; 61
    2ee2:	de b7       	in	r29, 0x3e	; 62
    2ee4:	8a 83       	std	Y+2, r24	; 0x02
    2ee6:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LCD_address;

	switch(row){
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	3d 83       	std	Y+5, r19	; 0x05
    2ef0:	2c 83       	std	Y+4, r18	; 0x04
    2ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef6:	81 30       	cpi	r24, 0x01	; 1
    2ef8:	91 05       	cpc	r25, r1
    2efa:	c1 f0       	breq	.+48     	; 0x2f2c <LCD_moveCursor+0x56>
    2efc:	2c 81       	ldd	r18, Y+4	; 0x04
    2efe:	3d 81       	ldd	r19, Y+5	; 0x05
    2f00:	22 30       	cpi	r18, 0x02	; 2
    2f02:	31 05       	cpc	r19, r1
    2f04:	2c f4       	brge	.+10     	; 0x2f10 <LCD_moveCursor+0x3a>
    2f06:	8c 81       	ldd	r24, Y+4	; 0x04
    2f08:	9d 81       	ldd	r25, Y+5	; 0x05
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	61 f0       	breq	.+24     	; 0x2f26 <LCD_moveCursor+0x50>
    2f0e:	19 c0       	rjmp	.+50     	; 0x2f42 <LCD_moveCursor+0x6c>
    2f10:	2c 81       	ldd	r18, Y+4	; 0x04
    2f12:	3d 81       	ldd	r19, Y+5	; 0x05
    2f14:	22 30       	cpi	r18, 0x02	; 2
    2f16:	31 05       	cpc	r19, r1
    2f18:	69 f0       	breq	.+26     	; 0x2f34 <LCD_moveCursor+0x5e>
    2f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f1e:	83 30       	cpi	r24, 0x03	; 3
    2f20:	91 05       	cpc	r25, r1
    2f22:	61 f0       	breq	.+24     	; 0x2f3c <LCD_moveCursor+0x66>
    2f24:	0e c0       	rjmp	.+28     	; 0x2f42 <LCD_moveCursor+0x6c>
	case 0:
		LCD_address = 0x00+col;
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	89 83       	std	Y+1, r24	; 0x01
    2f2a:	0b c0       	rjmp	.+22     	; 0x2f42 <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_address = 0x40+col;
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	80 5c       	subi	r24, 0xC0	; 192
    2f30:	89 83       	std	Y+1, r24	; 0x01
    2f32:	07 c0       	rjmp	.+14     	; 0x2f42 <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_address = 0x10+col;
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	80 5f       	subi	r24, 0xF0	; 240
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	03 c0       	rjmp	.+6      	; 0x2f42 <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_address = 0x50+col;
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	80 5b       	subi	r24, 0xB0	; 176
    2f40:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	LCD_sendCommand(LCD_address | LCD_SET_CURSOR_LOCATION);
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	80 68       	ori	r24, 0x80	; 128
    2f46:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_sendCommand>

}
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col, const char* str){
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	00 d0       	rcall	.+0      	; 0x2f60 <LCD_displayStringRowColumn+0x6>
    2f60:	00 d0       	rcall	.+0      	; 0x2f62 <LCD_displayStringRowColumn+0x8>
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	89 83       	std	Y+1, r24	; 0x01
    2f68:	6a 83       	std	Y+2, r22	; 0x02
    2f6a:	5c 83       	std	Y+4, r21	; 0x04
    2f6c:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor(row,col);
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	6a 81       	ldd	r22, Y+2	; 0x02
    2f72:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <LCD_moveCursor>
	LCD_displayString(str);
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	9c 81       	ldd	r25, Y+4	; 0x04
    2f7a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>

}
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <LCD_integerToString>:

void LCD_integerToString(int data){
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	62 97       	sbiw	r28, 0x12	; 18
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    2fa0:	9a 8b       	std	Y+18, r25	; 0x12
    2fa2:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(data,buff,10);
    2fa4:	89 89       	ldd	r24, Y+17	; 0x11
    2fa6:	9a 89       	ldd	r25, Y+18	; 0x12
    2fa8:	9e 01       	movw	r18, r28
    2faa:	2f 5f       	subi	r18, 0xFF	; 255
    2fac:	3f 4f       	sbci	r19, 0xFF	; 255
    2fae:	b9 01       	movw	r22, r18
    2fb0:	4a e0       	ldi	r20, 0x0A	; 10
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <itoa>
	LCD_displayString(buff);
    2fb8:	ce 01       	movw	r24, r28
    2fba:	01 96       	adiw	r24, 0x01	; 1
    2fbc:	0e 94 40 17 	call	0x2e80	; 0x2e80 <LCD_displayString>

}
    2fc0:	62 96       	adiw	r28, 0x12	; 18
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	08 95       	ret

00002fd2 <LCD_clearScreen>:

void LCD_clearScreen(void){
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	0e 94 62 13 	call	0x26c4	; 0x26c4 <LCD_sendCommand>

}
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	08 95       	ret

00002fe6 <PWM_Timer0_Start>:
 */
#include "pmw.h"
#include "gpio.h"
#include "avr/io.h"

void PWM_Timer0_Start(uint8 duty_cycle){
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	00 d0       	rcall	.+0      	; 0x2fec <PWM_Timer0_Start+0x6>
    2fec:	0f 92       	push	r0
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    2ff2:	89 83       	std	Y+1, r24	; 0x01

	/*initialize TIMER0 with PMW*/
	TCCR0=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS02)|(1<<CS00);
    2ff4:	e3 e5       	ldi	r30, 0x53	; 83
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	8d e6       	ldi	r24, 0x6D	; 109
    2ffa:	80 83       	st	Z, r24
	TCNT0=0;
    2ffc:	e2 e5       	ldi	r30, 0x52	; 82
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	10 82       	st	Z, r1
	TIMSK|=(1<<OCIE0);
    3002:	a9 e5       	ldi	r26, 0x59	; 89
    3004:	b0 e0       	ldi	r27, 0x00	; 0
    3006:	e9 e5       	ldi	r30, 0x59	; 89
    3008:	f0 e0       	ldi	r31, 0x00	; 0
    300a:	80 81       	ld	r24, Z
    300c:	82 60       	ori	r24, 0x02	; 2
    300e:	8c 93       	st	X, r24

	/*CONFIGURE OC0/PB3 as output pin*/
	GPIO_setupPinDirection(PMW_OUTPUT_PORT_ID,PMW_OUTPUT_PIN_ID,PIN_OUTPUT);
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	63 e0       	ldi	r22, 0x03	; 3
    3014:	41 e0       	ldi	r20, 0x01	; 1
    3016:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <GPIO_setupPinDirection>

	/*use the function paramater to control duty cycle*/
	switch(duty_cycle){
    301a:	89 81       	ldd	r24, Y+1	; 0x01
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	3b 83       	std	Y+3, r19	; 0x03
    3022:	2a 83       	std	Y+2, r18	; 0x02
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	9b 81       	ldd	r25, Y+3	; 0x03
    3028:	82 33       	cpi	r24, 0x32	; 50
    302a:	91 05       	cpc	r25, r1
    302c:	19 f1       	breq	.+70     	; 0x3074 <PWM_Timer0_Start+0x8e>
    302e:	2a 81       	ldd	r18, Y+2	; 0x02
    3030:	3b 81       	ldd	r19, Y+3	; 0x03
    3032:	23 33       	cpi	r18, 0x33	; 51
    3034:	31 05       	cpc	r19, r1
    3036:	54 f4       	brge	.+20     	; 0x304c <PWM_Timer0_Start+0x66>
    3038:	8a 81       	ldd	r24, Y+2	; 0x02
    303a:	9b 81       	ldd	r25, Y+3	; 0x03
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	21 f1       	breq	.+72     	; 0x3088 <PWM_Timer0_Start+0xa2>
    3040:	2a 81       	ldd	r18, Y+2	; 0x02
    3042:	3b 81       	ldd	r19, Y+3	; 0x03
    3044:	29 31       	cpi	r18, 0x19	; 25
    3046:	31 05       	cpc	r19, r1
    3048:	d1 f0       	breq	.+52     	; 0x307e <PWM_Timer0_Start+0x98>
    304a:	21 c0       	rjmp	.+66     	; 0x308e <PWM_Timer0_Start+0xa8>
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	9b 81       	ldd	r25, Y+3	; 0x03
    3050:	8b 34       	cpi	r24, 0x4B	; 75
    3052:	91 05       	cpc	r25, r1
    3054:	51 f0       	breq	.+20     	; 0x306a <PWM_Timer0_Start+0x84>
    3056:	2a 81       	ldd	r18, Y+2	; 0x02
    3058:	3b 81       	ldd	r19, Y+3	; 0x03
    305a:	24 36       	cpi	r18, 0x64	; 100
    305c:	31 05       	cpc	r19, r1
    305e:	b9 f4       	brne	.+46     	; 0x308e <PWM_Timer0_Start+0xa8>
	case 100:
		OCR0=255;     /*100% OF 256*/
    3060:	ec e5       	ldi	r30, 0x5C	; 92
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	8f ef       	ldi	r24, 0xFF	; 255
    3066:	80 83       	st	Z, r24
    3068:	12 c0       	rjmp	.+36     	; 0x308e <PWM_Timer0_Start+0xa8>
		break;
	case 75:
		OCR0=192;     /*75% OF 256*/
    306a:	ec e5       	ldi	r30, 0x5C	; 92
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 ec       	ldi	r24, 0xC0	; 192
    3070:	80 83       	st	Z, r24
    3072:	0d c0       	rjmp	.+26     	; 0x308e <PWM_Timer0_Start+0xa8>
		break;
	case 50:
		OCR0=128;     /*50% OF 256*/
    3074:	ec e5       	ldi	r30, 0x5C	; 92
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 e8       	ldi	r24, 0x80	; 128
    307a:	80 83       	st	Z, r24
    307c:	08 c0       	rjmp	.+16     	; 0x308e <PWM_Timer0_Start+0xa8>
		break;
	case 25:
		OCR0=64;      /*25% OF 256*/
    307e:	ec e5       	ldi	r30, 0x5C	; 92
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 e4       	ldi	r24, 0x40	; 64
    3084:	80 83       	st	Z, r24
    3086:	03 c0       	rjmp	.+6      	; 0x308e <PWM_Timer0_Start+0xa8>
		break;
	case 0:
		OCR0=0;       /*0% OF 255*/
    3088:	ec e5       	ldi	r30, 0x5C	; 92
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	10 82       	st	Z, r1
		break;
	default:
		break;
	}
}
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <Timer_init>:
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer_init(const Timer_ConfigType * Config_Ptr) {
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <Timer_init+0x6>
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <Timer_init+0x8>
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	9a 83       	std	Y+2, r25	; 0x02
    30a8:	89 83       	std	Y+1, r24	; 0x01
    switch (Config_Ptr->timer_ID) {
    30aa:	e9 81       	ldd	r30, Y+1	; 0x01
    30ac:	fa 81       	ldd	r31, Y+2	; 0x02
    30ae:	84 81       	ldd	r24, Z+4	; 0x04
    30b0:	28 2f       	mov	r18, r24
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	3c 83       	std	Y+4, r19	; 0x04
    30b6:	2b 83       	std	Y+3, r18	; 0x03
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	9c 81       	ldd	r25, Y+4	; 0x04
    30bc:	81 30       	cpi	r24, 0x01	; 1
    30be:	91 05       	cpc	r25, r1
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <Timer_init+0x2a>
    30c2:	47 c0       	rjmp	.+142    	; 0x3152 <Timer_init+0xb8>
    30c4:	2b 81       	ldd	r18, Y+3	; 0x03
    30c6:	3c 81       	ldd	r19, Y+4	; 0x04
    30c8:	22 30       	cpi	r18, 0x02	; 2
    30ca:	31 05       	cpc	r19, r1
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <Timer_init+0x36>
    30ce:	85 c0       	rjmp	.+266    	; 0x31da <Timer_init+0x140>
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	09 f0       	breq	.+2      	; 0x30da <Timer_init+0x40>
    30d8:	bb c0       	rjmp	.+374    	; 0x3250 <Timer_init+0x1b6>
        case TIMER0:
            TCNT0 = Config_Ptr->timer_InitialValue; /* Set initial value */
    30da:	a2 e5       	ldi	r26, 0x52	; 82
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	e9 81       	ldd	r30, Y+1	; 0x01
    30e0:	fa 81       	ldd	r31, Y+2	; 0x02
    30e2:	80 81       	ld	r24, Z
    30e4:	91 81       	ldd	r25, Z+1	; 0x01
    30e6:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    30e8:	e9 81       	ldd	r30, Y+1	; 0x01
    30ea:	fa 81       	ldd	r31, Y+2	; 0x02
    30ec:	86 81       	ldd	r24, Z+6	; 0x06
    30ee:	88 23       	and	r24, r24
    30f0:	61 f4       	brne	.+24     	; 0x310a <Timer_init+0x70>
                TCCR0 = (1 << FOC0); /* Normal mode */
    30f2:	e3 e5       	ldi	r30, 0x53	; 83
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 e8       	ldi	r24, 0x80	; 128
    30f8:	80 83       	st	Z, r24
                TIMSK |= (1 << TOIE0); /* Enable overflow interrupt */
    30fa:	a9 e5       	ldi	r26, 0x59	; 89
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	e9 e5       	ldi	r30, 0x59	; 89
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	81 60       	ori	r24, 0x01	; 1
    3106:	8c 93       	st	X, r24
    3108:	17 c0       	rjmp	.+46     	; 0x3138 <Timer_init+0x9e>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    310a:	e9 81       	ldd	r30, Y+1	; 0x01
    310c:	fa 81       	ldd	r31, Y+2	; 0x02
    310e:	86 81       	ldd	r24, Z+6	; 0x06
    3110:	81 30       	cpi	r24, 0x01	; 1
    3112:	91 f4       	brne	.+36     	; 0x3138 <Timer_init+0x9e>
                TCCR0 = (1 << FOC0) | (1 << WGM01); /* CTC mode */
    3114:	e3 e5       	ldi	r30, 0x53	; 83
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	88 e8       	ldi	r24, 0x88	; 136
    311a:	80 83       	st	Z, r24
                OCR0 = Config_Ptr->timer_compare_MatchValue; /* Set compare value */
    311c:	ac e5       	ldi	r26, 0x5C	; 92
    311e:	b0 e0       	ldi	r27, 0x00	; 0
    3120:	e9 81       	ldd	r30, Y+1	; 0x01
    3122:	fa 81       	ldd	r31, Y+2	; 0x02
    3124:	82 81       	ldd	r24, Z+2	; 0x02
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE0); /* Enable compare interrupt */
    312a:	a9 e5       	ldi	r26, 0x59	; 89
    312c:	b0 e0       	ldi	r27, 0x00	; 0
    312e:	e9 e5       	ldi	r30, 0x59	; 89
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	82 60       	ori	r24, 0x02	; 2
    3136:	8c 93       	st	X, r24
            }
            TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock); /* Set clock */
    3138:	a3 e5       	ldi	r26, 0x53	; 83
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e3 e5       	ldi	r30, 0x53	; 83
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	98 2f       	mov	r25, r24
    3144:	98 7f       	andi	r25, 0xF8	; 248
    3146:	e9 81       	ldd	r30, Y+1	; 0x01
    3148:	fa 81       	ldd	r31, Y+2	; 0x02
    314a:	85 81       	ldd	r24, Z+5	; 0x05
    314c:	89 2b       	or	r24, r25
    314e:	8c 93       	st	X, r24
    3150:	7f c0       	rjmp	.+254    	; 0x3250 <Timer_init+0x1b6>
            break;

        case TIMER1:
            TCNT1 = Config_Ptr->timer_InitialValue; /* Set initial value */
    3152:	ac e4       	ldi	r26, 0x4C	; 76
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	e9 81       	ldd	r30, Y+1	; 0x01
    3158:	fa 81       	ldd	r31, Y+2	; 0x02
    315a:	80 81       	ld	r24, Z
    315c:	91 81       	ldd	r25, Z+1	; 0x01
    315e:	11 96       	adiw	r26, 0x01	; 1
    3160:	9c 93       	st	X, r25
    3162:	8e 93       	st	-X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    3164:	e9 81       	ldd	r30, Y+1	; 0x01
    3166:	fa 81       	ldd	r31, Y+2	; 0x02
    3168:	86 81       	ldd	r24, Z+6	; 0x06
    316a:	88 23       	and	r24, r24
    316c:	61 f4       	brne	.+24     	; 0x3186 <Timer_init+0xec>
                TCCR1A = (1 << FOC1A); /* Normal mode */
    316e:	ef e4       	ldi	r30, 0x4F	; 79
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	88 e0       	ldi	r24, 0x08	; 8
    3174:	80 83       	st	Z, r24
                TIMSK |= (1 << TOIE1); /* Enable overflow interrupt */
    3176:	a9 e5       	ldi	r26, 0x59	; 89
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	e9 e5       	ldi	r30, 0x59	; 89
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	84 60       	ori	r24, 0x04	; 4
    3182:	8c 93       	st	X, r24
    3184:	1d c0       	rjmp	.+58     	; 0x31c0 <Timer_init+0x126>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    3186:	e9 81       	ldd	r30, Y+1	; 0x01
    3188:	fa 81       	ldd	r31, Y+2	; 0x02
    318a:	86 81       	ldd	r24, Z+6	; 0x06
    318c:	81 30       	cpi	r24, 0x01	; 1
    318e:	c1 f4       	brne	.+48     	; 0x31c0 <Timer_init+0x126>
                TCCR1A = (1 << FOC1A); /* CTC mode */
    3190:	ef e4       	ldi	r30, 0x4F	; 79
    3192:	f0 e0       	ldi	r31, 0x00	; 0
    3194:	88 e0       	ldi	r24, 0x08	; 8
    3196:	80 83       	st	Z, r24
                TCCR1B = (1 << WGM12);
    3198:	ee e4       	ldi	r30, 0x4E	; 78
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	88 e0       	ldi	r24, 0x08	; 8
    319e:	80 83       	st	Z, r24
                OCR1A = Config_Ptr->timer_compare_MatchValue; /* Set compare value */
    31a0:	aa e4       	ldi	r26, 0x4A	; 74
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e9 81       	ldd	r30, Y+1	; 0x01
    31a6:	fa 81       	ldd	r31, Y+2	; 0x02
    31a8:	82 81       	ldd	r24, Z+2	; 0x02
    31aa:	93 81       	ldd	r25, Z+3	; 0x03
    31ac:	11 96       	adiw	r26, 0x01	; 1
    31ae:	9c 93       	st	X, r25
    31b0:	8e 93       	st	-X, r24
                TIMSK |= (1 << OCIE1A); /* Enable compare interrupt */
    31b2:	a9 e5       	ldi	r26, 0x59	; 89
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	e9 e5       	ldi	r30, 0x59	; 89
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	80 61       	ori	r24, 0x10	; 16
    31be:	8c 93       	st	X, r24
            }
            TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock); /* Set clock */
    31c0:	ae e4       	ldi	r26, 0x4E	; 78
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	ee e4       	ldi	r30, 0x4E	; 78
    31c6:	f0 e0       	ldi	r31, 0x00	; 0
    31c8:	80 81       	ld	r24, Z
    31ca:	98 2f       	mov	r25, r24
    31cc:	98 7f       	andi	r25, 0xF8	; 248
    31ce:	e9 81       	ldd	r30, Y+1	; 0x01
    31d0:	fa 81       	ldd	r31, Y+2	; 0x02
    31d2:	85 81       	ldd	r24, Z+5	; 0x05
    31d4:	89 2b       	or	r24, r25
    31d6:	8c 93       	st	X, r24
    31d8:	3b c0       	rjmp	.+118    	; 0x3250 <Timer_init+0x1b6>
            break;

        case TIMER2:
            TCNT2 = Config_Ptr->timer_InitialValue; /* Set initial value */
    31da:	a4 e4       	ldi	r26, 0x44	; 68
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e9 81       	ldd	r30, Y+1	; 0x01
    31e0:	fa 81       	ldd	r31, Y+2	; 0x02
    31e2:	80 81       	ld	r24, Z
    31e4:	91 81       	ldd	r25, Z+1	; 0x01
    31e6:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    31e8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ea:	fa 81       	ldd	r31, Y+2	; 0x02
    31ec:	86 81       	ldd	r24, Z+6	; 0x06
    31ee:	88 23       	and	r24, r24
    31f0:	61 f4       	brne	.+24     	; 0x320a <Timer_init+0x170>
                TCCR2 = (1 << FOC2); /* Normal mode */
    31f2:	e5 e4       	ldi	r30, 0x45	; 69
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 e8       	ldi	r24, 0x80	; 128
    31f8:	80 83       	st	Z, r24
                TIMSK |= (1 << TOIE2); /* Enable overflow interrupt */
    31fa:	a9 e5       	ldi	r26, 0x59	; 89
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e9 e5       	ldi	r30, 0x59	; 89
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	80 64       	ori	r24, 0x40	; 64
    3206:	8c 93       	st	X, r24
    3208:	17 c0       	rjmp	.+46     	; 0x3238 <Timer_init+0x19e>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    320a:	e9 81       	ldd	r30, Y+1	; 0x01
    320c:	fa 81       	ldd	r31, Y+2	; 0x02
    320e:	86 81       	ldd	r24, Z+6	; 0x06
    3210:	81 30       	cpi	r24, 0x01	; 1
    3212:	91 f4       	brne	.+36     	; 0x3238 <Timer_init+0x19e>
                TCCR2 = (1 << FOC2) | (1 << WGM21); /* CTC mode */
    3214:	e5 e4       	ldi	r30, 0x45	; 69
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	88 e8       	ldi	r24, 0x88	; 136
    321a:	80 83       	st	Z, r24
                OCR2 = Config_Ptr->timer_compare_MatchValue; /* Set compare value */
    321c:	a3 e4       	ldi	r26, 0x43	; 67
    321e:	b0 e0       	ldi	r27, 0x00	; 0
    3220:	e9 81       	ldd	r30, Y+1	; 0x01
    3222:	fa 81       	ldd	r31, Y+2	; 0x02
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	93 81       	ldd	r25, Z+3	; 0x03
    3228:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE2); /* Enable compare interrupt */
    322a:	a9 e5       	ldi	r26, 0x59	; 89
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e9 e5       	ldi	r30, 0x59	; 89
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	80 68       	ori	r24, 0x80	; 128
    3236:	8c 93       	st	X, r24
            }
            TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock); /* Set clock */
    3238:	a5 e4       	ldi	r26, 0x45	; 69
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e5 e4       	ldi	r30, 0x45	; 69
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	98 2f       	mov	r25, r24
    3244:	98 7f       	andi	r25, 0xF8	; 248
    3246:	e9 81       	ldd	r30, Y+1	; 0x01
    3248:	fa 81       	ldd	r31, Y+2	; 0x02
    324a:	85 81       	ldd	r24, Z+5	; 0x05
    324c:	89 2b       	or	r24, r25
    324e:	8c 93       	st	X, r24
            break;
    }
}
    3250:	0f 90       	pop	r0
    3252:	0f 90       	pop	r0
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	cf 91       	pop	r28
    325a:	df 91       	pop	r29
    325c:	08 95       	ret

0000325e <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	00 d0       	rcall	.+0      	; 0x3264 <Timer_deInit+0x6>
    3264:	0f 92       	push	r0
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	28 2f       	mov	r18, r24
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	3b 83       	std	Y+3, r19	; 0x03
    3274:	2a 83       	std	Y+2, r18	; 0x02
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	9b 81       	ldd	r25, Y+3	; 0x03
    327a:	81 30       	cpi	r24, 0x01	; 1
    327c:	91 05       	cpc	r25, r1
    327e:	a1 f0       	breq	.+40     	; 0x32a8 <Timer_deInit+0x4a>
    3280:	2a 81       	ldd	r18, Y+2	; 0x02
    3282:	3b 81       	ldd	r19, Y+3	; 0x03
    3284:	22 30       	cpi	r18, 0x02	; 2
    3286:	31 05       	cpc	r19, r1
    3288:	e9 f0       	breq	.+58     	; 0x32c4 <Timer_deInit+0x66>
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	9b 81       	ldd	r25, Y+3	; 0x03
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	19 f5       	brne	.+70     	; 0x32d8 <Timer_deInit+0x7a>
        case TIMER0:
            TCCR0 = 0x00;
    3292:	e3 e5       	ldi	r30, 0x53	; 83
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));
    3298:	a9 e5       	ldi	r26, 0x59	; 89
    329a:	b0 e0       	ldi	r27, 0x00	; 0
    329c:	e9 e5       	ldi	r30, 0x59	; 89
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	8c 7f       	andi	r24, 0xFC	; 252
    32a4:	8c 93       	st	X, r24
    32a6:	18 c0       	rjmp	.+48     	; 0x32d8 <Timer_deInit+0x7a>
            break;

        case TIMER1:
            TCCR1A = 0x00;
    32a8:	ef e4       	ldi	r30, 0x4F	; 79
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	10 82       	st	Z, r1
            TCCR1B = 0x00;
    32ae:	ee e4       	ldi	r30, 0x4E	; 78
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));
    32b4:	a9 e5       	ldi	r26, 0x59	; 89
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	e9 e5       	ldi	r30, 0x59	; 89
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	8b 7e       	andi	r24, 0xEB	; 235
    32c0:	8c 93       	st	X, r24
    32c2:	0a c0       	rjmp	.+20     	; 0x32d8 <Timer_deInit+0x7a>
            break;

        case TIMER2:
            TCCR2 = 0x00;
    32c4:	e5 e4       	ldi	r30, 0x45	; 69
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE2) | (1 << OCIE2));
    32ca:	a9 e5       	ldi	r26, 0x59	; 89
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e9 e5       	ldi	r30, 0x59	; 89
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	8f 73       	andi	r24, 0x3F	; 63
    32d6:	8c 93       	st	X, r24
            break;
    }
}
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	0f 90       	pop	r0
    32de:	cf 91       	pop	r28
    32e0:	df 91       	pop	r29
    32e2:	08 95       	ret

000032e4 <Timer_setCallBack>:

void Timer_setCallBack(void (*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    32e4:	df 93       	push	r29
    32e6:	cf 93       	push	r28
    32e8:	00 d0       	rcall	.+0      	; 0x32ea <Timer_setCallBack+0x6>
    32ea:	00 d0       	rcall	.+0      	; 0x32ec <Timer_setCallBack+0x8>
    32ec:	0f 92       	push	r0
    32ee:	cd b7       	in	r28, 0x3d	; 61
    32f0:	de b7       	in	r29, 0x3e	; 62
    32f2:	9a 83       	std	Y+2, r25	; 0x02
    32f4:	89 83       	std	Y+1, r24	; 0x01
    32f6:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    32f8:	8b 81       	ldd	r24, Y+3	; 0x03
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	3d 83       	std	Y+5, r19	; 0x05
    3300:	2c 83       	std	Y+4, r18	; 0x04
    3302:	8c 81       	ldd	r24, Y+4	; 0x04
    3304:	9d 81       	ldd	r25, Y+5	; 0x05
    3306:	81 30       	cpi	r24, 0x01	; 1
    3308:	91 05       	cpc	r25, r1
    330a:	81 f0       	breq	.+32     	; 0x332c <Timer_setCallBack+0x48>
    330c:	2c 81       	ldd	r18, Y+4	; 0x04
    330e:	3d 81       	ldd	r19, Y+5	; 0x05
    3310:	22 30       	cpi	r18, 0x02	; 2
    3312:	31 05       	cpc	r19, r1
    3314:	91 f0       	breq	.+36     	; 0x333a <Timer_setCallBack+0x56>
    3316:	8c 81       	ldd	r24, Y+4	; 0x04
    3318:	9d 81       	ldd	r25, Y+5	; 0x05
    331a:	00 97       	sbiw	r24, 0x00	; 0
    331c:	a1 f4       	brne	.+40     	; 0x3346 <Timer_setCallBack+0x62>
        case TIMER0:
            g_callBackPtr0 = a_ptr;
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	90 93 70 01 	sts	0x0170, r25
    3326:	80 93 6f 01 	sts	0x016F, r24
    332a:	0d c0       	rjmp	.+26     	; 0x3346 <Timer_setCallBack+0x62>
            break;

        case TIMER1:
            g_callBackPtr1_OVF = a_ptr;
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	9a 81       	ldd	r25, Y+2	; 0x02
    3330:	90 93 72 01 	sts	0x0172, r25
    3334:	80 93 71 01 	sts	0x0171, r24
    3338:	06 c0       	rjmp	.+12     	; 0x3346 <Timer_setCallBack+0x62>
            break;

        case TIMER2:
            g_callBackPtr2 = a_ptr;
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	90 93 76 01 	sts	0x0176, r25
    3342:	80 93 75 01 	sts	0x0175, r24
            break;
    }
}
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <__vector_11>:

/*******************************************************************************
 *                      Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect) {
    3356:	1f 92       	push	r1
    3358:	0f 92       	push	r0
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	0f 92       	push	r0
    335e:	11 24       	eor	r1, r1
    3360:	2f 93       	push	r18
    3362:	3f 93       	push	r19
    3364:	4f 93       	push	r20
    3366:	5f 93       	push	r21
    3368:	6f 93       	push	r22
    336a:	7f 93       	push	r23
    336c:	8f 93       	push	r24
    336e:	9f 93       	push	r25
    3370:	af 93       	push	r26
    3372:	bf 93       	push	r27
    3374:	ef 93       	push	r30
    3376:	ff 93       	push	r31
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	cd b7       	in	r28, 0x3d	; 61
    337e:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr0 != NULL_PTR) {
    3380:	80 91 6f 01 	lds	r24, 0x016F
    3384:	90 91 70 01 	lds	r25, 0x0170
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	29 f0       	breq	.+10     	; 0x3396 <__vector_11+0x40>
        (*g_callBackPtr0)();
    338c:	e0 91 6f 01 	lds	r30, 0x016F
    3390:	f0 91 70 01 	lds	r31, 0x0170
    3394:	09 95       	icall
    }
}
    3396:	cf 91       	pop	r28
    3398:	df 91       	pop	r29
    339a:	ff 91       	pop	r31
    339c:	ef 91       	pop	r30
    339e:	bf 91       	pop	r27
    33a0:	af 91       	pop	r26
    33a2:	9f 91       	pop	r25
    33a4:	8f 91       	pop	r24
    33a6:	7f 91       	pop	r23
    33a8:	6f 91       	pop	r22
    33aa:	5f 91       	pop	r21
    33ac:	4f 91       	pop	r20
    33ae:	3f 91       	pop	r19
    33b0:	2f 91       	pop	r18
    33b2:	0f 90       	pop	r0
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	0f 90       	pop	r0
    33b8:	1f 90       	pop	r1
    33ba:	18 95       	reti

000033bc <__vector_10>:

ISR(TIMER0_COMP_vect) {
    33bc:	1f 92       	push	r1
    33be:	0f 92       	push	r0
    33c0:	0f b6       	in	r0, 0x3f	; 63
    33c2:	0f 92       	push	r0
    33c4:	11 24       	eor	r1, r1
    33c6:	2f 93       	push	r18
    33c8:	3f 93       	push	r19
    33ca:	4f 93       	push	r20
    33cc:	5f 93       	push	r21
    33ce:	6f 93       	push	r22
    33d0:	7f 93       	push	r23
    33d2:	8f 93       	push	r24
    33d4:	9f 93       	push	r25
    33d6:	af 93       	push	r26
    33d8:	bf 93       	push	r27
    33da:	ef 93       	push	r30
    33dc:	ff 93       	push	r31
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr0 != NULL_PTR) {
    33e6:	80 91 6f 01 	lds	r24, 0x016F
    33ea:	90 91 70 01 	lds	r25, 0x0170
    33ee:	00 97       	sbiw	r24, 0x00	; 0
    33f0:	29 f0       	breq	.+10     	; 0x33fc <__vector_10+0x40>
        (*g_callBackPtr0)();
    33f2:	e0 91 6f 01 	lds	r30, 0x016F
    33f6:	f0 91 70 01 	lds	r31, 0x0170
    33fa:	09 95       	icall
    }
}
    33fc:	cf 91       	pop	r28
    33fe:	df 91       	pop	r29
    3400:	ff 91       	pop	r31
    3402:	ef 91       	pop	r30
    3404:	bf 91       	pop	r27
    3406:	af 91       	pop	r26
    3408:	9f 91       	pop	r25
    340a:	8f 91       	pop	r24
    340c:	7f 91       	pop	r23
    340e:	6f 91       	pop	r22
    3410:	5f 91       	pop	r21
    3412:	4f 91       	pop	r20
    3414:	3f 91       	pop	r19
    3416:	2f 91       	pop	r18
    3418:	0f 90       	pop	r0
    341a:	0f be       	out	0x3f, r0	; 63
    341c:	0f 90       	pop	r0
    341e:	1f 90       	pop	r1
    3420:	18 95       	reti

00003422 <__vector_9>:

ISR(TIMER1_OVF_vect) {
    3422:	1f 92       	push	r1
    3424:	0f 92       	push	r0
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	0f 92       	push	r0
    342a:	11 24       	eor	r1, r1
    342c:	2f 93       	push	r18
    342e:	3f 93       	push	r19
    3430:	4f 93       	push	r20
    3432:	5f 93       	push	r21
    3434:	6f 93       	push	r22
    3436:	7f 93       	push	r23
    3438:	8f 93       	push	r24
    343a:	9f 93       	push	r25
    343c:	af 93       	push	r26
    343e:	bf 93       	push	r27
    3440:	ef 93       	push	r30
    3442:	ff 93       	push	r31
    3444:	df 93       	push	r29
    3446:	cf 93       	push	r28
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr1_OVF != NULL_PTR) {
    344c:	80 91 71 01 	lds	r24, 0x0171
    3450:	90 91 72 01 	lds	r25, 0x0172
    3454:	00 97       	sbiw	r24, 0x00	; 0
    3456:	29 f0       	breq	.+10     	; 0x3462 <__vector_9+0x40>
        (*g_callBackPtr1_OVF)();
    3458:	e0 91 71 01 	lds	r30, 0x0171
    345c:	f0 91 72 01 	lds	r31, 0x0172
    3460:	09 95       	icall
    }
}
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	ff 91       	pop	r31
    3468:	ef 91       	pop	r30
    346a:	bf 91       	pop	r27
    346c:	af 91       	pop	r26
    346e:	9f 91       	pop	r25
    3470:	8f 91       	pop	r24
    3472:	7f 91       	pop	r23
    3474:	6f 91       	pop	r22
    3476:	5f 91       	pop	r21
    3478:	4f 91       	pop	r20
    347a:	3f 91       	pop	r19
    347c:	2f 91       	pop	r18
    347e:	0f 90       	pop	r0
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	0f 90       	pop	r0
    3484:	1f 90       	pop	r1
    3486:	18 95       	reti

00003488 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    3488:	1f 92       	push	r1
    348a:	0f 92       	push	r0
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	0f 92       	push	r0
    3490:	11 24       	eor	r1, r1
    3492:	2f 93       	push	r18
    3494:	3f 93       	push	r19
    3496:	4f 93       	push	r20
    3498:	5f 93       	push	r21
    349a:	6f 93       	push	r22
    349c:	7f 93       	push	r23
    349e:	8f 93       	push	r24
    34a0:	9f 93       	push	r25
    34a2:	af 93       	push	r26
    34a4:	bf 93       	push	r27
    34a6:	ef 93       	push	r30
    34a8:	ff 93       	push	r31
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr1_CMP != NULL_PTR) {
    34b2:	80 91 73 01 	lds	r24, 0x0173
    34b6:	90 91 74 01 	lds	r25, 0x0174
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	29 f0       	breq	.+10     	; 0x34c8 <__vector_7+0x40>
        (*g_callBackPtr1_CMP)();
    34be:	e0 91 73 01 	lds	r30, 0x0173
    34c2:	f0 91 74 01 	lds	r31, 0x0174
    34c6:	09 95       	icall
    }
}
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	ff 91       	pop	r31
    34ce:	ef 91       	pop	r30
    34d0:	bf 91       	pop	r27
    34d2:	af 91       	pop	r26
    34d4:	9f 91       	pop	r25
    34d6:	8f 91       	pop	r24
    34d8:	7f 91       	pop	r23
    34da:	6f 91       	pop	r22
    34dc:	5f 91       	pop	r21
    34de:	4f 91       	pop	r20
    34e0:	3f 91       	pop	r19
    34e2:	2f 91       	pop	r18
    34e4:	0f 90       	pop	r0
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	0f 90       	pop	r0
    34ea:	1f 90       	pop	r1
    34ec:	18 95       	reti

000034ee <__vector_5>:

ISR(TIMER2_OVF_vect) {
    34ee:	1f 92       	push	r1
    34f0:	0f 92       	push	r0
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	0f 92       	push	r0
    34f6:	11 24       	eor	r1, r1
    34f8:	2f 93       	push	r18
    34fa:	3f 93       	push	r19
    34fc:	4f 93       	push	r20
    34fe:	5f 93       	push	r21
    3500:	6f 93       	push	r22
    3502:	7f 93       	push	r23
    3504:	8f 93       	push	r24
    3506:	9f 93       	push	r25
    3508:	af 93       	push	r26
    350a:	bf 93       	push	r27
    350c:	ef 93       	push	r30
    350e:	ff 93       	push	r31
    3510:	df 93       	push	r29
    3512:	cf 93       	push	r28
    3514:	cd b7       	in	r28, 0x3d	; 61
    3516:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr2 != NULL_PTR) {
    3518:	80 91 75 01 	lds	r24, 0x0175
    351c:	90 91 76 01 	lds	r25, 0x0176
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	29 f0       	breq	.+10     	; 0x352e <__vector_5+0x40>
        (*g_callBackPtr2)();
    3524:	e0 91 75 01 	lds	r30, 0x0175
    3528:	f0 91 76 01 	lds	r31, 0x0176
    352c:	09 95       	icall
    }
}
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	ff 91       	pop	r31
    3534:	ef 91       	pop	r30
    3536:	bf 91       	pop	r27
    3538:	af 91       	pop	r26
    353a:	9f 91       	pop	r25
    353c:	8f 91       	pop	r24
    353e:	7f 91       	pop	r23
    3540:	6f 91       	pop	r22
    3542:	5f 91       	pop	r21
    3544:	4f 91       	pop	r20
    3546:	3f 91       	pop	r19
    3548:	2f 91       	pop	r18
    354a:	0f 90       	pop	r0
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	0f 90       	pop	r0
    3550:	1f 90       	pop	r1
    3552:	18 95       	reti

00003554 <__vector_4>:

ISR(TIMER2_COMP_vect) {
    3554:	1f 92       	push	r1
    3556:	0f 92       	push	r0
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	0f 92       	push	r0
    355c:	11 24       	eor	r1, r1
    355e:	2f 93       	push	r18
    3560:	3f 93       	push	r19
    3562:	4f 93       	push	r20
    3564:	5f 93       	push	r21
    3566:	6f 93       	push	r22
    3568:	7f 93       	push	r23
    356a:	8f 93       	push	r24
    356c:	9f 93       	push	r25
    356e:	af 93       	push	r26
    3570:	bf 93       	push	r27
    3572:	ef 93       	push	r30
    3574:	ff 93       	push	r31
    3576:	df 93       	push	r29
    3578:	cf 93       	push	r28
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr2 != NULL_PTR) {
    357e:	80 91 75 01 	lds	r24, 0x0175
    3582:	90 91 76 01 	lds	r25, 0x0176
    3586:	00 97       	sbiw	r24, 0x00	; 0
    3588:	29 f0       	breq	.+10     	; 0x3594 <__vector_4+0x40>
        (*g_callBackPtr2)();
    358a:	e0 91 75 01 	lds	r30, 0x0175
    358e:	f0 91 76 01 	lds	r31, 0x0176
    3592:	09 95       	icall
    }
}
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	ff 91       	pop	r31
    359a:	ef 91       	pop	r30
    359c:	bf 91       	pop	r27
    359e:	af 91       	pop	r26
    35a0:	9f 91       	pop	r25
    35a2:	8f 91       	pop	r24
    35a4:	7f 91       	pop	r23
    35a6:	6f 91       	pop	r22
    35a8:	5f 91       	pop	r21
    35aa:	4f 91       	pop	r20
    35ac:	3f 91       	pop	r19
    35ae:	2f 91       	pop	r18
    35b0:	0f 90       	pop	r0
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	0f 90       	pop	r0
    35b6:	1f 90       	pop	r1
    35b8:	18 95       	reti

000035ba <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    35ba:	df 93       	push	r29
    35bc:	cf 93       	push	r28
    35be:	00 d0       	rcall	.+0      	; 0x35c0 <UART_init+0x6>
    35c0:	00 d0       	rcall	.+0      	; 0x35c2 <UART_init+0x8>
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	9c 83       	std	Y+4, r25	; 0x04
    35c8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    35ca:	1a 82       	std	Y+2, r1	; 0x02
    35cc:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    35ce:	eb e2       	ldi	r30, 0x2B	; 43
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    35d6:	ea e2       	ldi	r30, 0x2A	; 42
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	88 e1       	ldi	r24, 0x18	; 24
    35dc:	80 83       	st	Z, r24

    if (Config_Ptr->bit_data == 9) {
    35de:	eb 81       	ldd	r30, Y+3	; 0x03
    35e0:	fc 81       	ldd	r31, Y+4	; 0x04
    35e2:	80 81       	ld	r24, Z
    35e4:	89 30       	cpi	r24, 0x09	; 9
    35e6:	41 f4       	brne	.+16     	; 0x35f8 <UART_init+0x3e>
        UCSRB |= (1 << UCSZ2);
    35e8:	aa e2       	ldi	r26, 0x2A	; 42
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	ea e2       	ldi	r30, 0x2A	; 42
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	84 60       	ori	r24, 0x04	; 4
    35f4:	8c 93       	st	X, r24
    35f6:	07 c0       	rjmp	.+14     	; 0x3606 <UART_init+0x4c>
    } else {
        UCSRB &= ~(1 << UCSZ2);
    35f8:	aa e2       	ldi	r26, 0x2A	; 42
    35fa:	b0 e0       	ldi	r27, 0x00	; 0
    35fc:	ea e2       	ldi	r30, 0x2A	; 42
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	8b 7f       	andi	r24, 0xFB	; 251
    3604:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3606:	e0 e4       	ldi	r30, 0x40	; 64
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 e8       	ldi	r24, 0x80	; 128
    360c:	80 83       	st	Z, r24

	/* Set bit data size */
	if (Config_Ptr->bit_data == 5) {
    360e:	eb 81       	ldd	r30, Y+3	; 0x03
    3610:	fc 81       	ldd	r31, Y+4	; 0x04
    3612:	80 81       	ld	r24, Z
    3614:	85 30       	cpi	r24, 0x05	; 5
    3616:	31 f1       	breq	.+76     	; 0x3664 <UART_init+0xaa>
		// 00: Already cleared, no changes needed.
	} else if (Config_Ptr->bit_data == 6) {
    3618:	eb 81       	ldd	r30, Y+3	; 0x03
    361a:	fc 81       	ldd	r31, Y+4	; 0x04
    361c:	80 81       	ld	r24, Z
    361e:	86 30       	cpi	r24, 0x06	; 6
    3620:	41 f4       	brne	.+16     	; 0x3632 <UART_init+0x78>
		UCSRC |= (1 << UCSZ0);
    3622:	a0 e4       	ldi	r26, 0x40	; 64
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	e0 e4       	ldi	r30, 0x40	; 64
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	82 60       	ori	r24, 0x02	; 2
    362e:	8c 93       	st	X, r24
    3630:	19 c0       	rjmp	.+50     	; 0x3664 <UART_init+0xaa>
	} else if (Config_Ptr->bit_data == 7) {
    3632:	eb 81       	ldd	r30, Y+3	; 0x03
    3634:	fc 81       	ldd	r31, Y+4	; 0x04
    3636:	80 81       	ld	r24, Z
    3638:	87 30       	cpi	r24, 0x07	; 7
    363a:	41 f4       	brne	.+16     	; 0x364c <UART_init+0x92>
		UCSRC |= (1 << UCSZ1);
    363c:	a0 e4       	ldi	r26, 0x40	; 64
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	e0 e4       	ldi	r30, 0x40	; 64
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	84 60       	ori	r24, 0x04	; 4
    3648:	8c 93       	st	X, r24
    364a:	0c c0       	rjmp	.+24     	; 0x3664 <UART_init+0xaa>
	} else if (Config_Ptr->bit_data == 8) {
    364c:	eb 81       	ldd	r30, Y+3	; 0x03
    364e:	fc 81       	ldd	r31, Y+4	; 0x04
    3650:	80 81       	ld	r24, Z
    3652:	88 30       	cpi	r24, 0x08	; 8
    3654:	39 f4       	brne	.+14     	; 0x3664 <UART_init+0xaa>
		UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
    3656:	a0 e4       	ldi	r26, 0x40	; 64
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	e0 e4       	ldi	r30, 0x40	; 64
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	80 81       	ld	r24, Z
    3660:	86 60       	ori	r24, 0x06	; 6
    3662:	8c 93       	st	X, r24
	}

	/* Set parity */
	if (Config_Ptr->parity == 1) { // Odd parity
    3664:	eb 81       	ldd	r30, Y+3	; 0x03
    3666:	fc 81       	ldd	r31, Y+4	; 0x04
    3668:	81 81       	ldd	r24, Z+1	; 0x01
    366a:	81 30       	cpi	r24, 0x01	; 1
    366c:	41 f4       	brne	.+16     	; 0x367e <UART_init+0xc4>
		UCSRC |= (1 << UPM1) | (1 << UPM0);
    366e:	a0 e4       	ldi	r26, 0x40	; 64
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	e0 e4       	ldi	r30, 0x40	; 64
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	80 63       	ori	r24, 0x30	; 48
    367a:	8c 93       	st	X, r24
    367c:	0c c0       	rjmp	.+24     	; 0x3696 <UART_init+0xdc>
	} else if (Config_Ptr->parity == 2) { // Even parity
    367e:	eb 81       	ldd	r30, Y+3	; 0x03
    3680:	fc 81       	ldd	r31, Y+4	; 0x04
    3682:	81 81       	ldd	r24, Z+1	; 0x01
    3684:	82 30       	cpi	r24, 0x02	; 2
    3686:	39 f4       	brne	.+14     	; 0x3696 <UART_init+0xdc>
		UCSRC |= (1 << UPM1);
    3688:	a0 e4       	ldi	r26, 0x40	; 64
    368a:	b0 e0       	ldi	r27, 0x00	; 0
    368c:	e0 e4       	ldi	r30, 0x40	; 64
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	80 81       	ld	r24, Z
    3692:	80 62       	ori	r24, 0x20	; 32
    3694:	8c 93       	st	X, r24
	} // Default is no parity (00)

	/* Set stop bit */
	if (Config_Ptr->stop_bit == 2) {
    3696:	eb 81       	ldd	r30, Y+3	; 0x03
    3698:	fc 81       	ldd	r31, Y+4	; 0x04
    369a:	82 81       	ldd	r24, Z+2	; 0x02
    369c:	82 30       	cpi	r24, 0x02	; 2
    369e:	41 f4       	brne	.+16     	; 0x36b0 <UART_init+0xf6>
		UCSRC |= (1 << USBS); // 2 stop bits
    36a0:	a0 e4       	ldi	r26, 0x40	; 64
    36a2:	b0 e0       	ldi	r27, 0x00	; 0
    36a4:	e0 e4       	ldi	r30, 0x40	; 64
    36a6:	f0 e0       	ldi	r31, 0x00	; 0
    36a8:	80 81       	ld	r24, Z
    36aa:	88 60       	ori	r24, 0x08	; 8
    36ac:	8c 93       	st	X, r24
    36ae:	07 c0       	rjmp	.+14     	; 0x36be <UART_init+0x104>
	} else {
		UCSRC &= ~(1 << USBS); // 1 stop bit
    36b0:	a0 e4       	ldi	r26, 0x40	; 64
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	e0 e4       	ldi	r30, 0x40	; 64
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	87 7f       	andi	r24, 0xF7	; 247
    36bc:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    36be:	eb 81       	ldd	r30, Y+3	; 0x03
    36c0:	fc 81       	ldd	r31, Y+4	; 0x04
    36c2:	83 81       	ldd	r24, Z+3	; 0x03
    36c4:	94 81       	ldd	r25, Z+4	; 0x04
    36c6:	a5 81       	ldd	r26, Z+5	; 0x05
    36c8:	b6 81       	ldd	r27, Z+6	; 0x06
    36ca:	88 0f       	add	r24, r24
    36cc:	99 1f       	adc	r25, r25
    36ce:	aa 1f       	adc	r26, r26
    36d0:	bb 1f       	adc	r27, r27
    36d2:	88 0f       	add	r24, r24
    36d4:	99 1f       	adc	r25, r25
    36d6:	aa 1f       	adc	r26, r26
    36d8:	bb 1f       	adc	r27, r27
    36da:	88 0f       	add	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	aa 1f       	adc	r26, r26
    36e0:	bb 1f       	adc	r27, r27
    36e2:	9c 01       	movw	r18, r24
    36e4:	ad 01       	movw	r20, r26
    36e6:	80 e0       	ldi	r24, 0x00	; 0
    36e8:	92 e1       	ldi	r25, 0x12	; 18
    36ea:	aa e7       	ldi	r26, 0x7A	; 122
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	bc 01       	movw	r22, r24
    36f0:	cd 01       	movw	r24, r26
    36f2:	0e 94 24 1c 	call	0x3848	; 0x3848 <__udivmodsi4>
    36f6:	da 01       	movw	r26, r20
    36f8:	c9 01       	movw	r24, r18
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3700:	e0 e4       	ldi	r30, 0x40	; 64
    3702:	f0 e0       	ldi	r31, 0x00	; 0
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	9a 81       	ldd	r25, Y+2	; 0x02
    3708:	89 2f       	mov	r24, r25
    370a:	99 27       	eor	r25, r25
    370c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    370e:	e9 e2       	ldi	r30, 0x29	; 41
    3710:	f0 e0       	ldi	r31, 0x00	; 0
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	80 83       	st	Z, r24
}
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	0f 90       	pop	r0
    371c:	0f 90       	pop	r0
    371e:	cf 91       	pop	r28
    3720:	df 91       	pop	r29
    3722:	08 95       	ret

00003724 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3724:	df 93       	push	r29
    3726:	cf 93       	push	r28
    3728:	0f 92       	push	r0
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
    372e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3730:	eb e2       	ldi	r30, 0x2B	; 43
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	80 81       	ld	r24, Z
    3736:	88 2f       	mov	r24, r24
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	80 72       	andi	r24, 0x20	; 32
    373c:	90 70       	andi	r25, 0x00	; 0
    373e:	00 97       	sbiw	r24, 0x00	; 0
    3740:	b9 f3       	breq	.-18     	; 0x3730 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3742:	ec e2       	ldi	r30, 0x2C	; 44
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    374a:	0f 90       	pop	r0
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    375a:	eb e2       	ldi	r30, 0x2B	; 43
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 81       	ld	r24, Z
    3760:	88 23       	and	r24, r24
    3762:	dc f7       	brge	.-10     	; 0x375a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3764:	ec e2       	ldi	r30, 0x2C	; 44
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
}
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	08 95       	ret

00003770 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	00 d0       	rcall	.+0      	; 0x3776 <UART_sendString+0x6>
    3776:	0f 92       	push	r0
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	9b 83       	std	Y+3, r25	; 0x03
    377e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3780:	19 82       	std	Y+1, r1	; 0x01
    3782:	0e c0       	rjmp	.+28     	; 0x37a0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	28 2f       	mov	r18, r24
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	9b 81       	ldd	r25, Y+3	; 0x03
    378e:	fc 01       	movw	r30, r24
    3790:	e2 0f       	add	r30, r18
    3792:	f3 1f       	adc	r31, r19
    3794:	80 81       	ld	r24, Z
    3796:	0e 94 92 1b 	call	0x3724	; 0x3724 <UART_sendByte>
		i++;
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	8f 5f       	subi	r24, 0xFF	; 255
    379e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	28 2f       	mov	r18, r24
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	9b 81       	ldd	r25, Y+3	; 0x03
    37aa:	fc 01       	movw	r30, r24
    37ac:	e2 0f       	add	r30, r18
    37ae:	f3 1f       	adc	r31, r19
    37b0:	80 81       	ld	r24, Z
    37b2:	88 23       	and	r24, r24
    37b4:	39 f7       	brne	.-50     	; 0x3784 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	0f 90       	pop	r0
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <UART_receiveString+0xa>
    37cc:	0f 92       	push	r0
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	9b 83       	std	Y+3, r25	; 0x03
    37d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37d6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	28 2f       	mov	r18, r24
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	9b 81       	ldd	r25, Y+3	; 0x03
    37e2:	8c 01       	movw	r16, r24
    37e4:	02 0f       	add	r16, r18
    37e6:	13 1f       	adc	r17, r19
    37e8:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    37ec:	f8 01       	movw	r30, r16
    37ee:	80 83       	st	Z, r24
    37f0:	0f c0       	rjmp	.+30     	; 0x3810 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    37f2:	89 81       	ldd	r24, Y+1	; 0x01
    37f4:	8f 5f       	subi	r24, 0xFF	; 255
    37f6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    37f8:	89 81       	ldd	r24, Y+1	; 0x01
    37fa:	28 2f       	mov	r18, r24
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3800:	9b 81       	ldd	r25, Y+3	; 0x03
    3802:	8c 01       	movw	r16, r24
    3804:	02 0f       	add	r16, r18
    3806:	13 1f       	adc	r17, r19
    3808:	0e 94 a9 1b 	call	0x3752	; 0x3752 <UART_recieveByte>
    380c:	f8 01       	movw	r30, r16
    380e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	28 2f       	mov	r18, r24
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	8a 81       	ldd	r24, Y+2	; 0x02
    3818:	9b 81       	ldd	r25, Y+3	; 0x03
    381a:	fc 01       	movw	r30, r24
    381c:	e2 0f       	add	r30, r18
    381e:	f3 1f       	adc	r31, r19
    3820:	80 81       	ld	r24, Z
    3822:	83 32       	cpi	r24, 0x23	; 35
    3824:	31 f7       	brne	.-52     	; 0x37f2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	28 2f       	mov	r18, r24
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	8a 81       	ldd	r24, Y+2	; 0x02
    382e:	9b 81       	ldd	r25, Y+3	; 0x03
    3830:	fc 01       	movw	r30, r24
    3832:	e2 0f       	add	r30, r18
    3834:	f3 1f       	adc	r31, r19
    3836:	10 82       	st	Z, r1
}
    3838:	0f 90       	pop	r0
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	08 95       	ret

00003848 <__udivmodsi4>:
    3848:	a1 e2       	ldi	r26, 0x21	; 33
    384a:	1a 2e       	mov	r1, r26
    384c:	aa 1b       	sub	r26, r26
    384e:	bb 1b       	sub	r27, r27
    3850:	fd 01       	movw	r30, r26
    3852:	0d c0       	rjmp	.+26     	; 0x386e <__udivmodsi4_ep>

00003854 <__udivmodsi4_loop>:
    3854:	aa 1f       	adc	r26, r26
    3856:	bb 1f       	adc	r27, r27
    3858:	ee 1f       	adc	r30, r30
    385a:	ff 1f       	adc	r31, r31
    385c:	a2 17       	cp	r26, r18
    385e:	b3 07       	cpc	r27, r19
    3860:	e4 07       	cpc	r30, r20
    3862:	f5 07       	cpc	r31, r21
    3864:	20 f0       	brcs	.+8      	; 0x386e <__udivmodsi4_ep>
    3866:	a2 1b       	sub	r26, r18
    3868:	b3 0b       	sbc	r27, r19
    386a:	e4 0b       	sbc	r30, r20
    386c:	f5 0b       	sbc	r31, r21

0000386e <__udivmodsi4_ep>:
    386e:	66 1f       	adc	r22, r22
    3870:	77 1f       	adc	r23, r23
    3872:	88 1f       	adc	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	1a 94       	dec	r1
    3878:	69 f7       	brne	.-38     	; 0x3854 <__udivmodsi4_loop>
    387a:	60 95       	com	r22
    387c:	70 95       	com	r23
    387e:	80 95       	com	r24
    3880:	90 95       	com	r25
    3882:	9b 01       	movw	r18, r22
    3884:	ac 01       	movw	r20, r24
    3886:	bd 01       	movw	r22, r26
    3888:	cf 01       	movw	r24, r30
    388a:	08 95       	ret

0000388c <__prologue_saves__>:
    388c:	2f 92       	push	r2
    388e:	3f 92       	push	r3
    3890:	4f 92       	push	r4
    3892:	5f 92       	push	r5
    3894:	6f 92       	push	r6
    3896:	7f 92       	push	r7
    3898:	8f 92       	push	r8
    389a:	9f 92       	push	r9
    389c:	af 92       	push	r10
    389e:	bf 92       	push	r11
    38a0:	cf 92       	push	r12
    38a2:	df 92       	push	r13
    38a4:	ef 92       	push	r14
    38a6:	ff 92       	push	r15
    38a8:	0f 93       	push	r16
    38aa:	1f 93       	push	r17
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	ca 1b       	sub	r28, r26
    38b6:	db 0b       	sbc	r29, r27
    38b8:	0f b6       	in	r0, 0x3f	; 63
    38ba:	f8 94       	cli
    38bc:	de bf       	out	0x3e, r29	; 62
    38be:	0f be       	out	0x3f, r0	; 63
    38c0:	cd bf       	out	0x3d, r28	; 61
    38c2:	09 94       	ijmp

000038c4 <__epilogue_restores__>:
    38c4:	2a 88       	ldd	r2, Y+18	; 0x12
    38c6:	39 88       	ldd	r3, Y+17	; 0x11
    38c8:	48 88       	ldd	r4, Y+16	; 0x10
    38ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    38cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    38d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    38d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    38d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    38d6:	b9 84       	ldd	r11, Y+9	; 0x09
    38d8:	c8 84       	ldd	r12, Y+8	; 0x08
    38da:	df 80       	ldd	r13, Y+7	; 0x07
    38dc:	ee 80       	ldd	r14, Y+6	; 0x06
    38de:	fd 80       	ldd	r15, Y+5	; 0x05
    38e0:	0c 81       	ldd	r16, Y+4	; 0x04
    38e2:	1b 81       	ldd	r17, Y+3	; 0x03
    38e4:	aa 81       	ldd	r26, Y+2	; 0x02
    38e6:	b9 81       	ldd	r27, Y+1	; 0x01
    38e8:	ce 0f       	add	r28, r30
    38ea:	d1 1d       	adc	r29, r1
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	ed 01       	movw	r28, r26
    38f8:	08 95       	ret

000038fa <itoa>:
    38fa:	fb 01       	movw	r30, r22
    38fc:	9f 01       	movw	r18, r30
    38fe:	e8 94       	clt
    3900:	42 30       	cpi	r20, 0x02	; 2
    3902:	c4 f0       	brlt	.+48     	; 0x3934 <itoa+0x3a>
    3904:	45 32       	cpi	r20, 0x25	; 37
    3906:	b4 f4       	brge	.+44     	; 0x3934 <itoa+0x3a>
    3908:	4a 30       	cpi	r20, 0x0A	; 10
    390a:	29 f4       	brne	.+10     	; 0x3916 <itoa+0x1c>
    390c:	97 fb       	bst	r25, 7
    390e:	1e f4       	brtc	.+6      	; 0x3916 <itoa+0x1c>
    3910:	90 95       	com	r25
    3912:	81 95       	neg	r24
    3914:	9f 4f       	sbci	r25, 0xFF	; 255
    3916:	64 2f       	mov	r22, r20
    3918:	77 27       	eor	r23, r23
    391a:	0e 94 ae 1c 	call	0x395c	; 0x395c <__udivmodhi4>
    391e:	80 5d       	subi	r24, 0xD0	; 208
    3920:	8a 33       	cpi	r24, 0x3A	; 58
    3922:	0c f0       	brlt	.+2      	; 0x3926 <itoa+0x2c>
    3924:	89 5d       	subi	r24, 0xD9	; 217
    3926:	81 93       	st	Z+, r24
    3928:	cb 01       	movw	r24, r22
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	a1 f7       	brne	.-24     	; 0x3916 <itoa+0x1c>
    392e:	16 f4       	brtc	.+4      	; 0x3934 <itoa+0x3a>
    3930:	5d e2       	ldi	r21, 0x2D	; 45
    3932:	51 93       	st	Z+, r21
    3934:	10 82       	st	Z, r1
    3936:	c9 01       	movw	r24, r18
    3938:	0c 94 9e 1c 	jmp	0x393c	; 0x393c <strrev>

0000393c <strrev>:
    393c:	dc 01       	movw	r26, r24
    393e:	fc 01       	movw	r30, r24
    3940:	67 2f       	mov	r22, r23
    3942:	71 91       	ld	r23, Z+
    3944:	77 23       	and	r23, r23
    3946:	e1 f7       	brne	.-8      	; 0x3940 <strrev+0x4>
    3948:	32 97       	sbiw	r30, 0x02	; 2
    394a:	04 c0       	rjmp	.+8      	; 0x3954 <strrev+0x18>
    394c:	7c 91       	ld	r23, X
    394e:	6d 93       	st	X+, r22
    3950:	70 83       	st	Z, r23
    3952:	62 91       	ld	r22, -Z
    3954:	ae 17       	cp	r26, r30
    3956:	bf 07       	cpc	r27, r31
    3958:	c8 f3       	brcs	.-14     	; 0x394c <strrev+0x10>
    395a:	08 95       	ret

0000395c <__udivmodhi4>:
    395c:	aa 1b       	sub	r26, r26
    395e:	bb 1b       	sub	r27, r27
    3960:	51 e1       	ldi	r21, 0x11	; 17
    3962:	07 c0       	rjmp	.+14     	; 0x3972 <__udivmodhi4_ep>

00003964 <__udivmodhi4_loop>:
    3964:	aa 1f       	adc	r26, r26
    3966:	bb 1f       	adc	r27, r27
    3968:	a6 17       	cp	r26, r22
    396a:	b7 07       	cpc	r27, r23
    396c:	10 f0       	brcs	.+4      	; 0x3972 <__udivmodhi4_ep>
    396e:	a6 1b       	sub	r26, r22
    3970:	b7 0b       	sbc	r27, r23

00003972 <__udivmodhi4_ep>:
    3972:	88 1f       	adc	r24, r24
    3974:	99 1f       	adc	r25, r25
    3976:	5a 95       	dec	r21
    3978:	a9 f7       	brne	.-22     	; 0x3964 <__udivmodhi4_loop>
    397a:	80 95       	com	r24
    397c:	90 95       	com	r25
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	08 95       	ret

00003984 <_exit>:
    3984:	f8 94       	cli

00003986 <__stop_program>:
    3986:	ff cf       	rjmp	.-2      	; 0x3986 <__stop_program>
