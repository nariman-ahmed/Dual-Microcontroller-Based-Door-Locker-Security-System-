
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00003342  000033d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  0080007e  0080007e  000033f4  2**0
                  ALLOC
  3 .stab         000039f0  00000000  00000000  000033f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001815  00000000  00000000  00006de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000085f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008739  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000088a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b3dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c579  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cd47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__vector_4>
      14:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <__vector_9>
      28:	0c 94 1b 16 	jmp	0x2c36	; 0x2c36 <__vector_10>
      2c:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 0a 	call	0x1426	; 0x1426 <main>
      8a:	0c 94 9f 19 	jmp	0x333e	; 0x333e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <callBackTimer>:
uint8 change_pass_failed_count=0;
uint8 open_door_pass_failed_count=0;
volatile uint8 ticks=0;


void callBackTimer(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	ticks++;
     b4e:	80 91 82 00 	lds	r24, 0x0082
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 82 00 	sts	0x0082, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <receivePass>:

void receivePass(void){
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	00 d0       	rcall	.+0      	; 0xb68 <receivePass+0xa>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=HMI_MC_READY){}
     b6c:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
     b70:	80 31       	cpi	r24, 0x10	; 16
     b72:	e1 f7       	brne	.-8      	; 0xb6c <receivePass+0xe>

	for(int i=0;i<5;i++)
     b74:	1a 82       	std	Y+2, r1	; 0x02
     b76:	19 82       	std	Y+1, r1	; 0x01
     b78:	0d c0       	rjmp	.+26     	; 0xb94 <receivePass+0x36>
	{
		received_pass[i]=UART_recieveByte();
     b7a:	09 81       	ldd	r16, Y+1	; 0x01
     b7c:	1a 81       	ldd	r17, Y+2	; 0x02
     b7e:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
     b82:	f8 01       	movw	r30, r16
     b84:	e7 57       	subi	r30, 0x77	; 119
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 83       	st	Z, r24
}

void receivePass(void){
	while(UART_recieveByte()!=HMI_MC_READY){}

	for(int i=0;i<5;i++)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	85 30       	cpi	r24, 0x05	; 5
     b9a:	91 05       	cpc	r25, r1
     b9c:	74 f3       	brlt	.-36     	; 0xb7a <receivePass+0x1c>
	{
		received_pass[i]=UART_recieveByte();
	}
}
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <receiveConfirmedPass>:

void receiveConfirmedPass(void){
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	00 d0       	rcall	.+0      	; 0xbb6 <receiveConfirmedPass+0xa>
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=HMI_MC_READY){}
     bba:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
     bbe:	80 31       	cpi	r24, 0x10	; 16
     bc0:	e1 f7       	brne	.-8      	; 0xbba <receiveConfirmedPass+0xe>

	for(int i=0;i<5;i++)
     bc2:	1a 82       	std	Y+2, r1	; 0x02
     bc4:	19 82       	std	Y+1, r1	; 0x01
     bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <receiveConfirmedPass+0x36>
	{
		confirmed_pass[i]=UART_recieveByte();
     bc8:	09 81       	ldd	r16, Y+1	; 0x01
     bca:	1a 81       	ldd	r17, Y+2	; 0x02
     bcc:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
     bd0:	f8 01       	movw	r30, r16
     bd2:	e2 57       	subi	r30, 0x72	; 114
     bd4:	ff 4f       	sbci	r31, 0xFF	; 255
     bd6:	80 83       	st	Z, r24
}

void receiveConfirmedPass(void){
	while(UART_recieveByte()!=HMI_MC_READY){}

	for(int i=0;i<5;i++)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	9a 81       	ldd	r25, Y+2	; 0x02
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	9a 83       	std	Y+2, r25	; 0x02
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	85 30       	cpi	r24, 0x05	; 5
     be8:	91 05       	cpc	r25, r1
     bea:	74 f3       	brlt	.-36     	; 0xbc8 <receiveConfirmedPass+0x1c>
	{
		confirmed_pass[i]=UART_recieveByte();
	}
}
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	08 95       	ret

00000bfa <send_newPassConfirmation>:

//checks pass and confirmed pass
void send_newPassConfirmation(void){
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <send_newPassConfirmation+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62

	UART_sendByte(CONTROL_MC_READY);
     c04:	80 e2       	ldi	r24, 0x20	; 32
     c06:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>

	for(int i=0;i<5;i++)
     c0a:	1a 82       	std	Y+2, r1	; 0x02
     c0c:	19 82       	std	Y+1, r1	; 0x01
     c0e:	1a c0       	rjmp	.+52     	; 0xc44 <send_newPassConfirmation+0x4a>
	{
		if(received_pass[i]!=confirmed_pass[i])
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	fc 01       	movw	r30, r24
     c16:	e7 57       	subi	r30, 0x77	; 119
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	20 81       	ld	r18, Z
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	fc 01       	movw	r30, r24
     c22:	e2 57       	subi	r30, 0x72	; 114
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	80 81       	ld	r24, Z
     c28:	28 17       	cp	r18, r24
     c2a:	39 f0       	breq	.+14     	; 0xc3a <send_newPassConfirmation+0x40>
		{
			confirmed=FALSE;
     c2c:	10 92 93 00 	sts	0x0093, r1
			UART_sendByte(confirmed);
     c30:	80 91 93 00 	lds	r24, 0x0093
     c34:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>
     c38:	11 c0       	rjmp	.+34     	; 0xc5c <send_newPassConfirmation+0x62>
//checks pass and confirmed pass
void send_newPassConfirmation(void){

	UART_sendByte(CONTROL_MC_READY);

	for(int i=0;i<5;i++)
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	9a 81       	ldd	r25, Y+2	; 0x02
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	9a 83       	std	Y+2, r25	; 0x02
     c42:	89 83       	std	Y+1, r24	; 0x01
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	85 30       	cpi	r24, 0x05	; 5
     c4a:	91 05       	cpc	r25, r1
     c4c:	0c f3       	brlt	.-62     	; 0xc10 <send_newPassConfirmation+0x16>
			UART_sendByte(confirmed);
			return;
		}
	}

	confirmed=TRUE;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	80 93 93 00 	sts	0x0093, r24
	UART_sendByte(confirmed);
     c54:	80 91 93 00 	lds	r24, 0x0093
     c58:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>

}
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <storePasswordInEEPROM>:

void storePasswordInEEPROM(uint8 *password) {
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	61 97       	sbiw	r28, 0x11	; 17
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	99 8b       	std	Y+17, r25	; 0x11
     c7c:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 5; i++) {
     c7e:	1f 86       	std	Y+15, r1	; 0x0f
     c80:	88 c0       	rjmp	.+272    	; 0xd92 <storePasswordInEEPROM+0x12c>
		EEPROM_writeByte(EEPROM_START_ADDRESS + i, password[i]);
     c82:	8f 85       	ldd	r24, Y+15	; 0x0f
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	8f 5e       	subi	r24, 0xEF	; 239
     c8a:	9c 4f       	sbci	r25, 0xFC	; 252
     c8c:	ac 01       	movw	r20, r24
     c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	88 89       	ldd	r24, Y+16	; 0x10
     c96:	99 89       	ldd	r25, Y+17	; 0x11
     c98:	fc 01       	movw	r30, r24
     c9a:	e2 0f       	add	r30, r18
     c9c:	f3 1f       	adc	r31, r19
     c9e:	20 81       	ld	r18, Z
     ca0:	ca 01       	movw	r24, r20
     ca2:	62 2f       	mov	r22, r18
     ca4:	0e 94 04 0b 	call	0x1608	; 0x1608 <EEPROM_writeByte>
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	a0 e2       	ldi	r26, 0x20	; 32
     cae:	b1 e4       	ldi	r27, 0x41	; 65
     cb0:	8b 87       	std	Y+11, r24	; 0x0b
     cb2:	9c 87       	std	Y+12, r25	; 0x0c
     cb4:	ad 87       	std	Y+13, r26	; 0x0d
     cb6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cba:	7c 85       	ldd	r23, Y+12	; 0x0c
     cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	4a ef       	ldi	r20, 0xFA	; 250
     cc6:	54 e4       	ldi	r21, 0x44	; 68
     cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	8f 83       	std	Y+7, r24	; 0x07
     cd2:	98 87       	std	Y+8, r25	; 0x08
     cd4:	a9 87       	std	Y+9, r26	; 0x09
     cd6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cd8:	6f 81       	ldd	r22, Y+7	; 0x07
     cda:	78 85       	ldd	r23, Y+8	; 0x08
     cdc:	89 85       	ldd	r24, Y+9	; 0x09
     cde:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e8       	ldi	r20, 0x80	; 128
     ce6:	5f e3       	ldi	r21, 0x3F	; 63
     ce8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cec:	88 23       	and	r24, r24
     cee:	2c f4       	brge	.+10     	; 0xcfa <storePasswordInEEPROM+0x94>
		__ticks = 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	9e 83       	std	Y+6, r25	; 0x06
     cf6:	8d 83       	std	Y+5, r24	; 0x05
     cf8:	3f c0       	rjmp	.+126    	; 0xd78 <storePasswordInEEPROM+0x112>
	else if (__tmp > 65535)
     cfa:	6f 81       	ldd	r22, Y+7	; 0x07
     cfc:	78 85       	ldd	r23, Y+8	; 0x08
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	9a 85       	ldd	r25, Y+10	; 0x0a
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	3f ef       	ldi	r19, 0xFF	; 255
     d06:	4f e7       	ldi	r20, 0x7F	; 127
     d08:	57 e4       	ldi	r21, 0x47	; 71
     d0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d0e:	18 16       	cp	r1, r24
     d10:	4c f5       	brge	.+82     	; 0xd64 <storePasswordInEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d12:	6b 85       	ldd	r22, Y+11	; 0x0b
     d14:	7c 85       	ldd	r23, Y+12	; 0x0c
     d16:	8d 85       	ldd	r24, Y+13	; 0x0d
     d18:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e2       	ldi	r20, 0x20	; 32
     d20:	51 e4       	ldi	r21, 0x41	; 65
     d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	bc 01       	movw	r22, r24
     d2c:	cd 01       	movw	r24, r26
     d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	9e 83       	std	Y+6, r25	; 0x06
     d38:	8d 83       	std	Y+5, r24	; 0x05
     d3a:	0f c0       	rjmp	.+30     	; 0xd5a <storePasswordInEEPROM+0xf4>
     d3c:	88 ec       	ldi	r24, 0xC8	; 200
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9c 83       	std	Y+4, r25	; 0x04
     d42:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <storePasswordInEEPROM+0xe2>
     d4c:	9c 83       	std	Y+4, r25	; 0x04
     d4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5a:	8d 81       	ldd	r24, Y+5	; 0x05
     d5c:	9e 81       	ldd	r25, Y+6	; 0x06
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	69 f7       	brne	.-38     	; 0xd3c <storePasswordInEEPROM+0xd6>
     d62:	14 c0       	rjmp	.+40     	; 0xd8c <storePasswordInEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d64:	6f 81       	ldd	r22, Y+7	; 0x07
     d66:	78 85       	ldd	r23, Y+8	; 0x08
     d68:	89 85       	ldd	r24, Y+9	; 0x09
     d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	9e 83       	std	Y+6, r25	; 0x06
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	8d 81       	ldd	r24, Y+5	; 0x05
     d7a:	9e 81       	ldd	r25, Y+6	; 0x06
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <storePasswordInEEPROM+0x11e>
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(confirmed);

}

void storePasswordInEEPROM(uint8 *password) {
	for (uint8 i = 0; i < 5; i++) {
     d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	8f 87       	std	Y+15, r24	; 0x0f
     d92:	8f 85       	ldd	r24, Y+15	; 0x0f
     d94:	85 30       	cpi	r24, 0x05	; 5
     d96:	08 f4       	brcc	.+2      	; 0xd9a <storePasswordInEEPROM+0x134>
     d98:	74 cf       	rjmp	.-280    	; 0xc82 <storePasswordInEEPROM+0x1c>
		EEPROM_writeByte(EEPROM_START_ADDRESS + i, password[i]);
		_delay_ms(10);  // Ensure the write operation has time to complete
	}
}
     d9a:	61 96       	adiw	r28, 0x11	; 17
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <readPasswordFromEEPROM>:

void readPasswordFromEEPROM(uint8 *password) {
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	61 97       	sbiw	r28, 0x11	; 17
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	99 8b       	std	Y+17, r25	; 0x11
     dc2:	88 8b       	std	Y+16, r24	; 0x10
	for (uint8 i = 0; i < 5; i++) {
     dc4:	1f 86       	std	Y+15, r1	; 0x0f
     dc6:	86 c0       	rjmp	.+268    	; 0xed4 <readPasswordFromEEPROM+0x128>
		EEPROM_readByte(EEPROM_START_ADDRESS + i, &password[i]);
     dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dca:	88 2f       	mov	r24, r24
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	8f 5e       	subi	r24, 0xEF	; 239
     dd0:	9c 4f       	sbci	r25, 0xFC	; 252
     dd2:	ac 01       	movw	r20, r24
     dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	88 89       	ldd	r24, Y+16	; 0x10
     ddc:	99 89       	ldd	r25, Y+17	; 0x11
     dde:	28 0f       	add	r18, r24
     de0:	39 1f       	adc	r19, r25
     de2:	ca 01       	movw	r24, r20
     de4:	b9 01       	movw	r22, r18
     de6:	0e 94 45 0b 	call	0x168a	; 0x168a <EEPROM_readByte>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e2       	ldi	r26, 0x20	; 32
     df0:	b1 e4       	ldi	r27, 0x41	; 65
     df2:	8b 87       	std	Y+11, r24	; 0x0b
     df4:	9c 87       	std	Y+12, r25	; 0x0c
     df6:	ad 87       	std	Y+13, r26	; 0x0d
     df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
     dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
     e00:	9e 85       	ldd	r25, Y+14	; 0x0e
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	4a ef       	ldi	r20, 0xFA	; 250
     e08:	54 e4       	ldi	r21, 0x44	; 68
     e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	8f 83       	std	Y+7, r24	; 0x07
     e14:	98 87       	std	Y+8, r25	; 0x08
     e16:	a9 87       	std	Y+9, r26	; 0x09
     e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e1a:	6f 81       	ldd	r22, Y+7	; 0x07
     e1c:	78 85       	ldd	r23, Y+8	; 0x08
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e8       	ldi	r20, 0x80	; 128
     e28:	5f e3       	ldi	r21, 0x3F	; 63
     e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2e:	88 23       	and	r24, r24
     e30:	2c f4       	brge	.+10     	; 0xe3c <readPasswordFromEEPROM+0x90>
		__ticks = 1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
     e3a:	3f c0       	rjmp	.+126    	; 0xeba <readPasswordFromEEPROM+0x10e>
	else if (__tmp > 65535)
     e3c:	6f 81       	ldd	r22, Y+7	; 0x07
     e3e:	78 85       	ldd	r23, Y+8	; 0x08
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	57 e4       	ldi	r21, 0x47	; 71
     e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e50:	18 16       	cp	r1, r24
     e52:	4c f5       	brge	.+82     	; 0xea6 <readPasswordFromEEPROM+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e54:	6b 85       	ldd	r22, Y+11	; 0x0b
     e56:	7c 85       	ldd	r23, Y+12	; 0x0c
     e58:	8d 85       	ldd	r24, Y+13	; 0x0d
     e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e2       	ldi	r20, 0x20	; 32
     e62:	51 e4       	ldi	r21, 0x41	; 65
     e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	bc 01       	movw	r22, r24
     e6e:	cd 01       	movw	r24, r26
     e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	8d 83       	std	Y+5, r24	; 0x05
     e7c:	0f c0       	rjmp	.+30     	; 0xe9c <readPasswordFromEEPROM+0xf0>
     e7e:	88 ec       	ldi	r24, 0xC8	; 200
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9c 83       	std	Y+4, r25	; 0x04
     e84:	8b 83       	std	Y+3, r24	; 0x03
     e86:	8b 81       	ldd	r24, Y+3	; 0x03
     e88:	9c 81       	ldd	r25, Y+4	; 0x04
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	f1 f7       	brne	.-4      	; 0xe8a <readPasswordFromEEPROM+0xde>
     e8e:	9c 83       	std	Y+4, r25	; 0x04
     e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e92:	8d 81       	ldd	r24, Y+5	; 0x05
     e94:	9e 81       	ldd	r25, Y+6	; 0x06
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	9e 83       	std	Y+6, r25	; 0x06
     e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	69 f7       	brne	.-38     	; 0xe7e <readPasswordFromEEPROM+0xd2>
     ea4:	14 c0       	rjmp	.+40     	; 0xece <readPasswordFromEEPROM+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea6:	6f 81       	ldd	r22, Y+7	; 0x07
     ea8:	78 85       	ldd	r23, Y+8	; 0x08
     eaa:	89 85       	ldd	r24, Y+9	; 0x09
     eac:	9a 85       	ldd	r25, Y+10	; 0x0a
     eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	8d 81       	ldd	r24, Y+5	; 0x05
     ebc:	9e 81       	ldd	r25, Y+6	; 0x06
     ebe:	9a 83       	std	Y+2, r25	; 0x02
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	9a 81       	ldd	r25, Y+2	; 0x02
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <readPasswordFromEEPROM+0x11a>
     eca:	9a 83       	std	Y+2, r25	; 0x02
     ecc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);  // Ensure the write operation has time to complete
	}
}

void readPasswordFromEEPROM(uint8 *password) {
	for (uint8 i = 0; i < 5; i++) {
     ece:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	8f 87       	std	Y+15, r24	; 0x0f
     ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed6:	85 30       	cpi	r24, 0x05	; 5
     ed8:	08 f4       	brcc	.+2      	; 0xedc <readPasswordFromEEPROM+0x130>
     eda:	76 cf       	rjmp	.-276    	; 0xdc8 <readPasswordFromEEPROM+0x1c>
		EEPROM_readByte(EEPROM_START_ADDRESS + i, &password[i]);
		_delay_ms(10);  // Delay to ensure the read operation completes properly
	}
}
     edc:	61 96       	adiw	r28, 0x11	; 17
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <newPasswordSequence>:

void newPasswordSequence(void){
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <newPasswordSequence+0x6>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	receivePass();
     ef8:	0e 94 af 05 	call	0xb5e	; 0xb5e <receivePass>
	receiveConfirmedPass();
     efc:	0e 94 d6 05 	call	0xbac	; 0xbac <receiveConfirmedPass>

	send_newPassConfirmation();
     f00:	0e 94 fd 05 	call	0xbfa	; 0xbfa <send_newPassConfirmation>

	if(confirmed)
     f04:	80 91 93 00 	lds	r24, 0x0093
     f08:	88 23       	and	r24, r24
     f0a:	f1 f0       	breq	.+60     	; 0xf48 <newPasswordSequence+0x5a>
	{
		//SAVE PASSWORD IN EEPROM
		for(int i=0;i<5;i++)
     f0c:	1a 82       	std	Y+2, r1	; 0x02
     f0e:	19 82       	std	Y+1, r1	; 0x01
     f10:	11 c0       	rjmp	.+34     	; 0xf34 <newPasswordSequence+0x46>
		{
			final_pass[i]=received_pass[i];
     f12:	29 81       	ldd	r18, Y+1	; 0x01
     f14:	3a 81       	ldd	r19, Y+2	; 0x02
     f16:	89 81       	ldd	r24, Y+1	; 0x01
     f18:	9a 81       	ldd	r25, Y+2	; 0x02
     f1a:	fc 01       	movw	r30, r24
     f1c:	e7 57       	subi	r30, 0x77	; 119
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	80 81       	ld	r24, Z
     f22:	f9 01       	movw	r30, r18
     f24:	e7 56       	subi	r30, 0x67	; 103
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 83       	st	Z, r24
	send_newPassConfirmation();

	if(confirmed)
	{
		//SAVE PASSWORD IN EEPROM
		for(int i=0;i<5;i++)
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	9a 81       	ldd	r25, Y+2	; 0x02
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	85 30       	cpi	r24, 0x05	; 5
     f3a:	91 05       	cpc	r25, r1
     f3c:	54 f3       	brlt	.-44     	; 0xf12 <newPasswordSequence+0x24>
		{
			final_pass[i]=received_pass[i];
		}
		storePasswordInEEPROM(final_pass);
     f3e:	89 e9       	ldi	r24, 0x99	; 153
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	0e 94 33 06 	call	0xc66	; 0xc66 <storePasswordInEEPROM>
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <newPasswordSequence+0x5e>
		return;
	}
	else
	{
		newPasswordSequence();
     f48:	0e 94 77 07 	call	0xeee	; 0xeee <newPasswordSequence>
	}

}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <currentPasswordAuthentication>:

void currentPasswordAuthentication(void){
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	29 97       	sbiw	r28, 0x09	; 9
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61

	uint8 current_pass[5];
	authentication=SUCCESS;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	80 93 7f 00 	sts	0x007F, r24

	while(UART_recieveByte()!=HMI_MC_READY){}
     f74:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
     f78:	80 31       	cpi	r24, 0x10	; 16
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <currentPasswordAuthentication+0x1e>

	for(int i=0;i<5;i++)
     f7c:	1c 82       	std	Y+4, r1	; 0x04
     f7e:	1b 82       	std	Y+3, r1	; 0x03
     f80:	10 c0       	rjmp	.+32     	; 0xfa2 <currentPasswordAuthentication+0x4c>
	{
		current_pass[i]=UART_recieveByte();
     f82:	0b 81       	ldd	r16, Y+3	; 0x03
     f84:	1c 81       	ldd	r17, Y+4	; 0x04
     f86:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
     f8a:	28 2f       	mov	r18, r24
     f8c:	ce 01       	movw	r24, r28
     f8e:	05 96       	adiw	r24, 0x05	; 5
     f90:	fc 01       	movw	r30, r24
     f92:	e0 0f       	add	r30, r16
     f94:	f1 1f       	adc	r31, r17
     f96:	20 83       	st	Z, r18
	uint8 current_pass[5];
	authentication=SUCCESS;

	while(UART_recieveByte()!=HMI_MC_READY){}

	for(int i=0;i<5;i++)
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	9c 83       	std	Y+4, r25	; 0x04
     fa0:	8b 83       	std	Y+3, r24	; 0x03
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	85 30       	cpi	r24, 0x05	; 5
     fa8:	91 05       	cpc	r25, r1
     faa:	5c f3       	brlt	.-42     	; 0xf82 <currentPasswordAuthentication+0x2c>
	{
		current_pass[i]=UART_recieveByte();
	}

	readPasswordFromEEPROM(eeprom_pass);
     fac:	84 e9       	ldi	r24, 0x94	; 148
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 d6 06 	call	0xdac	; 0xdac <readPasswordFromEEPROM>

	for(int i=0;i<5;i++)
     fb4:	1a 82       	std	Y+2, r1	; 0x02
     fb6:	19 82       	std	Y+1, r1	; 0x01
     fb8:	17 c0       	rjmp	.+46     	; 0xfe8 <currentPasswordAuthentication+0x92>
	{
		if(eeprom_pass[i]!=current_pass[i])
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	fc 01       	movw	r30, r24
     fc0:	ec 56       	subi	r30, 0x6C	; 108
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	40 81       	ld	r20, Z
     fc6:	29 81       	ldd	r18, Y+1	; 0x01
     fc8:	3a 81       	ldd	r19, Y+2	; 0x02
     fca:	ce 01       	movw	r24, r28
     fcc:	05 96       	adiw	r24, 0x05	; 5
     fce:	fc 01       	movw	r30, r24
     fd0:	e2 0f       	add	r30, r18
     fd2:	f3 1f       	adc	r31, r19
     fd4:	80 81       	ld	r24, Z
     fd6:	48 17       	cp	r20, r24
     fd8:	11 f0       	breq	.+4      	; 0xfde <currentPasswordAuthentication+0x88>
		{
			//authentication failed
			authentication=FAIL;
     fda:	10 92 7f 00 	sts	0x007F, r1
		current_pass[i]=UART_recieveByte();
	}

	readPasswordFromEEPROM(eeprom_pass);

	for(int i=0;i<5;i++)
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	9a 83       	std	Y+2, r25	; 0x02
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	85 30       	cpi	r24, 0x05	; 5
     fee:	91 05       	cpc	r25, r1
     ff0:	24 f3       	brlt	.-56     	; 0xfba <currentPasswordAuthentication+0x64>
			authentication=FAIL;
			//UART_sendByte(FAIL);
		}
	}

	UART_sendByte(authentication);
     ff2:	80 91 7f 00 	lds	r24, 0x007F
     ff6:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>

}
     ffa:	29 96       	adiw	r28, 0x09	; 9
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	cf 91       	pop	r28
    1008:	df 91       	pop	r29
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	08 95       	ret

00001010 <alarms>:

void alarms(void){
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62

	UART_sendByte(ALARM_ON);
    1018:	8f e3       	ldi	r24, 0x3F	; 63
    101a:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>
	BUZZER_on(&buzzerConfig);
    101e:	8b e7       	ldi	r24, 0x7B	; 123
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 77 0a 	call	0x14ee	; 0x14ee <BUZZER_on>

	ticks=0;
    1026:	10 92 82 00 	sts	0x0082, r1
	while(ticks<60);
    102a:	80 91 82 00 	lds	r24, 0x0082
    102e:	8c 33       	cpi	r24, 0x3C	; 60
    1030:	e0 f3       	brcs	.-8      	; 0x102a <alarms+0x1a>

	UART_sendByte(ALARM_OFF);
    1032:	80 e4       	ldi	r24, 0x40	; 64
    1034:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>
	BUZZER_off(&buzzerConfig);
    1038:	8b e7       	ldi	r24, 0x7B	; 123
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 8d 0a 	call	0x151a	; 0x151a <BUZZER_off>

}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <doorMechanism>:

void doorMechanism(void){
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	2e 97       	sbiw	r28, 0x0e	; 14
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61

	UART_sendByte(DOOR_OPEN_CW);
    105a:	8c e3       	ldi	r24, 0x3C	; 60
    105c:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>
	DcMotor_Rotate(MOTOR_CW);
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	0e 94 be 0a 	call	0x157c	; 0x157c <DcMotor_Rotate>

	//door 15 second delay
	ticks=0;
    1066:	10 92 82 00 	sts	0x0082, r1
	while(ticks<15);
    106a:	80 91 82 00 	lds	r24, 0x0082
    106e:	8f 30       	cpi	r24, 0x0F	; 15
    1070:	e0 f3       	brcs	.-8      	; 0x106a <doorMechanism+0x24>

	while(PIR_getState()!=FALSE){}    //talama howa true fa fee nas bet3ady
    1072:	0e 94 1c 14 	call	0x2838	; 0x2838 <PIR_getState>
    1076:	88 23       	and	r24, r24
    1078:	e1 f7       	brne	.-8      	; 0x1072 <doorMechanism+0x2c>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	aa e7       	ldi	r26, 0x7A	; 122
    1080:	b4 e4       	ldi	r27, 0x44	; 68
    1082:	8b 87       	std	Y+11, r24	; 0x0b
    1084:	9c 87       	std	Y+12, r25	; 0x0c
    1086:	ad 87       	std	Y+13, r26	; 0x0d
    1088:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	6b 85       	ldd	r22, Y+11	; 0x0b
    108c:	7c 85       	ldd	r23, Y+12	; 0x0c
    108e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1090:	9e 85       	ldd	r25, Y+14	; 0x0e
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a ef       	ldi	r20, 0xFA	; 250
    1098:	54 e4       	ldi	r21, 0x44	; 68
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	98 87       	std	Y+8, r25	; 0x08
    10a6:	a9 87       	std	Y+9, r26	; 0x09
    10a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <doorMechanism+0x86>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <doorMechanism+0x104>
	else if (__tmp > 65535)
    10cc:	6f 81       	ldd	r22, Y+7	; 0x07
    10ce:	78 85       	ldd	r23, Y+8	; 0x08
    10d0:	89 85       	ldd	r24, Y+9	; 0x09
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <doorMechanism+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9e 83       	std	Y+6, r25	; 0x06
    110a:	8d 83       	std	Y+5, r24	; 0x05
    110c:	0f c0       	rjmp	.+30     	; 0x112c <doorMechanism+0xe6>
    110e:	88 ec       	ldi	r24, 0xC8	; 200
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <doorMechanism+0xd4>
    111e:	9c 83       	std	Y+4, r25	; 0x04
    1120:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8d 81       	ldd	r24, Y+5	; 0x05
    1124:	9e 81       	ldd	r25, Y+6	; 0x06
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8d 81       	ldd	r24, Y+5	; 0x05
    112e:	9e 81       	ldd	r25, Y+6	; 0x06
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <doorMechanism+0xc8>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <doorMechanism+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	9a 83       	std	Y+2, r25	; 0x02
    1150:	89 83       	std	Y+1, r24	; 0x01
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	9a 81       	ldd	r25, Y+2	; 0x02
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <doorMechanism+0x110>
    115a:	9a 83       	std	Y+2, r25	; 0x02
    115c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DcMotor_Rotate(MOTOR_OFF);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0e 94 be 0a 	call	0x157c	; 0x157c <DcMotor_Rotate>
	UART_sendByte(DOOR_CLOSE_ACW);
    1164:	8d e3       	ldi	r24, 0x3D	; 61
    1166:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>
	DcMotor_Rotate(MOTOR_ACW);
    116a:	82 e0       	ldi	r24, 0x02	; 2
    116c:	0e 94 be 0a 	call	0x157c	; 0x157c <DcMotor_Rotate>

	//door 15 second delay
	ticks=0;
    1170:	10 92 82 00 	sts	0x0082, r1
	while(ticks<15);
    1174:	80 91 82 00 	lds	r24, 0x0082
    1178:	8f 30       	cpi	r24, 0x0F	; 15
    117a:	e0 f3       	brcs	.-8      	; 0x1174 <doorMechanism+0x12e>

	UART_sendByte(DOOR_STOP);
    117c:	8e e3       	ldi	r24, 0x3E	; 62
    117e:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>
	DcMotor_Rotate(MOTOR_OFF);
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0e 94 be 0a 	call	0x157c	; 0x157c <DcMotor_Rotate>

}
    1188:	2e 96       	adiw	r28, 0x0e	; 14
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <operationChangePass>:

void operationChangePass(void){
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	2f 97       	sbiw	r28, 0x0f	; 15
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61

	uint8 flag=0;
    11ae:	1f 86       	std	Y+15, r1	; 0x0f

	currentPasswordAuthentication();
    11b0:	0e 94 ab 07 	call	0xf56	; 0xf56 <currentPasswordAuthentication>

	if(authentication==SUCCESS)
    11b4:	80 91 7f 00 	lds	r24, 0x007F
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	19 f4       	brne	.+6      	; 0x11c2 <operationChangePass+0x28>
	{
		newPasswordSequence();
    11bc:	0e 94 77 07 	call	0xeee	; 0xeee <newPasswordSequence>
    11c0:	86 c0       	rjmp	.+268    	; 0x12ce <operationChangePass+0x134>
	}
	else if(authentication==FAIL)  //lock for 1 min, buzzer, then go to main
    11c2:	80 91 7f 00 	lds	r24, 0x007F
    11c6:	88 23       	and	r24, r24
    11c8:	09 f0       	breq	.+2      	; 0x11cc <operationChangePass+0x32>
    11ca:	81 c0       	rjmp	.+258    	; 0x12ce <operationChangePass+0x134>
	{
		flag=UART_recieveByte();
    11cc:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
    11d0:	8f 87       	std	Y+15, r24	; 0x0f
		if(flag==FAIL)
    11d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d4:	88 23       	and	r24, r24
    11d6:	09 f0       	breq	.+2      	; 0x11da <operationChangePass+0x40>
    11d8:	75 c0       	rjmp	.+234    	; 0x12c4 <operationChangePass+0x12a>
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	a8 e4       	ldi	r26, 0x48	; 72
    11e0:	b2 e4       	ldi	r27, 0x42	; 66
    11e2:	8b 87       	std	Y+11, r24	; 0x0b
    11e4:	9c 87       	std	Y+12, r25	; 0x0c
    11e6:	ad 87       	std	Y+13, r26	; 0x0d
    11e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	4a ef       	ldi	r20, 0xFA	; 250
    11f8:	54 e4       	ldi	r21, 0x44	; 68
    11fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	8f 83       	std	Y+7, r24	; 0x07
    1204:	98 87       	std	Y+8, r25	; 0x08
    1206:	a9 87       	std	Y+9, r26	; 0x09
    1208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    120a:	6f 81       	ldd	r22, Y+7	; 0x07
    120c:	78 85       	ldd	r23, Y+8	; 0x08
    120e:	89 85       	ldd	r24, Y+9	; 0x09
    1210:	9a 85       	ldd	r25, Y+10	; 0x0a
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	40 e8       	ldi	r20, 0x80	; 128
    1218:	5f e3       	ldi	r21, 0x3F	; 63
    121a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    121e:	88 23       	and	r24, r24
    1220:	2c f4       	brge	.+10     	; 0x122c <operationChangePass+0x92>
		__ticks = 1;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
    122a:	3f c0       	rjmp	.+126    	; 0x12aa <operationChangePass+0x110>
	else if (__tmp > 65535)
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	3f ef       	ldi	r19, 0xFF	; 255
    1238:	4f e7       	ldi	r20, 0x7F	; 127
    123a:	57 e4       	ldi	r21, 0x47	; 71
    123c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1240:	18 16       	cp	r1, r24
    1242:	4c f5       	brge	.+82     	; 0x1296 <operationChangePass+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1244:	6b 85       	ldd	r22, Y+11	; 0x0b
    1246:	7c 85       	ldd	r23, Y+12	; 0x0c
    1248:	8d 85       	ldd	r24, Y+13	; 0x0d
    124a:	9e 85       	ldd	r25, Y+14	; 0x0e
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	0f c0       	rjmp	.+30     	; 0x128c <operationChangePass+0xf2>
    126e:	88 ec       	ldi	r24, 0xC8	; 200
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	9c 83       	std	Y+4, r25	; 0x04
    1274:	8b 83       	std	Y+3, r24	; 0x03
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	01 97       	sbiw	r24, 0x01	; 1
    127c:	f1 f7       	brne	.-4      	; 0x127a <operationChangePass+0xe0>
    127e:	9c 83       	std	Y+4, r25	; 0x04
    1280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1282:	8d 81       	ldd	r24, Y+5	; 0x05
    1284:	9e 81       	ldd	r25, Y+6	; 0x06
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	9e 83       	std	Y+6, r25	; 0x06
    128a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	69 f7       	brne	.-38     	; 0x126e <operationChangePass+0xd4>
    1294:	14 c0       	rjmp	.+40     	; 0x12be <operationChangePass+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1296:	6f 81       	ldd	r22, Y+7	; 0x07
    1298:	78 85       	ldd	r23, Y+8	; 0x08
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <operationChangePass+0x11c>
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(50);
			operationChangePass();
    12be:	0e 94 cd 08 	call	0x119a	; 0x119a <operationChangePass>
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <operationChangePass+0x134>
		}
		else if(flag==TRIGGER_ALARM)
    12c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c6:	82 33       	cpi	r24, 0x32	; 50
    12c8:	11 f4       	brne	.+4      	; 0x12ce <operationChangePass+0x134>
		{
			alarms();
    12ca:	0e 94 08 08 	call	0x1010	; 0x1010 <alarms>
		}
	}
}
    12ce:	2f 96       	adiw	r28, 0x0f	; 15
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <operationOpenDoor>:

void operationOpenDoor(void){
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	2f 97       	sbiw	r28, 0x0f	; 15
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61

	uint8 flag=0;
    12f4:	1f 86       	std	Y+15, r1	; 0x0f

	currentPasswordAuthentication();
    12f6:	0e 94 ab 07 	call	0xf56	; 0xf56 <currentPasswordAuthentication>


	if(authentication==SUCCESS)
    12fa:	80 91 7f 00 	lds	r24, 0x007F
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	19 f4       	brne	.+6      	; 0x1308 <operationOpenDoor+0x28>
	{
		doorMechanism();
    1302:	0e 94 23 08 	call	0x1046	; 0x1046 <doorMechanism>
    1306:	86 c0       	rjmp	.+268    	; 0x1414 <operationOpenDoor+0x134>
	}
	else if(authentication==FAIL)  //lock for 1 min, buzzer, then go to main
    1308:	80 91 7f 00 	lds	r24, 0x007F
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <operationOpenDoor+0x32>
    1310:	81 c0       	rjmp	.+258    	; 0x1414 <operationOpenDoor+0x134>
	{
		flag=UART_recieveByte();
    1312:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
    1316:	8f 87       	std	Y+15, r24	; 0x0f
		if(flag==FAIL)
    1318:	8f 85       	ldd	r24, Y+15	; 0x0f
    131a:	88 23       	and	r24, r24
    131c:	09 f0       	breq	.+2      	; 0x1320 <operationOpenDoor+0x40>
    131e:	75 c0       	rjmp	.+234    	; 0x140a <operationOpenDoor+0x12a>
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a8 e4       	ldi	r26, 0x48	; 72
    1326:	b2 e4       	ldi	r27, 0x42	; 66
    1328:	8b 87       	std	Y+11, r24	; 0x0b
    132a:	9c 87       	std	Y+12, r25	; 0x0c
    132c:	ad 87       	std	Y+13, r26	; 0x0d
    132e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1330:	6b 85       	ldd	r22, Y+11	; 0x0b
    1332:	7c 85       	ldd	r23, Y+12	; 0x0c
    1334:	8d 85       	ldd	r24, Y+13	; 0x0d
    1336:	9e 85       	ldd	r25, Y+14	; 0x0e
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	4a ef       	ldi	r20, 0xFA	; 250
    133e:	54 e4       	ldi	r21, 0x44	; 68
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	8f 83       	std	Y+7, r24	; 0x07
    134a:	98 87       	std	Y+8, r25	; 0x08
    134c:	a9 87       	std	Y+9, r26	; 0x09
    134e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1350:	6f 81       	ldd	r22, Y+7	; 0x07
    1352:	78 85       	ldd	r23, Y+8	; 0x08
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	9a 85       	ldd	r25, Y+10	; 0x0a
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e8       	ldi	r20, 0x80	; 128
    135e:	5f e3       	ldi	r21, 0x3F	; 63
    1360:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1364:	88 23       	and	r24, r24
    1366:	2c f4       	brge	.+10     	; 0x1372 <operationOpenDoor+0x92>
		__ticks = 1;
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	9e 83       	std	Y+6, r25	; 0x06
    136e:	8d 83       	std	Y+5, r24	; 0x05
    1370:	3f c0       	rjmp	.+126    	; 0x13f0 <operationOpenDoor+0x110>
	else if (__tmp > 65535)
    1372:	6f 81       	ldd	r22, Y+7	; 0x07
    1374:	78 85       	ldd	r23, Y+8	; 0x08
    1376:	89 85       	ldd	r24, Y+9	; 0x09
    1378:	9a 85       	ldd	r25, Y+10	; 0x0a
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	3f ef       	ldi	r19, 0xFF	; 255
    137e:	4f e7       	ldi	r20, 0x7F	; 127
    1380:	57 e4       	ldi	r21, 0x47	; 71
    1382:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1386:	18 16       	cp	r1, r24
    1388:	4c f5       	brge	.+82     	; 0x13dc <operationOpenDoor+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    138a:	6b 85       	ldd	r22, Y+11	; 0x0b
    138c:	7c 85       	ldd	r23, Y+12	; 0x0c
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e2       	ldi	r20, 0x20	; 32
    1398:	51 e4       	ldi	r21, 0x41	; 65
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	bc 01       	movw	r22, r24
    13a4:	cd 01       	movw	r24, r26
    13a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <operationOpenDoor+0xf2>
    13b4:	88 ec       	ldi	r24, 0xC8	; 200
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	8b 83       	std	Y+3, r24	; 0x03
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <operationOpenDoor+0xe0>
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	9e 81       	ldd	r25, Y+6	; 0x06
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	9e 83       	std	Y+6, r25	; 0x06
    13d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13d2:	8d 81       	ldd	r24, Y+5	; 0x05
    13d4:	9e 81       	ldd	r25, Y+6	; 0x06
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	69 f7       	brne	.-38     	; 0x13b4 <operationOpenDoor+0xd4>
    13da:	14 c0       	rjmp	.+40     	; 0x1404 <operationOpenDoor+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13dc:	6f 81       	ldd	r22, Y+7	; 0x07
    13de:	78 85       	ldd	r23, Y+8	; 0x08
    13e0:	89 85       	ldd	r24, Y+9	; 0x09
    13e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e8:	dc 01       	movw	r26, r24
    13ea:	cb 01       	movw	r24, r22
    13ec:	9e 83       	std	Y+6, r25	; 0x06
    13ee:	8d 83       	std	Y+5, r24	; 0x05
    13f0:	8d 81       	ldd	r24, Y+5	; 0x05
    13f2:	9e 81       	ldd	r25, Y+6	; 0x06
    13f4:	9a 83       	std	Y+2, r25	; 0x02
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <operationOpenDoor+0x11c>
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(50);
			operationOpenDoor();
    1404:	0e 94 70 09 	call	0x12e0	; 0x12e0 <operationOpenDoor>
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <operationOpenDoor+0x134>
		}
		else if(flag==TRIGGER_ALARM)
    140a:	8f 85       	ldd	r24, Y+15	; 0x0f
    140c:	82 33       	cpi	r24, 0x32	; 50
    140e:	11 f4       	brne	.+4      	; 0x1414 <operationOpenDoor+0x134>
		{
			alarms();
    1410:	0e 94 08 08 	call	0x1010	; 0x1010 <alarms>
		}
	}
}
    1414:	2f 96       	adiw	r28, 0x0f	; 15
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <main>:





int main(void){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62

	SREG|=(1<<7);
    142e:	af e5       	ldi	r26, 0x5F	; 95
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	ef e5       	ldi	r30, 0x5F	; 95
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	80 68       	ori	r24, 0x80	; 128
    143a:	8c 93       	st	X, r24

	Timer_init(&timer1_config);
    143c:	84 e7       	ldi	r24, 0x74	; 116
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 8a 14 	call	0x2914	; 0x2914 <Timer_init>
	Timer_setCallBack(callBackTimer,TIMER1);
    1444:	83 ea       	ldi	r24, 0xA3	; 163
    1446:	95 e0       	ldi	r25, 0x05	; 5
    1448:	61 e0       	ldi	r22, 0x01	; 1
    144a:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <Timer_setCallBack>
	Timer_setCallBack(&callBackTimer,TIMER1);
    144e:	83 ea       	ldi	r24, 0xA3	; 163
    1450:	95 e0       	ldi	r25, 0x05	; 5
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <Timer_setCallBack>
	UART_init(&uart_config);
    1458:	88 e6       	ldi	r24, 0x68	; 104
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <UART_init>
	TWI_init(&twi_config);
    1460:	8f e6       	ldi	r24, 0x6F	; 111
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 1a 17 	call	0x2e34	; 0x2e34 <TWI_init>
	BUZZER_init(&buzzerConfig);
    1468:	8b e7       	ldi	r24, 0x7B	; 123
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <BUZZER_init>
	DcMotor_init();
    1470:	0e 94 a3 0a 	call	0x1546	; 0x1546 <DcMotor_init>
	PIR_init();
    1474:	0e 94 10 14 	call	0x2820	; 0x2820 <PIR_init>

	newPasswordSequence();
    1478:	0e 94 77 07 	call	0xeee	; 0xeee <newPasswordSequence>

	while(1)
	{
		//ayza ashoof el user ekhtar eh mel menu
		while(UART_recieveByte()!=HMI_MC_READY){}
    147c:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
    1480:	80 31       	cpi	r24, 0x10	; 16
    1482:	e1 f7       	brne	.-8      	; 0x147c <main+0x56>

		current_operation=UART_recieveByte();
    1484:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
    1488:	80 93 7e 00 	sts	0x007E, r24

		if(current_operation==OPERATION_OPEN_DOOR)
    148c:	80 91 7e 00 	lds	r24, 0x007E
    1490:	88 32       	cpi	r24, 0x28	; 40
    1492:	19 f4       	brne	.+6      	; 0x149a <main+0x74>
		{

			operationOpenDoor();
    1494:	0e 94 70 09 	call	0x12e0	; 0x12e0 <operationOpenDoor>
    1498:	06 c0       	rjmp	.+12     	; 0x14a6 <main+0x80>

		}
		else if(current_operation==OPERATION_CHANGE_PASS)
    149a:	80 91 7e 00 	lds	r24, 0x007E
    149e:	8e 31       	cpi	r24, 0x1E	; 30
    14a0:	11 f4       	brne	.+4      	; 0x14a6 <main+0x80>
		{

			operationChangePass();
    14a2:	0e 94 cd 08 	call	0x119a	; 0x119a <operationChangePass>

		}

		//telling HMI im ready to start the loop again
		UART_sendByte(CONTROL_MC_READY);
    14a6:	80 e2       	ldi	r24, 0x20	; 32
    14a8:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>
    14ac:	e7 cf       	rjmp	.-50     	; 0x147c <main+0x56>

000014ae <BUZZER_init>:
 *  Created on: 5 Oct 2024
 *      Author: NARIMAN AHMED
 */
#include "buzzer.h"

void BUZZER_init(Buzzer_Config * config) {
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <BUZZER_init+0x6>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01

    GPIO_setupPinDirection(config->port, config->pin, PIN_OUTPUT);
    14bc:	e9 81       	ldd	r30, Y+1	; 0x01
    14be:	fa 81       	ldd	r31, Y+2	; 0x02
    14c0:	80 81       	ld	r24, Z
    14c2:	e9 81       	ldd	r30, Y+1	; 0x01
    14c4:	fa 81       	ldd	r31, Y+2	; 0x02
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	69 2f       	mov	r22, r25
    14ca:	41 e0       	ldi	r20, 0x01	; 1
    14cc:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_setupPinDirection>
    GPIO_writePin(config->port, config->pin, LOGIC_LOW);
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	80 81       	ld	r24, Z
    14d6:	e9 81       	ldd	r30, Y+1	; 0x01
    14d8:	fa 81       	ldd	r31, Y+2	; 0x02
    14da:	91 81       	ldd	r25, Z+1	; 0x01
    14dc:	69 2f       	mov	r22, r25
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <BUZZER_on>:


void BUZZER_on(Buzzer_Config * config) {
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <BUZZER_on+0x6>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePin(config->port, config->pin, LOGIC_HIGH);
    14fc:	e9 81       	ldd	r30, Y+1	; 0x01
    14fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1500:	80 81       	ld	r24, Z
    1502:	e9 81       	ldd	r30, Y+1	; 0x01
    1504:	fa 81       	ldd	r31, Y+2	; 0x02
    1506:	91 81       	ldd	r25, Z+1	; 0x01
    1508:	69 2f       	mov	r22, r25
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <BUZZER_off>:


void BUZZER_off(Buzzer_Config * config) {
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <BUZZER_off+0x6>
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    GPIO_writePin(config->port, config->pin, LOGIC_LOW);
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	80 81       	ld	r24, Z
    152e:	e9 81       	ldd	r30, Y+1	; 0x01
    1530:	fa 81       	ldd	r31, Y+2	; 0x02
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	69 2f       	mov	r22, r25
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
}
    153c:	0f 90       	pop	r0
    153e:	0f 90       	pop	r0
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <DcMotor_init>:
//IN1/PB0 and IN2/PB1 control motor CW, anti-CW or motor STOP

/*ENABLE at PB3/OC0 is configured as output in PMW module
 * this is because this pin can change depending on weather i use TIMER0,1,2*/

void DcMotor_init(void){
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62

	/*configure IN1,IN2 pins as output*/
	GPIO_setupPinDirection(INPUT1_PORT_ID,INPUT1_PIN_ID,PIN_OUTPUT);
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	66 e0       	ldi	r22, 0x06	; 6
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(INPUT2_PORT_ID,INPUT2_PIN_ID,PIN_OUTPUT);
    1558:	83 e0       	ldi	r24, 0x03	; 3
    155a:	67 e0       	ldi	r22, 0x07	; 7
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_setupPinDirection>

	/*motor initially stopped, INT1 and IN2 = 0*/
	GPIO_writePin(INPUT1_PORT_ID,INPUT1_PIN_ID,LOGIC_LOW);
    1562:	83 e0       	ldi	r24, 0x03	; 3
    1564:	66 e0       	ldi	r22, 0x06	; 6
    1566:	40 e0       	ldi	r20, 0x00	; 0
    1568:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
	GPIO_writePin(INPUT2_PORT_ID,INPUT2_PIN_ID,LOGIC_LOW);
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	67 e0       	ldi	r22, 0x07	; 7
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>

}
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state){
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DcMotor_Rotate+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DcMotor_Rotate+0x8>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	8a 83       	std	Y+2, r24	; 0x02

	uint8 speed=100;  //ALWAYS RUN MOTOR AR FASTEST SPEED
    158a:	84 e6       	ldi	r24, 0x64	; 100
    158c:	89 83       	std	Y+1, r24	; 0x01

	switch(state){
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3c 83       	std	Y+4, r19	; 0x04
    1596:	2b 83       	std	Y+3, r18	; 0x03
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	9c 81       	ldd	r25, Y+4	; 0x04
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	f9 f0       	breq	.+62     	; 0x15e0 <DcMotor_Rotate+0x64>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	31 05       	cpc	r19, r1
    15aa:	79 f0       	breq	.+30     	; 0x15ca <DcMotor_Rotate+0x4e>
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	01 f5       	brne	.+64     	; 0x15f4 <DcMotor_Rotate+0x78>
	case MOTOR_OFF:
		GPIO_writePin(INPUT1_PORT_ID,INPUT1_PIN_ID,LOGIC_LOW);
    15b4:	83 e0       	ldi	r24, 0x03	; 3
    15b6:	66 e0       	ldi	r22, 0x06	; 6
    15b8:	40 e0       	ldi	r20, 0x00	; 0
    15ba:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
		GPIO_writePin(INPUT2_PORT_ID,INPUT2_PIN_ID,LOGIC_LOW);
    15be:	83 e0       	ldi	r24, 0x03	; 3
    15c0:	67 e0       	ldi	r22, 0x07	; 7
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
    15c8:	15 c0       	rjmp	.+42     	; 0x15f4 <DcMotor_Rotate+0x78>
		break;
	case MOTOR_ACW:
		GPIO_writePin(INPUT1_PORT_ID,INPUT1_PIN_ID,LOGIC_LOW);
    15ca:	83 e0       	ldi	r24, 0x03	; 3
    15cc:	66 e0       	ldi	r22, 0x06	; 6
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
		GPIO_writePin(INPUT2_PORT_ID,INPUT2_PIN_ID,LOGIC_HIGH);
    15d4:	83 e0       	ldi	r24, 0x03	; 3
    15d6:	67 e0       	ldi	r22, 0x07	; 7
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
    15de:	0a c0       	rjmp	.+20     	; 0x15f4 <DcMotor_Rotate+0x78>
		break;
	case MOTOR_CW:
		GPIO_writePin(INPUT1_PORT_ID,INPUT1_PIN_ID,LOGIC_HIGH);
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	66 e0       	ldi	r22, 0x06	; 6
    15e4:	41 e0       	ldi	r20, 0x01	; 1
    15e6:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
		GPIO_writePin(INPUT2_PORT_ID,INPUT2_PIN_ID,LOGIC_LOW);
    15ea:	83 e0       	ldi	r24, 0x03	; 3
    15ec:	67 e0       	ldi	r22, 0x07	; 7
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
		break;
	default:
		break;
	}

	PWM_Timer0_Start(speed);
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	0e 94 30 14 	call	0x2860	; 0x2860 <PWM_Timer0_Start>

}
    15fa:	0f 90       	pop	r0
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	00 d0       	rcall	.+0      	; 0x160e <EEPROM_writeByte+0x6>
    160e:	00 d0       	rcall	.+0      	; 0x1610 <EEPROM_writeByte+0x8>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	9a 83       	std	Y+2, r25	; 0x02
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    161a:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    161e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    1622:	88 30       	cpi	r24, 0x08	; 8
    1624:	11 f0       	breq	.+4      	; 0x162a <EEPROM_writeByte+0x22>
        return ERROR;
    1626:	1c 82       	std	Y+4, r1	; 0x04
    1628:	28 c0       	rjmp	.+80     	; 0x167a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	80 70       	andi	r24, 0x00	; 0
    1630:	97 70       	andi	r25, 0x07	; 7
    1632:	88 0f       	add	r24, r24
    1634:	89 2f       	mov	r24, r25
    1636:	88 1f       	adc	r24, r24
    1638:	99 0b       	sbc	r25, r25
    163a:	91 95       	neg	r25
    163c:	80 6a       	ori	r24, 0xA0	; 160
    163e:	0e 94 6e 17 	call	0x2edc	; 0x2edc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1642:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    1646:	88 31       	cpi	r24, 0x18	; 24
    1648:	11 f0       	breq	.+4      	; 0x164e <EEPROM_writeByte+0x46>
        return ERROR; 
    164a:	1c 82       	std	Y+4, r1	; 0x04
    164c:	16 c0       	rjmp	.+44     	; 0x167a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	0e 94 6e 17 	call	0x2edc	; 0x2edc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1654:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    1658:	88 32       	cpi	r24, 0x28	; 40
    165a:	11 f0       	breq	.+4      	; 0x1660 <EEPROM_writeByte+0x58>
        return ERROR;
    165c:	1c 82       	std	Y+4, r1	; 0x04
    165e:	0d c0       	rjmp	.+26     	; 0x167a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	0e 94 6e 17 	call	0x2edc	; 0x2edc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1666:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    166a:	88 32       	cpi	r24, 0x28	; 40
    166c:	11 f0       	breq	.+4      	; 0x1672 <EEPROM_writeByte+0x6a>
        return ERROR;
    166e:	1c 82       	std	Y+4, r1	; 0x04
    1670:	04 c0       	rjmp	.+8      	; 0x167a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1672:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TWI_stop>
	
    return SUCCESS;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	8c 83       	std	Y+4, r24	; 0x04
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <EEPROM_readByte+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <EEPROM_readByte+0x8>
    1692:	0f 92       	push	r0
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	7c 83       	std	Y+4, r23	; 0x04
    169e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    16a0:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    16a4:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    16a8:	88 30       	cpi	r24, 0x08	; 8
    16aa:	11 f0       	breq	.+4      	; 0x16b0 <EEPROM_readByte+0x26>
        return ERROR;
    16ac:	1d 82       	std	Y+5, r1	; 0x05
    16ae:	44 c0       	rjmp	.+136    	; 0x1738 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	9a 81       	ldd	r25, Y+2	; 0x02
    16b4:	80 70       	andi	r24, 0x00	; 0
    16b6:	97 70       	andi	r25, 0x07	; 7
    16b8:	88 0f       	add	r24, r24
    16ba:	89 2f       	mov	r24, r25
    16bc:	88 1f       	adc	r24, r24
    16be:	99 0b       	sbc	r25, r25
    16c0:	91 95       	neg	r25
    16c2:	80 6a       	ori	r24, 0xA0	; 160
    16c4:	0e 94 6e 17 	call	0x2edc	; 0x2edc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16c8:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    16cc:	88 31       	cpi	r24, 0x18	; 24
    16ce:	11 f0       	breq	.+4      	; 0x16d4 <EEPROM_readByte+0x4a>
        return ERROR;
    16d0:	1d 82       	std	Y+5, r1	; 0x05
    16d2:	32 c0       	rjmp	.+100    	; 0x1738 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16da:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    16de:	88 32       	cpi	r24, 0x28	; 40
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <EEPROM_readByte+0x5c>
        return ERROR;
    16e2:	1d 82       	std	Y+5, r1	; 0x05
    16e4:	29 c0       	rjmp	.+82     	; 0x1738 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    16e6:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    16ea:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    16ee:	80 31       	cpi	r24, 0x10	; 16
    16f0:	11 f0       	breq	.+4      	; 0x16f6 <EEPROM_readByte+0x6c>
        return ERROR;
    16f2:	1d 82       	std	Y+5, r1	; 0x05
    16f4:	21 c0       	rjmp	.+66     	; 0x1738 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	80 70       	andi	r24, 0x00	; 0
    16fc:	97 70       	andi	r25, 0x07	; 7
    16fe:	88 0f       	add	r24, r24
    1700:	89 2f       	mov	r24, r25
    1702:	88 1f       	adc	r24, r24
    1704:	99 0b       	sbc	r25, r25
    1706:	91 95       	neg	r25
    1708:	81 6a       	ori	r24, 0xA1	; 161
    170a:	0e 94 6e 17 	call	0x2edc	; 0x2edc <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    170e:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    1712:	80 34       	cpi	r24, 0x40	; 64
    1714:	11 f0       	breq	.+4      	; 0x171a <EEPROM_readByte+0x90>
        return ERROR;
    1716:	1d 82       	std	Y+5, r1	; 0x05
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    171a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <TWI_readByteWithNACK>
    171e:	eb 81       	ldd	r30, Y+3	; 0x03
    1720:	fc 81       	ldd	r31, Y+4	; 0x04
    1722:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1724:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <TWI_getStatus>
    1728:	88 35       	cpi	r24, 0x58	; 88
    172a:	11 f0       	breq	.+4      	; 0x1730 <EEPROM_readByte+0xa6>
        return ERROR;
    172c:	1d 82       	std	Y+5, r1	; 0x05
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1730:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <TWI_stop>

    return SUCCESS;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	8d 81       	ldd	r24, Y+5	; 0x05
}
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <GPIO_setupPinDirection+0x6>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <GPIO_setupPinDirection+0x8>
    1752:	0f 92       	push	r0
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	6a 83       	std	Y+2, r22	; 0x02
    175c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	88 30       	cpi	r24, 0x08	; 8
    1762:	08 f0       	brcs	.+2      	; 0x1766 <GPIO_setupPinDirection+0x1c>
    1764:	d5 c0       	rjmp	.+426    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	08 f0       	brcs	.+2      	; 0x176e <GPIO_setupPinDirection+0x24>
    176c:	d1 c0       	rjmp	.+418    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	3d 83       	std	Y+5, r19	; 0x05
    1776:	2c 83       	std	Y+4, r18	; 0x04
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	9d 81       	ldd	r25, Y+5	; 0x05
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <GPIO_setupPinDirection+0x3a>
    1782:	43 c0       	rjmp	.+134    	; 0x180a <GPIO_setupPinDirection+0xc0>
    1784:	2c 81       	ldd	r18, Y+4	; 0x04
    1786:	3d 81       	ldd	r19, Y+5	; 0x05
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	2c f4       	brge	.+10     	; 0x1798 <GPIO_setupPinDirection+0x4e>
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	71 f0       	breq	.+28     	; 0x17b2 <GPIO_setupPinDirection+0x68>
    1796:	bc c0       	rjmp	.+376    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
    1798:	2c 81       	ldd	r18, Y+4	; 0x04
    179a:	3d 81       	ldd	r19, Y+5	; 0x05
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <GPIO_setupPinDirection+0x5a>
    17a2:	5f c0       	rjmp	.+190    	; 0x1862 <GPIO_setupPinDirection+0x118>
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	91 05       	cpc	r25, r1
    17ac:	09 f4       	brne	.+2      	; 0x17b0 <GPIO_setupPinDirection+0x66>
    17ae:	85 c0       	rjmp	.+266    	; 0x18ba <GPIO_setupPinDirection+0x170>
    17b0:	af c0       	rjmp	.+350    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	a1 f4       	brne	.+40     	; 0x17e0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17b8:	aa e3       	ldi	r26, 0x3A	; 58
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	ea e3       	ldi	r30, 0x3A	; 58
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <GPIO_setupPinDirection+0x8c>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <GPIO_setupPinDirection+0x88>
    17da:	84 2b       	or	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	98 c0       	rjmp	.+304    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17e0:	aa e3       	ldi	r26, 0x3A	; 58
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	ea e3       	ldi	r30, 0x3A	; 58
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <GPIO_setupPinDirection+0xb4>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <GPIO_setupPinDirection+0xb0>
    1802:	80 95       	com	r24
    1804:	84 23       	and	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	83 c0       	rjmp	.+262    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	a1 f4       	brne	.+40     	; 0x1838 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1810:	a7 e3       	ldi	r26, 0x37	; 55
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e7 e3       	ldi	r30, 0x37	; 55
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_setupPinDirection+0xe4>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_setupPinDirection+0xe0>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	6c c0       	rjmp	.+216    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1838:	a7 e3       	ldi	r26, 0x37	; 55
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e7 e3       	ldi	r30, 0x37	; 55
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_setupPinDirection+0x10c>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_setupPinDirection+0x108>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	57 c0       	rjmp	.+174    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	a1 f4       	brne	.+40     	; 0x1890 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1868:	a4 e3       	ldi	r26, 0x34	; 52
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e4 e3       	ldi	r30, 0x34	; 52
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <GPIO_setupPinDirection+0x13c>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <GPIO_setupPinDirection+0x138>
    188a:	84 2b       	or	r24, r20
    188c:	8c 93       	st	X, r24
    188e:	40 c0       	rjmp	.+128    	; 0x1910 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1890:	a4 e3       	ldi	r26, 0x34	; 52
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e4 e3       	ldi	r30, 0x34	; 52
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	48 2f       	mov	r20, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 2e       	mov	r0, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <GPIO_setupPinDirection+0x164>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <GPIO_setupPinDirection+0x160>
    18b2:	80 95       	com	r24
    18b4:	84 23       	and	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	2b c0       	rjmp	.+86     	; 0x1910 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	a1 f4       	brne	.+40     	; 0x18e8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18c0:	a1 e3       	ldi	r26, 0x31	; 49
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e1 e3       	ldi	r30, 0x31	; 49
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <GPIO_setupPinDirection+0x194>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <GPIO_setupPinDirection+0x190>
    18e2:	84 2b       	or	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    18e8:	a1 e3       	ldi	r26, 0x31	; 49
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e1 e3       	ldi	r30, 0x31	; 49
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <GPIO_setupPinDirection+0x1bc>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <GPIO_setupPinDirection+0x1b8>
    190a:	80 95       	com	r24
    190c:	84 23       	and	r24, r20
    190e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_writePin+0x6>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <GPIO_writePin+0x8>
    1928:	0f 92       	push	r0
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	6a 83       	std	Y+2, r22	; 0x02
    1932:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	88 30       	cpi	r24, 0x08	; 8
    1938:	08 f0       	brcs	.+2      	; 0x193c <GPIO_writePin+0x1c>
    193a:	d5 c0       	rjmp	.+426    	; 0x1ae6 <GPIO_writePin+0x1c6>
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	84 30       	cpi	r24, 0x04	; 4
    1940:	08 f0       	brcs	.+2      	; 0x1944 <GPIO_writePin+0x24>
    1942:	d1 c0       	rjmp	.+418    	; 0x1ae6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3d 83       	std	Y+5, r19	; 0x05
    194c:	2c 83       	std	Y+4, r18	; 0x04
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <GPIO_writePin+0x3a>
    1958:	43 c0       	rjmp	.+134    	; 0x19e0 <GPIO_writePin+0xc0>
    195a:	2c 81       	ldd	r18, Y+4	; 0x04
    195c:	3d 81       	ldd	r19, Y+5	; 0x05
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <GPIO_writePin+0x4e>
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	71 f0       	breq	.+28     	; 0x1988 <GPIO_writePin+0x68>
    196c:	bc c0       	rjmp	.+376    	; 0x1ae6 <GPIO_writePin+0x1c6>
    196e:	2c 81       	ldd	r18, Y+4	; 0x04
    1970:	3d 81       	ldd	r19, Y+5	; 0x05
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <GPIO_writePin+0x5a>
    1978:	5f c0       	rjmp	.+190    	; 0x1a38 <GPIO_writePin+0x118>
    197a:	8c 81       	ldd	r24, Y+4	; 0x04
    197c:	9d 81       	ldd	r25, Y+5	; 0x05
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	91 05       	cpc	r25, r1
    1982:	09 f4       	brne	.+2      	; 0x1986 <GPIO_writePin+0x66>
    1984:	85 c0       	rjmp	.+266    	; 0x1a90 <GPIO_writePin+0x170>
    1986:	af c0       	rjmp	.+350    	; 0x1ae6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	a1 f4       	brne	.+40     	; 0x19b6 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    198e:	ab e3       	ldi	r26, 0x3B	; 59
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e3       	ldi	r30, 0x3B	; 59
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <GPIO_writePin+0x8c>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <GPIO_writePin+0x88>
    19b0:	84 2b       	or	r24, r20
    19b2:	8c 93       	st	X, r24
    19b4:	98 c0       	rjmp	.+304    	; 0x1ae6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19b6:	ab e3       	ldi	r26, 0x3B	; 59
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	eb e3       	ldi	r30, 0x3B	; 59
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	80 81       	ld	r24, Z
    19c0:	48 2f       	mov	r20, r24
    19c2:	8a 81       	ldd	r24, Y+2	; 0x02
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 2e       	mov	r0, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <GPIO_writePin+0xb4>
    19d0:	88 0f       	add	r24, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	0a 94       	dec	r0
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <GPIO_writePin+0xb0>
    19d8:	80 95       	com	r24
    19da:	84 23       	and	r24, r20
    19dc:	8c 93       	st	X, r24
    19de:	83 c0       	rjmp	.+262    	; 0x1ae6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	a1 f4       	brne	.+40     	; 0x1a0e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    19e6:	a8 e3       	ldi	r26, 0x38	; 56
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e8 e3       	ldi	r30, 0x38	; 56
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <GPIO_writePin+0xe4>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <GPIO_writePin+0xe0>
    1a08:	84 2b       	or	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	6c c0       	rjmp	.+216    	; 0x1ae6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a0e:	a8 e3       	ldi	r26, 0x38	; 56
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	e8 e3       	ldi	r30, 0x38	; 56
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <GPIO_writePin+0x10c>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <GPIO_writePin+0x108>
    1a30:	80 95       	com	r24
    1a32:	84 23       	and	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	57 c0       	rjmp	.+174    	; 0x1ae6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	a1 f4       	brne	.+40     	; 0x1a66 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a3e:	a5 e3       	ldi	r26, 0x35	; 53
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e5 e3       	ldi	r30, 0x35	; 53
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <GPIO_writePin+0x13c>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <GPIO_writePin+0x138>
    1a60:	84 2b       	or	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	40 c0       	rjmp	.+128    	; 0x1ae6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a66:	a5 e3       	ldi	r26, 0x35	; 53
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e5 e3       	ldi	r30, 0x35	; 53
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <GPIO_writePin+0x164>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <GPIO_writePin+0x160>
    1a88:	80 95       	com	r24
    1a8a:	84 23       	and	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	2b c0       	rjmp	.+86     	; 0x1ae6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	a1 f4       	brne	.+40     	; 0x1abe <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a96:	a2 e3       	ldi	r26, 0x32	; 50
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e2 e3       	ldi	r30, 0x32	; 50
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <GPIO_writePin+0x194>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <GPIO_writePin+0x190>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	14 c0       	rjmp	.+40     	; 0x1ae6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1abe:	a2 e3       	ldi	r26, 0x32	; 50
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e2 e3       	ldi	r30, 0x32	; 50
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <GPIO_writePin+0x1bc>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <GPIO_writePin+0x1b8>
    1ae0:	80 95       	com	r24
    1ae2:	84 23       	and	r24, r20
    1ae4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <GPIO_readPin+0x6>
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <GPIO_readPin+0x8>
    1afe:	0f 92       	push	r0
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	8a 83       	std	Y+2, r24	; 0x02
    1b06:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b08:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	88 30       	cpi	r24, 0x08	; 8
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <GPIO_readPin+0x1c>
    1b10:	84 c0       	rjmp	.+264    	; 0x1c1a <GPIO_readPin+0x124>
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <GPIO_readPin+0x24>
    1b18:	80 c0       	rjmp	.+256    	; 0x1c1a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3d 83       	std	Y+5, r19	; 0x05
    1b22:	2c 83       	std	Y+4, r18	; 0x04
    1b24:	4c 81       	ldd	r20, Y+4	; 0x04
    1b26:	5d 81       	ldd	r21, Y+5	; 0x05
    1b28:	41 30       	cpi	r20, 0x01	; 1
    1b2a:	51 05       	cpc	r21, r1
    1b2c:	79 f1       	breq	.+94     	; 0x1b8c <GPIO_readPin+0x96>
    1b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	82 30       	cpi	r24, 0x02	; 2
    1b34:	91 05       	cpc	r25, r1
    1b36:	34 f4       	brge	.+12     	; 0x1b44 <GPIO_readPin+0x4e>
    1b38:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3c:	21 15       	cp	r18, r1
    1b3e:	31 05       	cpc	r19, r1
    1b40:	69 f0       	breq	.+26     	; 0x1b5c <GPIO_readPin+0x66>
    1b42:	6b c0       	rjmp	.+214    	; 0x1c1a <GPIO_readPin+0x124>
    1b44:	4c 81       	ldd	r20, Y+4	; 0x04
    1b46:	5d 81       	ldd	r21, Y+5	; 0x05
    1b48:	42 30       	cpi	r20, 0x02	; 2
    1b4a:	51 05       	cpc	r21, r1
    1b4c:	b9 f1       	breq	.+110    	; 0x1bbc <GPIO_readPin+0xc6>
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	83 30       	cpi	r24, 0x03	; 3
    1b54:	91 05       	cpc	r25, r1
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <GPIO_readPin+0x64>
    1b58:	49 c0       	rjmp	.+146    	; 0x1bec <GPIO_readPin+0xf6>
    1b5a:	5f c0       	rjmp	.+190    	; 0x1c1a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b5c:	e9 e3       	ldi	r30, 0x39	; 57
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a9 01       	movw	r20, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <GPIO_readPin+0x7e>
    1b70:	55 95       	asr	r21
    1b72:	47 95       	ror	r20
    1b74:	8a 95       	dec	r24
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <GPIO_readPin+0x7a>
    1b78:	ca 01       	movw	r24, r20
    1b7a:	81 70       	andi	r24, 0x01	; 1
    1b7c:	90 70       	andi	r25, 0x00	; 0
    1b7e:	88 23       	and	r24, r24
    1b80:	19 f0       	breq	.+6      	; 0x1b88 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	89 83       	std	Y+1, r24	; 0x01
    1b86:	49 c0       	rjmp	.+146    	; 0x1c1a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b88:	19 82       	std	Y+1, r1	; 0x01
    1b8a:	47 c0       	rjmp	.+142    	; 0x1c1a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b8c:	e6 e3       	ldi	r30, 0x36	; 54
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a9 01       	movw	r20, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <GPIO_readPin+0xae>
    1ba0:	55 95       	asr	r21
    1ba2:	47 95       	ror	r20
    1ba4:	8a 95       	dec	r24
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <GPIO_readPin+0xaa>
    1ba8:	ca 01       	movw	r24, r20
    1baa:	81 70       	andi	r24, 0x01	; 1
    1bac:	90 70       	andi	r25, 0x00	; 0
    1bae:	88 23       	and	r24, r24
    1bb0:	19 f0       	breq	.+6      	; 0x1bb8 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	31 c0       	rjmp	.+98     	; 0x1c1a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bb8:	19 82       	std	Y+1, r1	; 0x01
    1bba:	2f c0       	rjmp	.+94     	; 0x1c1a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1bbc:	e3 e3       	ldi	r30, 0x33	; 51
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a9 01       	movw	r20, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <GPIO_readPin+0xde>
    1bd0:	55 95       	asr	r21
    1bd2:	47 95       	ror	r20
    1bd4:	8a 95       	dec	r24
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <GPIO_readPin+0xda>
    1bd8:	ca 01       	movw	r24, r20
    1bda:	81 70       	andi	r24, 0x01	; 1
    1bdc:	90 70       	andi	r25, 0x00	; 0
    1bde:	88 23       	and	r24, r24
    1be0:	19 f0       	breq	.+6      	; 0x1be8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	19 c0       	rjmp	.+50     	; 0x1c1a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1be8:	19 82       	std	Y+1, r1	; 0x01
    1bea:	17 c0       	rjmp	.+46     	; 0x1c1a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1bec:	e0 e3       	ldi	r30, 0x30	; 48
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a9 01       	movw	r20, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <GPIO_readPin+0x10e>
    1c00:	55 95       	asr	r21
    1c02:	47 95       	ror	r20
    1c04:	8a 95       	dec	r24
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <GPIO_readPin+0x10a>
    1c08:	ca 01       	movw	r24, r20
    1c0a:	81 70       	andi	r24, 0x01	; 1
    1c0c:	90 70       	andi	r25, 0x00	; 0
    1c0e:	88 23       	and	r24, r24
    1c10:	19 f0       	breq	.+6      	; 0x1c18 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	01 c0       	rjmp	.+2      	; 0x1c1a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c18:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <GPIO_setupPortDirection+0x6>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <GPIO_setupPortDirection+0x8>
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	84 30       	cpi	r24, 0x04	; 4
    1c40:	90 f5       	brcc	.+100    	; 0x1ca6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	3c 83       	std	Y+4, r19	; 0x04
    1c4a:	2b 83       	std	Y+3, r18	; 0x03
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	91 05       	cpc	r25, r1
    1c54:	d1 f0       	breq	.+52     	; 0x1c8a <GPIO_setupPortDirection+0x5e>
    1c56:	2b 81       	ldd	r18, Y+3	; 0x03
    1c58:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <GPIO_setupPortDirection+0x3e>
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <GPIO_setupPortDirection+0x54>
    1c68:	1e c0       	rjmp	.+60     	; 0x1ca6 <GPIO_setupPortDirection+0x7a>
    1c6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c6e:	22 30       	cpi	r18, 0x02	; 2
    1c70:	31 05       	cpc	r19, r1
    1c72:	81 f0       	breq	.+32     	; 0x1c94 <GPIO_setupPortDirection+0x68>
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	83 30       	cpi	r24, 0x03	; 3
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	81 f0       	breq	.+32     	; 0x1c9e <GPIO_setupPortDirection+0x72>
    1c7e:	13 c0       	rjmp	.+38     	; 0x1ca6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c80:	ea e3       	ldi	r30, 0x3A	; 58
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	80 83       	st	Z, r24
    1c88:	0e c0       	rjmp	.+28     	; 0x1ca6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c8a:	e7 e3       	ldi	r30, 0x37	; 55
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	80 83       	st	Z, r24
    1c92:	09 c0       	rjmp	.+18     	; 0x1ca6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c94:	e4 e3       	ldi	r30, 0x34	; 52
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	80 83       	st	Z, r24
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c9e:	e1 e3       	ldi	r30, 0x31	; 49
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <GPIO_writePort+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <GPIO_writePort+0x8>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	90 f5       	brcc	.+100    	; 0x1d2e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3c 83       	std	Y+4, r19	; 0x04
    1cd2:	2b 83       	std	Y+3, r18	; 0x03
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	d1 f0       	breq	.+52     	; 0x1d12 <GPIO_writePort+0x5e>
    1cde:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <GPIO_writePort+0x3e>
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <GPIO_writePort+0x54>
    1cf0:	1e c0       	rjmp	.+60     	; 0x1d2e <GPIO_writePort+0x7a>
    1cf2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	81 f0       	breq	.+32     	; 0x1d1c <GPIO_writePort+0x68>
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	81 f0       	breq	.+32     	; 0x1d26 <GPIO_writePort+0x72>
    1d06:	13 c0       	rjmp	.+38     	; 0x1d2e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d08:	eb e3       	ldi	r30, 0x3B	; 59
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	80 83       	st	Z, r24
    1d10:	0e c0       	rjmp	.+28     	; 0x1d2e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d12:	e8 e3       	ldi	r30, 0x38	; 56
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	80 83       	st	Z, r24
    1d1a:	09 c0       	rjmp	.+18     	; 0x1d2e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d1c:	e5 e3       	ldi	r30, 0x35	; 53
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	80 83       	st	Z, r24
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d26:	e2 e3       	ldi	r30, 0x32	; 50
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <GPIO_readPort+0x6>
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <GPIO_readPort+0x8>
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d4a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	84 30       	cpi	r24, 0x04	; 4
    1d50:	90 f5       	brcc	.+100    	; 0x1db6 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	3c 83       	std	Y+4, r19	; 0x04
    1d5a:	2b 83       	std	Y+3, r18	; 0x03
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	91 05       	cpc	r25, r1
    1d64:	d1 f0       	breq	.+52     	; 0x1d9a <GPIO_readPort+0x5e>
    1d66:	2b 81       	ldd	r18, Y+3	; 0x03
    1d68:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <GPIO_readPort+0x3e>
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	61 f0       	breq	.+24     	; 0x1d90 <GPIO_readPort+0x54>
    1d78:	1e c0       	rjmp	.+60     	; 0x1db6 <GPIO_readPort+0x7a>
    1d7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7e:	22 30       	cpi	r18, 0x02	; 2
    1d80:	31 05       	cpc	r19, r1
    1d82:	81 f0       	breq	.+32     	; 0x1da4 <GPIO_readPort+0x68>
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	81 f0       	breq	.+32     	; 0x1dae <GPIO_readPort+0x72>
    1d8e:	13 c0       	rjmp	.+38     	; 0x1db6 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d90:	e9 e3       	ldi	r30, 0x39	; 57
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	0e c0       	rjmp	.+28     	; 0x1db6 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d9a:	e6 e3       	ldi	r30, 0x36	; 54
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	89 83       	std	Y+1, r24	; 0x01
    1da2:	09 c0       	rjmp	.+18     	; 0x1db6 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1da4:	e3 e3       	ldi	r30, 0x33	; 51
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	04 c0       	rjmp	.+8      	; 0x1db6 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1dae:	e0 e3       	ldi	r30, 0x30	; 48
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <LCD_init>:
#include "lcd.h"
#include "gpio.h"
#include "common_macros.h"


void LCD_init(void){
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	2e 97       	sbiw	r28, 0x0e	; 14
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	cd bf       	out	0x3d, r28	; 61

	//set up RS,E,DATA
	GPIO_setupPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    1dda:	82 e0       	ldi	r24, 0x02	; 2
    1ddc:	64 e0       	ldi	r22, 0x04	; 4
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(E_PORT,E_PIN,PIN_OUTPUT);
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	65 e0       	ldi	r22, 0x05	; 5
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_setupPinDirection>

#if(LCD_DATA_BITS_MODE==8)
	GPIO_setupPortDirection(DATA_PORT_ID,PORT_OUTPUT);
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	6f ef       	ldi	r22, 0xFF	; 255
    1df2:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1df6:	88 e3       	ldi	r24, 0x38	; 56
    1df8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_sendCommand>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 ea       	ldi	r26, 0xA0	; 160
    1e02:	b1 e4       	ldi	r27, 0x41	; 65
    1e04:	8b 87       	std	Y+11, r24	; 0x0b
    1e06:	9c 87       	std	Y+12, r25	; 0x0c
    1e08:	ad 87       	std	Y+13, r26	; 0x0d
    1e0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	4a ef       	ldi	r20, 0xFA	; 250
    1e1a:	54 e4       	ldi	r21, 0x44	; 68
    1e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	8f 83       	std	Y+7, r24	; 0x07
    1e26:	98 87       	std	Y+8, r25	; 0x08
    1e28:	a9 87       	std	Y+9, r26	; 0x09
    1e2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2e:	78 85       	ldd	r23, Y+8	; 0x08
    1e30:	89 85       	ldd	r24, Y+9	; 0x09
    1e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e8       	ldi	r20, 0x80	; 128
    1e3a:	5f e3       	ldi	r21, 0x3F	; 63
    1e3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e40:	88 23       	and	r24, r24
    1e42:	2c f4       	brge	.+10     	; 0x1e4e <LCD_init+0x88>
		__ticks = 1;
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	9e 83       	std	Y+6, r25	; 0x06
    1e4a:	8d 83       	std	Y+5, r24	; 0x05
    1e4c:	3f c0       	rjmp	.+126    	; 0x1ecc <LCD_init+0x106>
	else if (__tmp > 65535)
    1e4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e50:	78 85       	ldd	r23, Y+8	; 0x08
    1e52:	89 85       	ldd	r24, Y+9	; 0x09
    1e54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	4f e7       	ldi	r20, 0x7F	; 127
    1e5c:	57 e4       	ldi	r21, 0x47	; 71
    1e5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e62:	18 16       	cp	r1, r24
    1e64:	4c f5       	brge	.+82     	; 0x1eb8 <LCD_init+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e2       	ldi	r20, 0x20	; 32
    1e74:	51 e4       	ldi	r21, 0x41	; 65
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	0f c0       	rjmp	.+30     	; 0x1eae <LCD_init+0xe8>
    1e90:	88 ec       	ldi	r24, 0xC8	; 200
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9c 83       	std	Y+4, r25	; 0x04
    1e96:	8b 83       	std	Y+3, r24	; 0x03
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <LCD_init+0xd6>
    1ea0:	9c 83       	std	Y+4, r25	; 0x04
    1ea2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	69 f7       	brne	.-38     	; 0x1e90 <LCD_init+0xca>
    1eb6:	14 c0       	rjmp	.+40     	; 0x1ee0 <LCD_init+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eba:	78 85       	ldd	r23, Y+8	; 0x08
    1ebc:	89 85       	ldd	r24, Y+9	; 0x09
    1ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	9a 83       	std	Y+2, r25	; 0x02
    1ed2:	89 83       	std	Y+1, r24	; 0x01
    1ed4:	89 81       	ldd	r24, Y+1	; 0x01
    1ed6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_init+0x112>
    1edc:	9a 83       	std	Y+2, r25	; 0x02
    1ede:	89 83       	std	Y+1, r24	; 0x01

	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif

	_delay_ms(20);
	LCD_sendCommand(LCD_CURSOR_OFF);
    1ee0:	8c e0       	ldi	r24, 0x0C	; 12
    1ee2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_sendCommand>

}
    1eec:	2e 96       	adiw	r28, 0x0e	; 14
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	de bf       	out	0x3e, r29	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	cd bf       	out	0x3d, r28	; 61
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <LCD_sendCommand>:

void LCD_sendCommand(uint8 command){
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	e9 97       	sbiw	r28, 0x39	; 57
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	89 af       	std	Y+57, r24	; 0x39

	//RS=O,E=1,SEND,E=0, and delay between
	GPIO_writePin(RS_PORT,RS_PIN,LOGIC_LOW);
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	64 e0       	ldi	r22, 0x04	; 4
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e8       	ldi	r26, 0x80	; 128
    1f24:	bf e3       	ldi	r27, 0x3F	; 63
    1f26:	8d ab       	std	Y+53, r24	; 0x35
    1f28:	9e ab       	std	Y+54, r25	; 0x36
    1f2a:	af ab       	std	Y+55, r26	; 0x37
    1f2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f30:	7e a9       	ldd	r23, Y+54	; 0x36
    1f32:	8f a9       	ldd	r24, Y+55	; 0x37
    1f34:	98 ad       	ldd	r25, Y+56	; 0x38
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a ef       	ldi	r20, 0xFA	; 250
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	89 ab       	std	Y+49, r24	; 0x31
    1f48:	9a ab       	std	Y+50, r25	; 0x32
    1f4a:	ab ab       	std	Y+51, r26	; 0x33
    1f4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f50:	7a a9       	ldd	r23, Y+50	; 0x32
    1f52:	8b a9       	ldd	r24, Y+51	; 0x33
    1f54:	9c a9       	ldd	r25, Y+52	; 0x34
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <LCD_sendCommand+0x72>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	98 ab       	std	Y+48, r25	; 0x30
    1f6c:	8f a7       	std	Y+47, r24	; 0x2f
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1f70:	69 a9       	ldd	r22, Y+49	; 0x31
    1f72:	7a a9       	ldd	r23, Y+50	; 0x32
    1f74:	8b a9       	ldd	r24, Y+51	; 0x33
    1f76:	9c a9       	ldd	r25, Y+52	; 0x34
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	4c f5       	brge	.+82     	; 0x1fda <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	6d a9       	ldd	r22, Y+53	; 0x35
    1f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	98 ab       	std	Y+48, r25	; 0x30
    1fae:	8f a7       	std	Y+47, r24	; 0x2f
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <LCD_sendCommand+0xd2>
    1fb2:	88 ec       	ldi	r24, 0xC8	; 200
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9e a7       	std	Y+46, r25	; 0x2e
    1fb8:	8d a7       	std	Y+45, r24	; 0x2d
    1fba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <LCD_sendCommand+0xc0>
    1fc2:	9e a7       	std	Y+46, r25	; 0x2e
    1fc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	98 ab       	std	Y+48, r25	; 0x30
    1fce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <LCD_sendCommand+0xb4>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	69 a9       	ldd	r22, Y+49	; 0x31
    1fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fde:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	98 ab       	std	Y+48, r25	; 0x30
    1fec:	8f a7       	std	Y+47, r24	; 0x2f
    1fee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff2:	9c a7       	std	Y+44, r25	; 0x2c
    1ff4:	8b a7       	std	Y+43, r24	; 0x2b
    1ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_sendCommand+0xfc>
    1ffe:	9c a7       	std	Y+44, r25	; 0x2c
    2000:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_HIGH);
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	65 e0       	ldi	r22, 0x05	; 5
    2006:	41 e0       	ldi	r20, 0x01	; 1
    2008:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	a0 e8       	ldi	r26, 0x80	; 128
    2012:	bf e3       	ldi	r27, 0x3F	; 63
    2014:	8f a3       	std	Y+39, r24	; 0x27
    2016:	98 a7       	std	Y+40, r25	; 0x28
    2018:	a9 a7       	std	Y+41, r26	; 0x29
    201a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	6f a1       	ldd	r22, Y+39	; 0x27
    201e:	78 a5       	ldd	r23, Y+40	; 0x28
    2020:	89 a5       	ldd	r24, Y+41	; 0x29
    2022:	9a a5       	ldd	r25, Y+42	; 0x2a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	8b a3       	std	Y+35, r24	; 0x23
    2036:	9c a3       	std	Y+36, r25	; 0x24
    2038:	ad a3       	std	Y+37, r26	; 0x25
    203a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    203c:	6b a1       	ldd	r22, Y+35	; 0x23
    203e:	7c a1       	ldd	r23, Y+36	; 0x24
    2040:	8d a1       	ldd	r24, Y+37	; 0x25
    2042:	9e a1       	ldd	r25, Y+38	; 0x26
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <LCD_sendCommand+0x160>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9a a3       	std	Y+34, r25	; 0x22
    205a:	89 a3       	std	Y+33, r24	; 0x21
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    205e:	6b a1       	ldd	r22, Y+35	; 0x23
    2060:	7c a1       	ldd	r23, Y+36	; 0x24
    2062:	8d a1       	ldd	r24, Y+37	; 0x25
    2064:	9e a1       	ldd	r25, Y+38	; 0x26
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	6f a1       	ldd	r22, Y+39	; 0x27
    2078:	78 a5       	ldd	r23, Y+40	; 0x28
    207a:	89 a5       	ldd	r24, Y+41	; 0x29
    207c:	9a a5       	ldd	r25, Y+42	; 0x2a
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9a a3       	std	Y+34, r25	; 0x22
    209c:	89 a3       	std	Y+33, r24	; 0x21
    209e:	0f c0       	rjmp	.+30     	; 0x20be <LCD_sendCommand+0x1c0>
    20a0:	88 ec       	ldi	r24, 0xC8	; 200
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	98 a3       	std	Y+32, r25	; 0x20
    20a6:	8f 8f       	std	Y+31, r24	; 0x1f
    20a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20aa:	98 a1       	ldd	r25, Y+32	; 0x20
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <LCD_sendCommand+0x1ae>
    20b0:	98 a3       	std	Y+32, r25	; 0x20
    20b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b4:	89 a1       	ldd	r24, Y+33	; 0x21
    20b6:	9a a1       	ldd	r25, Y+34	; 0x22
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	9a a3       	std	Y+34, r25	; 0x22
    20bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	89 a1       	ldd	r24, Y+33	; 0x21
    20c0:	9a a1       	ldd	r25, Y+34	; 0x22
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <LCD_sendCommand+0x1a2>
    20c6:	14 c0       	rjmp	.+40     	; 0x20f0 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	6b a1       	ldd	r22, Y+35	; 0x23
    20ca:	7c a1       	ldd	r23, Y+36	; 0x24
    20cc:	8d a1       	ldd	r24, Y+37	; 0x25
    20ce:	9e a1       	ldd	r25, Y+38	; 0x26
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
    20dc:	89 a1       	ldd	r24, Y+33	; 0x21
    20de:	9a a1       	ldd	r25, Y+34	; 0x22
    20e0:	9e 8f       	std	Y+30, r25	; 0x1e
    20e2:	8d 8f       	std	Y+29, r24	; 0x1d
    20e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <LCD_sendCommand+0x1ea>
    20ec:	9e 8f       	std	Y+30, r25	; 0x1e
    20ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(DATA_PORT_ID,command);
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	69 ad       	ldd	r22, Y+57	; 0x39
    20f4:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePort>
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	a0 e8       	ldi	r26, 0x80	; 128
    20fe:	bf e3       	ldi	r27, 0x3F	; 63
    2100:	89 8f       	std	Y+25, r24	; 0x19
    2102:	9a 8f       	std	Y+26, r25	; 0x1a
    2104:	ab 8f       	std	Y+27, r26	; 0x1b
    2106:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2108:	69 8d       	ldd	r22, Y+25	; 0x19
    210a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	54 e4       	ldi	r21, 0x44	; 68
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	8d 8b       	std	Y+21, r24	; 0x15
    2122:	9e 8b       	std	Y+22, r25	; 0x16
    2124:	af 8b       	std	Y+23, r26	; 0x17
    2126:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2128:	6d 89       	ldd	r22, Y+21	; 0x15
    212a:	7e 89       	ldd	r23, Y+22	; 0x16
    212c:	8f 89       	ldd	r24, Y+23	; 0x17
    212e:	98 8d       	ldd	r25, Y+24	; 0x18
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	2c f4       	brge	.+10     	; 0x214a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9c 8b       	std	Y+20, r25	; 0x14
    2146:	8b 8b       	std	Y+19, r24	; 0x13
    2148:	3f c0       	rjmp	.+126    	; 0x21c8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    214a:	6d 89       	ldd	r22, Y+21	; 0x15
    214c:	7e 89       	ldd	r23, Y+22	; 0x16
    214e:	8f 89       	ldd	r24, Y+23	; 0x17
    2150:	98 8d       	ldd	r25, Y+24	; 0x18
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	57 e4       	ldi	r21, 0x47	; 71
    215a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	4c f5       	brge	.+82     	; 0x21b4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2162:	69 8d       	ldd	r22, Y+25	; 0x19
    2164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	0f c0       	rjmp	.+30     	; 0x21aa <LCD_sendCommand+0x2ac>
    218c:	88 ec       	ldi	r24, 0xC8	; 200
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	9a 8b       	std	Y+18, r25	; 0x12
    2192:	89 8b       	std	Y+17, r24	; 0x11
    2194:	89 89       	ldd	r24, Y+17	; 0x11
    2196:	9a 89       	ldd	r25, Y+18	; 0x12
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <LCD_sendCommand+0x29a>
    219c:	9a 8b       	std	Y+18, r25	; 0x12
    219e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a0:	8b 89       	ldd	r24, Y+19	; 0x13
    21a2:	9c 89       	ldd	r25, Y+20	; 0x14
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	9c 8b       	std	Y+20, r25	; 0x14
    21a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21aa:	8b 89       	ldd	r24, Y+19	; 0x13
    21ac:	9c 89       	ldd	r25, Y+20	; 0x14
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	69 f7       	brne	.-38     	; 0x218c <LCD_sendCommand+0x28e>
    21b2:	14 c0       	rjmp	.+40     	; 0x21dc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b4:	6d 89       	ldd	r22, Y+21	; 0x15
    21b6:	7e 89       	ldd	r23, Y+22	; 0x16
    21b8:	8f 89       	ldd	r24, Y+23	; 0x17
    21ba:	98 8d       	ldd	r25, Y+24	; 0x18
    21bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	9c 8b       	std	Y+20, r25	; 0x14
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ca:	9c 89       	ldd	r25, Y+20	; 0x14
    21cc:	98 8b       	std	Y+16, r25	; 0x10
    21ce:	8f 87       	std	Y+15, r24	; 0x0f
    21d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d2:	98 89       	ldd	r25, Y+16	; 0x10
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	f1 f7       	brne	.-4      	; 0x21d4 <LCD_sendCommand+0x2d6>
    21d8:	98 8b       	std	Y+16, r25	; 0x10
    21da:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(DATA_PORT_ID,DATA_PORT_FRIST_PIN+2,GET_BIT(command,2));
	GPIO_writePin(DATA_PORT_ID,DATA_PORT_FRIST_PIN+3,GET_BIT(command,3));
#endif

	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_LOW);
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	65 e0       	ldi	r22, 0x05	; 5
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a0 e8       	ldi	r26, 0x80	; 128
    21ec:	bf e3       	ldi	r27, 0x3F	; 63
    21ee:	8b 87       	std	Y+11, r24	; 0x0b
    21f0:	9c 87       	std	Y+12, r25	; 0x0c
    21f2:	ad 87       	std	Y+13, r26	; 0x0d
    21f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a ef       	ldi	r20, 0xFA	; 250
    2204:	54 e4       	ldi	r21, 0x44	; 68
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	8f 83       	std	Y+7, r24	; 0x07
    2210:	98 87       	std	Y+8, r25	; 0x08
    2212:	a9 87       	std	Y+9, r26	; 0x09
    2214:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2216:	6f 81       	ldd	r22, Y+7	; 0x07
    2218:	78 85       	ldd	r23, Y+8	; 0x08
    221a:	89 85       	ldd	r24, Y+9	; 0x09
    221c:	9a 85       	ldd	r25, Y+10	; 0x0a
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	2c f4       	brge	.+10     	; 0x2238 <LCD_sendCommand+0x33a>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
    2236:	3f c0       	rjmp	.+126    	; 0x22b6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2238:	6f 81       	ldd	r22, Y+7	; 0x07
    223a:	78 85       	ldd	r23, Y+8	; 0x08
    223c:	89 85       	ldd	r24, Y+9	; 0x09
    223e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	3f ef       	ldi	r19, 0xFF	; 255
    2244:	4f e7       	ldi	r20, 0x7F	; 127
    2246:	57 e4       	ldi	r21, 0x47	; 71
    2248:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224c:	18 16       	cp	r1, r24
    224e:	4c f5       	brge	.+82     	; 0x22a2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2250:	6b 85       	ldd	r22, Y+11	; 0x0b
    2252:	7c 85       	ldd	r23, Y+12	; 0x0c
    2254:	8d 85       	ldd	r24, Y+13	; 0x0d
    2256:	9e 85       	ldd	r25, Y+14	; 0x0e
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e2       	ldi	r20, 0x20	; 32
    225e:	51 e4       	ldi	r21, 0x41	; 65
    2260:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	9e 83       	std	Y+6, r25	; 0x06
    2276:	8d 83       	std	Y+5, r24	; 0x05
    2278:	0f c0       	rjmp	.+30     	; 0x2298 <LCD_sendCommand+0x39a>
    227a:	88 ec       	ldi	r24, 0xC8	; 200
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LCD_sendCommand+0x388>
    228a:	9c 83       	std	Y+4, r25	; 0x04
    228c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	9e 83       	std	Y+6, r25	; 0x06
    2296:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	9e 81       	ldd	r25, Y+6	; 0x06
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	69 f7       	brne	.-38     	; 0x227a <LCD_sendCommand+0x37c>
    22a0:	14 c0       	rjmp	.+40     	; 0x22ca <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a2:	6f 81       	ldd	r22, Y+7	; 0x07
    22a4:	78 85       	ldd	r23, Y+8	; 0x08
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	f1 f7       	brne	.-4      	; 0x22c2 <LCD_sendCommand+0x3c4>
    22c6:	9a 83       	std	Y+2, r25	; 0x02
    22c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    22ca:	e9 96       	adiw	r28, 0x39	; 57
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data){
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	e9 97       	sbiw	r28, 0x39	; 57
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
    22f0:	89 af       	std	Y+57, r24	; 0x39

	//RS=1,E=1,SEND,E=0, and delay between
	GPIO_writePin(RS_PORT,RS_PIN,LOGIC_HIGH);
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	64 e0       	ldi	r22, 0x04	; 4
    22f6:	41 e0       	ldi	r20, 0x01	; 1
    22f8:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 e8       	ldi	r26, 0x80	; 128
    2302:	bf e3       	ldi	r27, 0x3F	; 63
    2304:	8d ab       	std	Y+53, r24	; 0x35
    2306:	9e ab       	std	Y+54, r25	; 0x36
    2308:	af ab       	std	Y+55, r26	; 0x37
    230a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	6d a9       	ldd	r22, Y+53	; 0x35
    230e:	7e a9       	ldd	r23, Y+54	; 0x36
    2310:	8f a9       	ldd	r24, Y+55	; 0x37
    2312:	98 ad       	ldd	r25, Y+56	; 0x38
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a ef       	ldi	r20, 0xFA	; 250
    231a:	54 e4       	ldi	r21, 0x44	; 68
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	89 ab       	std	Y+49, r24	; 0x31
    2326:	9a ab       	std	Y+50, r25	; 0x32
    2328:	ab ab       	std	Y+51, r26	; 0x33
    232a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    232c:	69 a9       	ldd	r22, Y+49	; 0x31
    232e:	7a a9       	ldd	r23, Y+50	; 0x32
    2330:	8b a9       	ldd	r24, Y+51	; 0x33
    2332:	9c a9       	ldd	r25, Y+52	; 0x34
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	98 ab       	std	Y+48, r25	; 0x30
    234a:	8f a7       	std	Y+47, r24	; 0x2f
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    234e:	69 a9       	ldd	r22, Y+49	; 0x31
    2350:	7a a9       	ldd	r23, Y+50	; 0x32
    2352:	8b a9       	ldd	r24, Y+51	; 0x33
    2354:	9c a9       	ldd	r25, Y+52	; 0x34
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	4c f5       	brge	.+82     	; 0x23b8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	6d a9       	ldd	r22, Y+53	; 0x35
    2368:	7e a9       	ldd	r23, Y+54	; 0x36
    236a:	8f a9       	ldd	r24, Y+55	; 0x37
    236c:	98 ad       	ldd	r25, Y+56	; 0x38
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	98 ab       	std	Y+48, r25	; 0x30
    238c:	8f a7       	std	Y+47, r24	; 0x2f
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <LCD_displayCharacter+0xd2>
    2390:	88 ec       	ldi	r24, 0xC8	; 200
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9e a7       	std	Y+46, r25	; 0x2e
    2396:	8d a7       	std	Y+45, r24	; 0x2d
    2398:	8d a5       	ldd	r24, Y+45	; 0x2d
    239a:	9e a5       	ldd	r25, Y+46	; 0x2e
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <LCD_displayCharacter+0xc0>
    23a0:	9e a7       	std	Y+46, r25	; 0x2e
    23a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23a6:	98 a9       	ldd	r25, Y+48	; 0x30
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	98 ab       	std	Y+48, r25	; 0x30
    23ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b0:	98 a9       	ldd	r25, Y+48	; 0x30
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <LCD_displayCharacter+0xb4>
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	69 a9       	ldd	r22, Y+49	; 0x31
    23ba:	7a a9       	ldd	r23, Y+50	; 0x32
    23bc:	8b a9       	ldd	r24, Y+51	; 0x33
    23be:	9c a9       	ldd	r25, Y+52	; 0x34
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	98 ab       	std	Y+48, r25	; 0x30
    23ca:	8f a7       	std	Y+47, r24	; 0x2f
    23cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ce:	98 a9       	ldd	r25, Y+48	; 0x30
    23d0:	9c a7       	std	Y+44, r25	; 0x2c
    23d2:	8b a7       	std	Y+43, r24	; 0x2b
    23d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_displayCharacter+0xfc>
    23dc:	9c a7       	std	Y+44, r25	; 0x2c
    23de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_HIGH);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	65 e0       	ldi	r22, 0x05	; 5
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	a0 e8       	ldi	r26, 0x80	; 128
    23f0:	bf e3       	ldi	r27, 0x3F	; 63
    23f2:	8f a3       	std	Y+39, r24	; 0x27
    23f4:	98 a7       	std	Y+40, r25	; 0x28
    23f6:	a9 a7       	std	Y+41, r26	; 0x29
    23f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fa:	6f a1       	ldd	r22, Y+39	; 0x27
    23fc:	78 a5       	ldd	r23, Y+40	; 0x28
    23fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2400:	9a a5       	ldd	r25, Y+42	; 0x2a
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	4a ef       	ldi	r20, 0xFA	; 250
    2408:	54 e4       	ldi	r21, 0x44	; 68
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8b a3       	std	Y+35, r24	; 0x23
    2414:	9c a3       	std	Y+36, r25	; 0x24
    2416:	ad a3       	std	Y+37, r26	; 0x25
    2418:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    241a:	6b a1       	ldd	r22, Y+35	; 0x23
    241c:	7c a1       	ldd	r23, Y+36	; 0x24
    241e:	8d a1       	ldd	r24, Y+37	; 0x25
    2420:	9e a1       	ldd	r25, Y+38	; 0x26
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e8       	ldi	r20, 0x80	; 128
    2428:	5f e3       	ldi	r21, 0x3F	; 63
    242a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    242e:	88 23       	and	r24, r24
    2430:	2c f4       	brge	.+10     	; 0x243c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	9a a3       	std	Y+34, r25	; 0x22
    2438:	89 a3       	std	Y+33, r24	; 0x21
    243a:	3f c0       	rjmp	.+126    	; 0x24ba <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    243c:	6b a1       	ldd	r22, Y+35	; 0x23
    243e:	7c a1       	ldd	r23, Y+36	; 0x24
    2440:	8d a1       	ldd	r24, Y+37	; 0x25
    2442:	9e a1       	ldd	r25, Y+38	; 0x26
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	3f ef       	ldi	r19, 0xFF	; 255
    2448:	4f e7       	ldi	r20, 0x7F	; 127
    244a:	57 e4       	ldi	r21, 0x47	; 71
    244c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2450:	18 16       	cp	r1, r24
    2452:	4c f5       	brge	.+82     	; 0x24a6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2454:	6f a1       	ldd	r22, Y+39	; 0x27
    2456:	78 a5       	ldd	r23, Y+40	; 0x28
    2458:	89 a5       	ldd	r24, Y+41	; 0x29
    245a:	9a a5       	ldd	r25, Y+42	; 0x2a
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	40 e2       	ldi	r20, 0x20	; 32
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	bc 01       	movw	r22, r24
    246e:	cd 01       	movw	r24, r26
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	9a a3       	std	Y+34, r25	; 0x22
    247a:	89 a3       	std	Y+33, r24	; 0x21
    247c:	0f c0       	rjmp	.+30     	; 0x249c <LCD_displayCharacter+0x1c0>
    247e:	88 ec       	ldi	r24, 0xC8	; 200
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	98 a3       	std	Y+32, r25	; 0x20
    2484:	8f 8f       	std	Y+31, r24	; 0x1f
    2486:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2488:	98 a1       	ldd	r25, Y+32	; 0x20
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <LCD_displayCharacter+0x1ae>
    248e:	98 a3       	std	Y+32, r25	; 0x20
    2490:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2492:	89 a1       	ldd	r24, Y+33	; 0x21
    2494:	9a a1       	ldd	r25, Y+34	; 0x22
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	9a a3       	std	Y+34, r25	; 0x22
    249a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	89 a1       	ldd	r24, Y+33	; 0x21
    249e:	9a a1       	ldd	r25, Y+34	; 0x22
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	69 f7       	brne	.-38     	; 0x247e <LCD_displayCharacter+0x1a2>
    24a4:	14 c0       	rjmp	.+40     	; 0x24ce <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	6b a1       	ldd	r22, Y+35	; 0x23
    24a8:	7c a1       	ldd	r23, Y+36	; 0x24
    24aa:	8d a1       	ldd	r24, Y+37	; 0x25
    24ac:	9e a1       	ldd	r25, Y+38	; 0x26
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9a a3       	std	Y+34, r25	; 0x22
    24b8:	89 a3       	std	Y+33, r24	; 0x21
    24ba:	89 a1       	ldd	r24, Y+33	; 0x21
    24bc:	9a a1       	ldd	r25, Y+34	; 0x22
    24be:	9e 8f       	std	Y+30, r25	; 0x1e
    24c0:	8d 8f       	std	Y+29, r24	; 0x1d
    24c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_displayCharacter+0x1ea>
    24ca:	9e 8f       	std	Y+30, r25	; 0x1e
    24cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE==8)
	GPIO_writePort(DATA_PORT_ID,data);
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	69 ad       	ldd	r22, Y+57	; 0x39
    24d2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <GPIO_writePort>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	a0 e8       	ldi	r26, 0x80	; 128
    24dc:	bf e3       	ldi	r27, 0x3F	; 63
    24de:	89 8f       	std	Y+25, r24	; 0x19
    24e0:	9a 8f       	std	Y+26, r25	; 0x1a
    24e2:	ab 8f       	std	Y+27, r26	; 0x1b
    24e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	69 8d       	ldd	r22, Y+25	; 0x19
    24e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a ef       	ldi	r20, 0xFA	; 250
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	8d 8b       	std	Y+21, r24	; 0x15
    2500:	9e 8b       	std	Y+22, r25	; 0x16
    2502:	af 8b       	std	Y+23, r26	; 0x17
    2504:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2506:	6d 89       	ldd	r22, Y+21	; 0x15
    2508:	7e 89       	ldd	r23, Y+22	; 0x16
    250a:	8f 89       	ldd	r24, Y+23	; 0x17
    250c:	98 8d       	ldd	r25, Y+24	; 0x18
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	2c f4       	brge	.+10     	; 0x2528 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9c 8b       	std	Y+20, r25	; 0x14
    2524:	8b 8b       	std	Y+19, r24	; 0x13
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2528:	6d 89       	ldd	r22, Y+21	; 0x15
    252a:	7e 89       	ldd	r23, Y+22	; 0x16
    252c:	8f 89       	ldd	r24, Y+23	; 0x17
    252e:	98 8d       	ldd	r25, Y+24	; 0x18
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	4f e7       	ldi	r20, 0x7F	; 127
    2536:	57 e4       	ldi	r21, 0x47	; 71
    2538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    253c:	18 16       	cp	r1, r24
    253e:	4c f5       	brge	.+82     	; 0x2592 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	69 8d       	ldd	r22, Y+25	; 0x19
    2542:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2544:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2546:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9c 8b       	std	Y+20, r25	; 0x14
    2566:	8b 8b       	std	Y+19, r24	; 0x13
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <LCD_displayCharacter+0x2ac>
    256a:	88 ec       	ldi	r24, 0xC8	; 200
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9a 8b       	std	Y+18, r25	; 0x12
    2570:	89 8b       	std	Y+17, r24	; 0x11
    2572:	89 89       	ldd	r24, Y+17	; 0x11
    2574:	9a 89       	ldd	r25, Y+18	; 0x12
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <LCD_displayCharacter+0x29a>
    257a:	9a 8b       	std	Y+18, r25	; 0x12
    257c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	8b 89       	ldd	r24, Y+19	; 0x13
    2580:	9c 89       	ldd	r25, Y+20	; 0x14
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	9c 8b       	std	Y+20, r25	; 0x14
    2586:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	8b 89       	ldd	r24, Y+19	; 0x13
    258a:	9c 89       	ldd	r25, Y+20	; 0x14
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	69 f7       	brne	.-38     	; 0x256a <LCD_displayCharacter+0x28e>
    2590:	14 c0       	rjmp	.+40     	; 0x25ba <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	6d 89       	ldd	r22, Y+21	; 0x15
    2594:	7e 89       	ldd	r23, Y+22	; 0x16
    2596:	8f 89       	ldd	r24, Y+23	; 0x17
    2598:	98 8d       	ldd	r25, Y+24	; 0x18
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9c 8b       	std	Y+20, r25	; 0x14
    25a4:	8b 8b       	std	Y+19, r24	; 0x13
    25a6:	8b 89       	ldd	r24, Y+19	; 0x13
    25a8:	9c 89       	ldd	r25, Y+20	; 0x14
    25aa:	98 8b       	std	Y+16, r25	; 0x10
    25ac:	8f 87       	std	Y+15, r24	; 0x0f
    25ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b0:	98 89       	ldd	r25, Y+16	; 0x10
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_displayCharacter+0x2d6>
    25b6:	98 8b       	std	Y+16, r25	; 0x10
    25b8:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(DATA_PORT_ID,DATA_PORT_FRIST_PIN+3,GET_BIT(data,3));

#endif

	_delay_ms(1);
	GPIO_writePin(E_PORT,E_PIN,LOGIC_LOW);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	65 e0       	ldi	r22, 0x05	; 5
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 90 0c 	call	0x1920	; 0x1920 <GPIO_writePin>
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e8       	ldi	r26, 0x80	; 128
    25ca:	bf e3       	ldi	r27, 0x3F	; 63
    25cc:	8b 87       	std	Y+11, r24	; 0x0b
    25ce:	9c 87       	std	Y+12, r25	; 0x0c
    25d0:	ad 87       	std	Y+13, r26	; 0x0d
    25d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25da:	9e 85       	ldd	r25, Y+14	; 0x0e
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	4a ef       	ldi	r20, 0xFA	; 250
    25e2:	54 e4       	ldi	r21, 0x44	; 68
    25e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	8f 83       	std	Y+7, r24	; 0x07
    25ee:	98 87       	std	Y+8, r25	; 0x08
    25f0:	a9 87       	std	Y+9, r26	; 0x09
    25f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f4:	6f 81       	ldd	r22, Y+7	; 0x07
    25f6:	78 85       	ldd	r23, Y+8	; 0x08
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2608:	88 23       	and	r24, r24
    260a:	2c f4       	brge	.+10     	; 0x2616 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	3f c0       	rjmp	.+126    	; 0x2694 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	3f ef       	ldi	r19, 0xFF	; 255
    2622:	4f e7       	ldi	r20, 0x7F	; 127
    2624:	57 e4       	ldi	r21, 0x47	; 71
    2626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    262a:	18 16       	cp	r1, r24
    262c:	4c f5       	brge	.+82     	; 0x2680 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2630:	7c 85       	ldd	r23, Y+12	; 0x0c
    2632:	8d 85       	ldd	r24, Y+13	; 0x0d
    2634:	9e 85       	ldd	r25, Y+14	; 0x0e
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e2       	ldi	r20, 0x20	; 32
    263c:	51 e4       	ldi	r21, 0x41	; 65
    263e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	bc 01       	movw	r22, r24
    2648:	cd 01       	movw	r24, r26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <LCD_displayCharacter+0x39a>
    2658:	88 ec       	ldi	r24, 0xC8	; 200
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_displayCharacter+0x388>
    2668:	9c 83       	std	Y+4, r25	; 0x04
    266a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	9e 83       	std	Y+6, r25	; 0x06
    2674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	9e 81       	ldd	r25, Y+6	; 0x06
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	69 f7       	brne	.-38     	; 0x2658 <LCD_displayCharacter+0x37c>
    267e:	14 c0       	rjmp	.+40     	; 0x26a8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2680:	6f 81       	ldd	r22, Y+7	; 0x07
    2682:	78 85       	ldd	r23, Y+8	; 0x08
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	8d 81       	ldd	r24, Y+5	; 0x05
    2696:	9e 81       	ldd	r25, Y+6	; 0x06
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	9a 81       	ldd	r25, Y+2	; 0x02
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_displayCharacter+0x3c4>
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    26a8:	e9 96       	adiw	r28, 0x39	; 57
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <LCD_displayString>:

void LCD_displayString(const char* str){
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <LCD_displayString+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <LCD_displayString+0x8>
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9c 83       	std	Y+4, r25	; 0x04
    26c8:	8b 83       	std	Y+3, r24	; 0x03

	for(int i=0;str[i]!='\0';i++)
    26ca:	1a 82       	std	Y+2, r1	; 0x02
    26cc:	19 82       	std	Y+1, r1	; 0x01
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <LCD_displayString+0x34>
	{
		LCD_displayCharacter(str[i]);
    26d0:	29 81       	ldd	r18, Y+1	; 0x01
    26d2:	3a 81       	ldd	r19, Y+2	; 0x02
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	fc 01       	movw	r30, r24
    26da:	e2 0f       	add	r30, r18
    26dc:	f3 1f       	adc	r31, r19
    26de:	80 81       	ld	r24, Z
    26e0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <LCD_displayCharacter>

}

void LCD_displayString(const char* str){

	for(int i=0;str[i]!='\0';i++)
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	9a 83       	std	Y+2, r25	; 0x02
    26ec:	89 83       	std	Y+1, r24	; 0x01
    26ee:	29 81       	ldd	r18, Y+1	; 0x01
    26f0:	3a 81       	ldd	r19, Y+2	; 0x02
    26f2:	8b 81       	ldd	r24, Y+3	; 0x03
    26f4:	9c 81       	ldd	r25, Y+4	; 0x04
    26f6:	fc 01       	movw	r30, r24
    26f8:	e2 0f       	add	r30, r18
    26fa:	f3 1f       	adc	r31, r19
    26fc:	80 81       	ld	r24, Z
    26fe:	88 23       	and	r24, r24
    2700:	39 f7       	brne	.-50     	; 0x26d0 <LCD_displayString+0x16>
	{
		LCD_displayCharacter(str[i]);
	}

}
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <LCD_moveCursor>:

void LCD_moveCursor(uint8 row, uint8 col){
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	00 d0       	rcall	.+0      	; 0x2716 <LCD_moveCursor+0x6>
    2716:	00 d0       	rcall	.+0      	; 0x2718 <LCD_moveCursor+0x8>
    2718:	0f 92       	push	r0
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	8a 83       	std	Y+2, r24	; 0x02
    2720:	6b 83       	std	Y+3, r22	; 0x03

	uint8 LCD_address;

	switch(row){
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	28 2f       	mov	r18, r24
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	3d 83       	std	Y+5, r19	; 0x05
    272a:	2c 83       	std	Y+4, r18	; 0x04
    272c:	8c 81       	ldd	r24, Y+4	; 0x04
    272e:	9d 81       	ldd	r25, Y+5	; 0x05
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	91 05       	cpc	r25, r1
    2734:	c1 f0       	breq	.+48     	; 0x2766 <LCD_moveCursor+0x56>
    2736:	2c 81       	ldd	r18, Y+4	; 0x04
    2738:	3d 81       	ldd	r19, Y+5	; 0x05
    273a:	22 30       	cpi	r18, 0x02	; 2
    273c:	31 05       	cpc	r19, r1
    273e:	2c f4       	brge	.+10     	; 0x274a <LCD_moveCursor+0x3a>
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	9d 81       	ldd	r25, Y+5	; 0x05
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	61 f0       	breq	.+24     	; 0x2760 <LCD_moveCursor+0x50>
    2748:	19 c0       	rjmp	.+50     	; 0x277c <LCD_moveCursor+0x6c>
    274a:	2c 81       	ldd	r18, Y+4	; 0x04
    274c:	3d 81       	ldd	r19, Y+5	; 0x05
    274e:	22 30       	cpi	r18, 0x02	; 2
    2750:	31 05       	cpc	r19, r1
    2752:	69 f0       	breq	.+26     	; 0x276e <LCD_moveCursor+0x5e>
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	9d 81       	ldd	r25, Y+5	; 0x05
    2758:	83 30       	cpi	r24, 0x03	; 3
    275a:	91 05       	cpc	r25, r1
    275c:	61 f0       	breq	.+24     	; 0x2776 <LCD_moveCursor+0x66>
    275e:	0e c0       	rjmp	.+28     	; 0x277c <LCD_moveCursor+0x6c>
	case 0:
		LCD_address = 0x00+col;
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	89 83       	std	Y+1, r24	; 0x01
    2764:	0b c0       	rjmp	.+22     	; 0x277c <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_address = 0x40+col;
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	80 5c       	subi	r24, 0xC0	; 192
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	07 c0       	rjmp	.+14     	; 0x277c <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_address = 0x10+col;
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	80 5f       	subi	r24, 0xF0	; 240
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	03 c0       	rjmp	.+6      	; 0x277c <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_address = 0x50+col;
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	80 5b       	subi	r24, 0xB0	; 176
    277a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}

	LCD_sendCommand(LCD_address | LCD_SET_CURSOR_LOCATION);
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	80 68       	ori	r24, 0x80	; 128
    2780:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_sendCommand>

}
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row, uint8 col, const char* str){
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <LCD_displayStringRowColumn+0x6>
    279a:	00 d0       	rcall	.+0      	; 0x279c <LCD_displayStringRowColumn+0x8>
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	89 83       	std	Y+1, r24	; 0x01
    27a2:	6a 83       	std	Y+2, r22	; 0x02
    27a4:	5c 83       	std	Y+4, r21	; 0x04
    27a6:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor(row,col);
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	6a 81       	ldd	r22, Y+2	; 0x02
    27ac:	0e 94 88 13 	call	0x2710	; 0x2710 <LCD_moveCursor>
	LCD_displayString(str);
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_displayString>

}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <LCD_integerToString>:

void LCD_integerToString(int data){
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	62 97       	sbiw	r28, 0x12	; 18
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	9a 8b       	std	Y+18, r25	; 0x12
    27dc:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(data,buff,10);
    27de:	89 89       	ldd	r24, Y+17	; 0x11
    27e0:	9a 89       	ldd	r25, Y+18	; 0x12
    27e2:	9e 01       	movw	r18, r28
    27e4:	2f 5f       	subi	r18, 0xFF	; 255
    27e6:	3f 4f       	sbci	r19, 0xFF	; 255
    27e8:	b9 01       	movw	r22, r18
    27ea:	4a e0       	ldi	r20, 0x0A	; 10
    27ec:	50 e0       	ldi	r21, 0x00	; 0
    27ee:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <itoa>
	LCD_displayString(buff);
    27f2:	ce 01       	movw	r24, r28
    27f4:	01 96       	adiw	r24, 0x01	; 1
    27f6:	0e 94 5d 13 	call	0x26ba	; 0x26ba <LCD_displayString>

}
    27fa:	62 96       	adiw	r28, 0x12	; 18
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	08 95       	ret

0000280c <LCD_clearScreen>:

void LCD_clearScreen(void){
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	cd b7       	in	r28, 0x3d	; 61
    2812:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(LCD_CLEAR_COMMAND);
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_sendCommand>

}
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <PIR_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void PIR_init(void)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	cd b7       	in	r28, 0x3d	; 61
    2826:	de b7       	in	r29, 0x3e	; 62
    GPIO_setupPinDirection(PIR_PORT,PIR_PIN,PIN_INPUT);
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	62 e0       	ldi	r22, 0x02	; 2
    282c:	40 e0       	ldi	r20, 0x00	; 0
    282e:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_setupPinDirection>
}
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <PIR_getState>:

uint8 PIR_getState(void)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	0f 92       	push	r0
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    /* Read the state of the PIR sensor pin */
    if (GPIO_readPin(PIR_PORT,PIR_PIN)==LOGIC_HIGH)
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	62 e0       	ldi	r22, 0x02	; 2
    2846:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <GPIO_readPin>
    284a:	81 30       	cpi	r24, 0x01	; 1
    284c:	19 f4       	brne	.+6      	; 0x2854 <PIR_getState+0x1c>
    {
        return 1; // Motion detected
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <PIR_getState+0x1e>
    }
    else
    {
        return 0; // No motion detected
    2854:	19 82       	std	Y+1, r1	; 0x01
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    }
}
    2858:	0f 90       	pop	r0
    285a:	cf 91       	pop	r28
    285c:	df 91       	pop	r29
    285e:	08 95       	ret

00002860 <PWM_Timer0_Start>:
 */
#include "pmw.h"
#include "gpio.h"
#include "avr/io.h"

void PWM_Timer0_Start(uint8 duty_cycle){
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	00 d0       	rcall	.+0      	; 0x2866 <PWM_Timer0_Start+0x6>
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	89 83       	std	Y+1, r24	; 0x01

	/*initialize TIMER0 with PMW*/
	TCCR0=(1<<WGM01)|(1<<WGM00)|(1<<COM01)|(1<<CS01)|(1<<CS00);
    286e:	e3 e5       	ldi	r30, 0x53	; 83
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	8b e6       	ldi	r24, 0x6B	; 107
    2874:	80 83       	st	Z, r24
	TCNT0=0;
    2876:	e2 e5       	ldi	r30, 0x52	; 82
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	10 82       	st	Z, r1
	TIMSK|=(1<<OCIE0);
    287c:	a9 e5       	ldi	r26, 0x59	; 89
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e9 e5       	ldi	r30, 0x59	; 89
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	82 60       	ori	r24, 0x02	; 2
    2888:	8c 93       	st	X, r24

	/*CONFIGURE OC0/PB3 as output pin*/
	GPIO_setupPinDirection(PMW_OUTPUT_PORT_ID,PMW_OUTPUT_PIN_ID,PIN_OUTPUT);
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	63 e0       	ldi	r22, 0x03	; 3
    288e:	41 e0       	ldi	r20, 0x01	; 1
    2890:	0e 94 a5 0b 	call	0x174a	; 0x174a <GPIO_setupPinDirection>

	/*use the function paramater to control duty cycle*/
	switch(duty_cycle){
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	28 2f       	mov	r18, r24
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	3b 83       	std	Y+3, r19	; 0x03
    289c:	2a 83       	std	Y+2, r18	; 0x02
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	82 33       	cpi	r24, 0x32	; 50
    28a4:	91 05       	cpc	r25, r1
    28a6:	19 f1       	breq	.+70     	; 0x28ee <PWM_Timer0_Start+0x8e>
    28a8:	2a 81       	ldd	r18, Y+2	; 0x02
    28aa:	3b 81       	ldd	r19, Y+3	; 0x03
    28ac:	23 33       	cpi	r18, 0x33	; 51
    28ae:	31 05       	cpc	r19, r1
    28b0:	54 f4       	brge	.+20     	; 0x28c6 <PWM_Timer0_Start+0x66>
    28b2:	8a 81       	ldd	r24, Y+2	; 0x02
    28b4:	9b 81       	ldd	r25, Y+3	; 0x03
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	21 f1       	breq	.+72     	; 0x2902 <PWM_Timer0_Start+0xa2>
    28ba:	2a 81       	ldd	r18, Y+2	; 0x02
    28bc:	3b 81       	ldd	r19, Y+3	; 0x03
    28be:	29 31       	cpi	r18, 0x19	; 25
    28c0:	31 05       	cpc	r19, r1
    28c2:	d1 f0       	breq	.+52     	; 0x28f8 <PWM_Timer0_Start+0x98>
    28c4:	21 c0       	rjmp	.+66     	; 0x2908 <PWM_Timer0_Start+0xa8>
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	9b 81       	ldd	r25, Y+3	; 0x03
    28ca:	8b 34       	cpi	r24, 0x4B	; 75
    28cc:	91 05       	cpc	r25, r1
    28ce:	51 f0       	breq	.+20     	; 0x28e4 <PWM_Timer0_Start+0x84>
    28d0:	2a 81       	ldd	r18, Y+2	; 0x02
    28d2:	3b 81       	ldd	r19, Y+3	; 0x03
    28d4:	24 36       	cpi	r18, 0x64	; 100
    28d6:	31 05       	cpc	r19, r1
    28d8:	b9 f4       	brne	.+46     	; 0x2908 <PWM_Timer0_Start+0xa8>
	case 100:
		OCR0=255;     /*100% OF 256*/
    28da:	ec e5       	ldi	r30, 0x5C	; 92
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	8f ef       	ldi	r24, 0xFF	; 255
    28e0:	80 83       	st	Z, r24
    28e2:	12 c0       	rjmp	.+36     	; 0x2908 <PWM_Timer0_Start+0xa8>
		break;
	case 75:
		OCR0=192;     /*75% OF 256*/
    28e4:	ec e5       	ldi	r30, 0x5C	; 92
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 ec       	ldi	r24, 0xC0	; 192
    28ea:	80 83       	st	Z, r24
    28ec:	0d c0       	rjmp	.+26     	; 0x2908 <PWM_Timer0_Start+0xa8>
		break;
	case 50:
		OCR0=128;     /*50% OF 256*/
    28ee:	ec e5       	ldi	r30, 0x5C	; 92
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 e8       	ldi	r24, 0x80	; 128
    28f4:	80 83       	st	Z, r24
    28f6:	08 c0       	rjmp	.+16     	; 0x2908 <PWM_Timer0_Start+0xa8>
		break;
	case 25:
		OCR0=64;      /*25% OF 256*/
    28f8:	ec e5       	ldi	r30, 0x5C	; 92
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 e4       	ldi	r24, 0x40	; 64
    28fe:	80 83       	st	Z, r24
    2900:	03 c0       	rjmp	.+6      	; 0x2908 <PWM_Timer0_Start+0xa8>
		break;
	case 0:
		OCR0=0;       /*0% OF 255*/
    2902:	ec e5       	ldi	r30, 0x5C	; 92
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	10 82       	st	Z, r1
		break;
	default:
		break;
	}
}
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <Timer_init>:
static volatile void (*g_callBackPtr2)(void) = NULL_PTR;

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void Timer_init(const Timer_ConfigType * Config_Ptr) {
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	00 d0       	rcall	.+0      	; 0x291a <Timer_init+0x6>
    291a:	00 d0       	rcall	.+0      	; 0x291c <Timer_init+0x8>
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01
    switch (Config_Ptr->timer_ID) {
    2924:	e9 81       	ldd	r30, Y+1	; 0x01
    2926:	fa 81       	ldd	r31, Y+2	; 0x02
    2928:	84 81       	ldd	r24, Z+4	; 0x04
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	3c 83       	std	Y+4, r19	; 0x04
    2930:	2b 83       	std	Y+3, r18	; 0x03
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	9c 81       	ldd	r25, Y+4	; 0x04
    2936:	81 30       	cpi	r24, 0x01	; 1
    2938:	91 05       	cpc	r25, r1
    293a:	09 f4       	brne	.+2      	; 0x293e <Timer_init+0x2a>
    293c:	47 c0       	rjmp	.+142    	; 0x29cc <Timer_init+0xb8>
    293e:	2b 81       	ldd	r18, Y+3	; 0x03
    2940:	3c 81       	ldd	r19, Y+4	; 0x04
    2942:	22 30       	cpi	r18, 0x02	; 2
    2944:	31 05       	cpc	r19, r1
    2946:	09 f4       	brne	.+2      	; 0x294a <Timer_init+0x36>
    2948:	85 c0       	rjmp	.+266    	; 0x2a54 <Timer_init+0x140>
    294a:	8b 81       	ldd	r24, Y+3	; 0x03
    294c:	9c 81       	ldd	r25, Y+4	; 0x04
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	09 f0       	breq	.+2      	; 0x2954 <Timer_init+0x40>
    2952:	bb c0       	rjmp	.+374    	; 0x2aca <Timer_init+0x1b6>
        case TIMER0:
            TCNT0 = Config_Ptr->timer_InitialValue; /* Set initial value */
    2954:	a2 e5       	ldi	r26, 0x52	; 82
    2956:	b0 e0       	ldi	r27, 0x00	; 0
    2958:	e9 81       	ldd	r30, Y+1	; 0x01
    295a:	fa 81       	ldd	r31, Y+2	; 0x02
    295c:	80 81       	ld	r24, Z
    295e:	91 81       	ldd	r25, Z+1	; 0x01
    2960:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    2962:	e9 81       	ldd	r30, Y+1	; 0x01
    2964:	fa 81       	ldd	r31, Y+2	; 0x02
    2966:	86 81       	ldd	r24, Z+6	; 0x06
    2968:	88 23       	and	r24, r24
    296a:	61 f4       	brne	.+24     	; 0x2984 <Timer_init+0x70>
                TCCR0 = (1 << FOC0); /* Normal mode */
    296c:	e3 e5       	ldi	r30, 0x53	; 83
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 e8       	ldi	r24, 0x80	; 128
    2972:	80 83       	st	Z, r24
                TIMSK |= (1 << TOIE0); /* Enable overflow interrupt */
    2974:	a9 e5       	ldi	r26, 0x59	; 89
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e9 e5       	ldi	r30, 0x59	; 89
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	81 60       	ori	r24, 0x01	; 1
    2980:	8c 93       	st	X, r24
    2982:	17 c0       	rjmp	.+46     	; 0x29b2 <Timer_init+0x9e>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    2984:	e9 81       	ldd	r30, Y+1	; 0x01
    2986:	fa 81       	ldd	r31, Y+2	; 0x02
    2988:	86 81       	ldd	r24, Z+6	; 0x06
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	91 f4       	brne	.+36     	; 0x29b2 <Timer_init+0x9e>
                TCCR0 = (1 << FOC0) | (1 << WGM01); /* CTC mode */
    298e:	e3 e5       	ldi	r30, 0x53	; 83
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	88 e8       	ldi	r24, 0x88	; 136
    2994:	80 83       	st	Z, r24
                OCR0 = Config_Ptr->timer_compare_MatchValue; /* Set compare value */
    2996:	ac e5       	ldi	r26, 0x5C	; 92
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	e9 81       	ldd	r30, Y+1	; 0x01
    299c:	fa 81       	ldd	r31, Y+2	; 0x02
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE0); /* Enable compare interrupt */
    29a4:	a9 e5       	ldi	r26, 0x59	; 89
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e9 e5       	ldi	r30, 0x59	; 89
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	82 60       	ori	r24, 0x02	; 2
    29b0:	8c 93       	st	X, r24
            }
            TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock); /* Set clock */
    29b2:	a3 e5       	ldi	r26, 0x53	; 83
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e3 e5       	ldi	r30, 0x53	; 83
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	98 2f       	mov	r25, r24
    29be:	98 7f       	andi	r25, 0xF8	; 248
    29c0:	e9 81       	ldd	r30, Y+1	; 0x01
    29c2:	fa 81       	ldd	r31, Y+2	; 0x02
    29c4:	85 81       	ldd	r24, Z+5	; 0x05
    29c6:	89 2b       	or	r24, r25
    29c8:	8c 93       	st	X, r24
    29ca:	7f c0       	rjmp	.+254    	; 0x2aca <Timer_init+0x1b6>
            break;

        case TIMER1:
            TCNT1 = Config_Ptr->timer_InitialValue; /* Set initial value */
    29cc:	ac e4       	ldi	r26, 0x4C	; 76
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	e9 81       	ldd	r30, Y+1	; 0x01
    29d2:	fa 81       	ldd	r31, Y+2	; 0x02
    29d4:	80 81       	ld	r24, Z
    29d6:	91 81       	ldd	r25, Z+1	; 0x01
    29d8:	11 96       	adiw	r26, 0x01	; 1
    29da:	9c 93       	st	X, r25
    29dc:	8e 93       	st	-X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    29de:	e9 81       	ldd	r30, Y+1	; 0x01
    29e0:	fa 81       	ldd	r31, Y+2	; 0x02
    29e2:	86 81       	ldd	r24, Z+6	; 0x06
    29e4:	88 23       	and	r24, r24
    29e6:	61 f4       	brne	.+24     	; 0x2a00 <Timer_init+0xec>
                TCCR1A = (1 << FOC1A); /* Normal mode */
    29e8:	ef e4       	ldi	r30, 0x4F	; 79
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	88 e0       	ldi	r24, 0x08	; 8
    29ee:	80 83       	st	Z, r24
                TIMSK |= (1 << TOIE1); /* Enable overflow interrupt */
    29f0:	a9 e5       	ldi	r26, 0x59	; 89
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e9 e5       	ldi	r30, 0x59	; 89
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	84 60       	ori	r24, 0x04	; 4
    29fc:	8c 93       	st	X, r24
    29fe:	1d c0       	rjmp	.+58     	; 0x2a3a <Timer_init+0x126>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    2a00:	e9 81       	ldd	r30, Y+1	; 0x01
    2a02:	fa 81       	ldd	r31, Y+2	; 0x02
    2a04:	86 81       	ldd	r24, Z+6	; 0x06
    2a06:	81 30       	cpi	r24, 0x01	; 1
    2a08:	c1 f4       	brne	.+48     	; 0x2a3a <Timer_init+0x126>
                TCCR1A = (1 << FOC1A); /* CTC mode */
    2a0a:	ef e4       	ldi	r30, 0x4F	; 79
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	88 e0       	ldi	r24, 0x08	; 8
    2a10:	80 83       	st	Z, r24
                TCCR1B = (1 << WGM12);
    2a12:	ee e4       	ldi	r30, 0x4E	; 78
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	88 e0       	ldi	r24, 0x08	; 8
    2a18:	80 83       	st	Z, r24
                OCR1A = Config_Ptr->timer_compare_MatchValue; /* Set compare value */
    2a1a:	aa e4       	ldi	r26, 0x4A	; 74
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a20:	fa 81       	ldd	r31, Y+2	; 0x02
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	11 96       	adiw	r26, 0x01	; 1
    2a28:	9c 93       	st	X, r25
    2a2a:	8e 93       	st	-X, r24
                TIMSK |= (1 << OCIE1A); /* Enable compare interrupt */
    2a2c:	a9 e5       	ldi	r26, 0x59	; 89
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	e9 e5       	ldi	r30, 0x59	; 89
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	80 61       	ori	r24, 0x10	; 16
    2a38:	8c 93       	st	X, r24
            }
            TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock); /* Set clock */
    2a3a:	ae e4       	ldi	r26, 0x4E	; 78
    2a3c:	b0 e0       	ldi	r27, 0x00	; 0
    2a3e:	ee e4       	ldi	r30, 0x4E	; 78
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	98 2f       	mov	r25, r24
    2a46:	98 7f       	andi	r25, 0xF8	; 248
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	85 81       	ldd	r24, Z+5	; 0x05
    2a4e:	89 2b       	or	r24, r25
    2a50:	8c 93       	st	X, r24
    2a52:	3b c0       	rjmp	.+118    	; 0x2aca <Timer_init+0x1b6>
            break;

        case TIMER2:
            TCNT2 = Config_Ptr->timer_InitialValue; /* Set initial value */
    2a54:	a4 e4       	ldi	r26, 0x44	; 68
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5c:	80 81       	ld	r24, Z
    2a5e:	91 81       	ldd	r25, Z+1	; 0x01
    2a60:	8c 93       	st	X, r24
            if (Config_Ptr->timer_mode == NORMAL_MODE) {
    2a62:	e9 81       	ldd	r30, Y+1	; 0x01
    2a64:	fa 81       	ldd	r31, Y+2	; 0x02
    2a66:	86 81       	ldd	r24, Z+6	; 0x06
    2a68:	88 23       	and	r24, r24
    2a6a:	61 f4       	brne	.+24     	; 0x2a84 <Timer_init+0x170>
                TCCR2 = (1 << FOC2); /* Normal mode */
    2a6c:	e5 e4       	ldi	r30, 0x45	; 69
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 e8       	ldi	r24, 0x80	; 128
    2a72:	80 83       	st	Z, r24
                TIMSK |= (1 << TOIE2); /* Enable overflow interrupt */
    2a74:	a9 e5       	ldi	r26, 0x59	; 89
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e9 e5       	ldi	r30, 0x59	; 89
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	80 81       	ld	r24, Z
    2a7e:	80 64       	ori	r24, 0x40	; 64
    2a80:	8c 93       	st	X, r24
    2a82:	17 c0       	rjmp	.+46     	; 0x2ab2 <Timer_init+0x19e>
            } else if (Config_Ptr->timer_mode == COMPARE_MODE) {
    2a84:	e9 81       	ldd	r30, Y+1	; 0x01
    2a86:	fa 81       	ldd	r31, Y+2	; 0x02
    2a88:	86 81       	ldd	r24, Z+6	; 0x06
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	91 f4       	brne	.+36     	; 0x2ab2 <Timer_init+0x19e>
                TCCR2 = (1 << FOC2) | (1 << WGM21); /* CTC mode */
    2a8e:	e5 e4       	ldi	r30, 0x45	; 69
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	88 e8       	ldi	r24, 0x88	; 136
    2a94:	80 83       	st	Z, r24
                OCR2 = Config_Ptr->timer_compare_MatchValue; /* Set compare value */
    2a96:	a3 e4       	ldi	r26, 0x43	; 67
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	8c 93       	st	X, r24
                TIMSK |= (1 << OCIE2); /* Enable compare interrupt */
    2aa4:	a9 e5       	ldi	r26, 0x59	; 89
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e9 e5       	ldi	r30, 0x59	; 89
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	80 68       	ori	r24, 0x80	; 128
    2ab0:	8c 93       	st	X, r24
            }
            TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock); /* Set clock */
    2ab2:	a5 e4       	ldi	r26, 0x45	; 69
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e5 e4       	ldi	r30, 0x45	; 69
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	98 2f       	mov	r25, r24
    2abe:	98 7f       	andi	r25, 0xF8	; 248
    2ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac4:	85 81       	ldd	r24, Z+5	; 0x05
    2ac6:	89 2b       	or	r24, r25
    2ac8:	8c 93       	st	X, r24
            break;
    }
}
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <Timer_deInit>:

void Timer_deInit(Timer_ID_Type timer_type) {
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <Timer_deInit+0x6>
    2ade:	0f 92       	push	r0
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) {
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	3b 83       	std	Y+3, r19	; 0x03
    2aee:	2a 83       	std	Y+2, r18	; 0x02
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	9b 81       	ldd	r25, Y+3	; 0x03
    2af4:	81 30       	cpi	r24, 0x01	; 1
    2af6:	91 05       	cpc	r25, r1
    2af8:	a1 f0       	breq	.+40     	; 0x2b22 <Timer_deInit+0x4a>
    2afa:	2a 81       	ldd	r18, Y+2	; 0x02
    2afc:	3b 81       	ldd	r19, Y+3	; 0x03
    2afe:	22 30       	cpi	r18, 0x02	; 2
    2b00:	31 05       	cpc	r19, r1
    2b02:	e9 f0       	breq	.+58     	; 0x2b3e <Timer_deInit+0x66>
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	00 97       	sbiw	r24, 0x00	; 0
    2b0a:	19 f5       	brne	.+70     	; 0x2b52 <Timer_deInit+0x7a>
        case TIMER0:
            TCCR0 = 0x00;
    2b0c:	e3 e5       	ldi	r30, 0x53	; 83
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE0) | (1 << OCIE0));
    2b12:	a9 e5       	ldi	r26, 0x59	; 89
    2b14:	b0 e0       	ldi	r27, 0x00	; 0
    2b16:	e9 e5       	ldi	r30, 0x59	; 89
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	80 81       	ld	r24, Z
    2b1c:	8c 7f       	andi	r24, 0xFC	; 252
    2b1e:	8c 93       	st	X, r24
    2b20:	18 c0       	rjmp	.+48     	; 0x2b52 <Timer_deInit+0x7a>
            break;

        case TIMER1:
            TCCR1A = 0x00;
    2b22:	ef e4       	ldi	r30, 0x4F	; 79
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	10 82       	st	Z, r1
            TCCR1B = 0x00;
    2b28:	ee e4       	ldi	r30, 0x4E	; 78
    2b2a:	f0 e0       	ldi	r31, 0x00	; 0
    2b2c:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));
    2b2e:	a9 e5       	ldi	r26, 0x59	; 89
    2b30:	b0 e0       	ldi	r27, 0x00	; 0
    2b32:	e9 e5       	ldi	r30, 0x59	; 89
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 81       	ld	r24, Z
    2b38:	8b 7e       	andi	r24, 0xEB	; 235
    2b3a:	8c 93       	st	X, r24
    2b3c:	0a c0       	rjmp	.+20     	; 0x2b52 <Timer_deInit+0x7a>
            break;

        case TIMER2:
            TCCR2 = 0x00;
    2b3e:	e5 e4       	ldi	r30, 0x45	; 69
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	10 82       	st	Z, r1
            TIMSK &= ~((1 << TOIE2) | (1 << OCIE2));
    2b44:	a9 e5       	ldi	r26, 0x59	; 89
    2b46:	b0 e0       	ldi	r27, 0x00	; 0
    2b48:	e9 e5       	ldi	r30, 0x59	; 89
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	8f 73       	andi	r24, 0x3F	; 63
    2b50:	8c 93       	st	X, r24
            break;
    }
}
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	08 95       	ret

00002b5e <Timer_setCallBack>:

void Timer_setCallBack(void (*a_ptr)(void), Timer_ID_Type a_timer_ID) {
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <Timer_setCallBack+0x6>
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <Timer_setCallBack+0x8>
    2b66:	0f 92       	push	r0
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID) {
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	28 2f       	mov	r18, r24
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	3d 83       	std	Y+5, r19	; 0x05
    2b7a:	2c 83       	std	Y+4, r18	; 0x04
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b80:	81 30       	cpi	r24, 0x01	; 1
    2b82:	91 05       	cpc	r25, r1
    2b84:	81 f0       	breq	.+32     	; 0x2ba6 <Timer_setCallBack+0x48>
    2b86:	2c 81       	ldd	r18, Y+4	; 0x04
    2b88:	3d 81       	ldd	r19, Y+5	; 0x05
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	31 05       	cpc	r19, r1
    2b8e:	91 f0       	breq	.+36     	; 0x2bb4 <Timer_setCallBack+0x56>
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	9d 81       	ldd	r25, Y+5	; 0x05
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	a1 f4       	brne	.+40     	; 0x2bc0 <Timer_setCallBack+0x62>
        case TIMER0:
            g_callBackPtr0 = a_ptr;
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9c:	90 93 84 00 	sts	0x0084, r25
    2ba0:	80 93 83 00 	sts	0x0083, r24
    2ba4:	0d c0       	rjmp	.+26     	; 0x2bc0 <Timer_setCallBack+0x62>
            break;

        case TIMER1:
            g_callBackPtr1 = a_ptr;
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    2baa:	90 93 86 00 	sts	0x0086, r25
    2bae:	80 93 85 00 	sts	0x0085, r24
    2bb2:	06 c0       	rjmp	.+12     	; 0x2bc0 <Timer_setCallBack+0x62>
            break;

        case TIMER2:
            g_callBackPtr2 = a_ptr;
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb8:	90 93 88 00 	sts	0x0088, r25
    2bbc:	80 93 87 00 	sts	0x0087, r24
            break;
    }
}
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <__vector_11>:

/*******************************************************************************
 *                      Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect) {
    2bd0:	1f 92       	push	r1
    2bd2:	0f 92       	push	r0
    2bd4:	0f b6       	in	r0, 0x3f	; 63
    2bd6:	0f 92       	push	r0
    2bd8:	11 24       	eor	r1, r1
    2bda:	2f 93       	push	r18
    2bdc:	3f 93       	push	r19
    2bde:	4f 93       	push	r20
    2be0:	5f 93       	push	r21
    2be2:	6f 93       	push	r22
    2be4:	7f 93       	push	r23
    2be6:	8f 93       	push	r24
    2be8:	9f 93       	push	r25
    2bea:	af 93       	push	r26
    2bec:	bf 93       	push	r27
    2bee:	ef 93       	push	r30
    2bf0:	ff 93       	push	r31
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr0 != NULL_PTR) {
    2bfa:	80 91 83 00 	lds	r24, 0x0083
    2bfe:	90 91 84 00 	lds	r25, 0x0084
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	29 f0       	breq	.+10     	; 0x2c10 <__vector_11+0x40>
        (*g_callBackPtr0)();
    2c06:	e0 91 83 00 	lds	r30, 0x0083
    2c0a:	f0 91 84 00 	lds	r31, 0x0084
    2c0e:	09 95       	icall
    }
}
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	ff 91       	pop	r31
    2c16:	ef 91       	pop	r30
    2c18:	bf 91       	pop	r27
    2c1a:	af 91       	pop	r26
    2c1c:	9f 91       	pop	r25
    2c1e:	8f 91       	pop	r24
    2c20:	7f 91       	pop	r23
    2c22:	6f 91       	pop	r22
    2c24:	5f 91       	pop	r21
    2c26:	4f 91       	pop	r20
    2c28:	3f 91       	pop	r19
    2c2a:	2f 91       	pop	r18
    2c2c:	0f 90       	pop	r0
    2c2e:	0f be       	out	0x3f, r0	; 63
    2c30:	0f 90       	pop	r0
    2c32:	1f 90       	pop	r1
    2c34:	18 95       	reti

00002c36 <__vector_10>:

ISR(TIMER0_COMP_vect) {
    2c36:	1f 92       	push	r1
    2c38:	0f 92       	push	r0
    2c3a:	0f b6       	in	r0, 0x3f	; 63
    2c3c:	0f 92       	push	r0
    2c3e:	11 24       	eor	r1, r1
    2c40:	2f 93       	push	r18
    2c42:	3f 93       	push	r19
    2c44:	4f 93       	push	r20
    2c46:	5f 93       	push	r21
    2c48:	6f 93       	push	r22
    2c4a:	7f 93       	push	r23
    2c4c:	8f 93       	push	r24
    2c4e:	9f 93       	push	r25
    2c50:	af 93       	push	r26
    2c52:	bf 93       	push	r27
    2c54:	ef 93       	push	r30
    2c56:	ff 93       	push	r31
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr0 != NULL_PTR) {
    2c60:	80 91 83 00 	lds	r24, 0x0083
    2c64:	90 91 84 00 	lds	r25, 0x0084
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	29 f0       	breq	.+10     	; 0x2c76 <__vector_10+0x40>
        (*g_callBackPtr0)();
    2c6c:	e0 91 83 00 	lds	r30, 0x0083
    2c70:	f0 91 84 00 	lds	r31, 0x0084
    2c74:	09 95       	icall
    }
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	ff 91       	pop	r31
    2c7c:	ef 91       	pop	r30
    2c7e:	bf 91       	pop	r27
    2c80:	af 91       	pop	r26
    2c82:	9f 91       	pop	r25
    2c84:	8f 91       	pop	r24
    2c86:	7f 91       	pop	r23
    2c88:	6f 91       	pop	r22
    2c8a:	5f 91       	pop	r21
    2c8c:	4f 91       	pop	r20
    2c8e:	3f 91       	pop	r19
    2c90:	2f 91       	pop	r18
    2c92:	0f 90       	pop	r0
    2c94:	0f be       	out	0x3f, r0	; 63
    2c96:	0f 90       	pop	r0
    2c98:	1f 90       	pop	r1
    2c9a:	18 95       	reti

00002c9c <__vector_9>:

ISR(TIMER1_OVF_vect) {
    2c9c:	1f 92       	push	r1
    2c9e:	0f 92       	push	r0
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	0f 92       	push	r0
    2ca4:	11 24       	eor	r1, r1
    2ca6:	2f 93       	push	r18
    2ca8:	3f 93       	push	r19
    2caa:	4f 93       	push	r20
    2cac:	5f 93       	push	r21
    2cae:	6f 93       	push	r22
    2cb0:	7f 93       	push	r23
    2cb2:	8f 93       	push	r24
    2cb4:	9f 93       	push	r25
    2cb6:	af 93       	push	r26
    2cb8:	bf 93       	push	r27
    2cba:	ef 93       	push	r30
    2cbc:	ff 93       	push	r31
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr1 != NULL_PTR) {
    2cc6:	80 91 85 00 	lds	r24, 0x0085
    2cca:	90 91 86 00 	lds	r25, 0x0086
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	29 f0       	breq	.+10     	; 0x2cdc <__vector_9+0x40>
        (*g_callBackPtr1)();
    2cd2:	e0 91 85 00 	lds	r30, 0x0085
    2cd6:	f0 91 86 00 	lds	r31, 0x0086
    2cda:	09 95       	icall
    }
}
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	ff 91       	pop	r31
    2ce2:	ef 91       	pop	r30
    2ce4:	bf 91       	pop	r27
    2ce6:	af 91       	pop	r26
    2ce8:	9f 91       	pop	r25
    2cea:	8f 91       	pop	r24
    2cec:	7f 91       	pop	r23
    2cee:	6f 91       	pop	r22
    2cf0:	5f 91       	pop	r21
    2cf2:	4f 91       	pop	r20
    2cf4:	3f 91       	pop	r19
    2cf6:	2f 91       	pop	r18
    2cf8:	0f 90       	pop	r0
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	0f 90       	pop	r0
    2cfe:	1f 90       	pop	r1
    2d00:	18 95       	reti

00002d02 <__vector_7>:

ISR(TIMER1_COMPA_vect) {
    2d02:	1f 92       	push	r1
    2d04:	0f 92       	push	r0
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	0f 92       	push	r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	2f 93       	push	r18
    2d0e:	3f 93       	push	r19
    2d10:	4f 93       	push	r20
    2d12:	5f 93       	push	r21
    2d14:	6f 93       	push	r22
    2d16:	7f 93       	push	r23
    2d18:	8f 93       	push	r24
    2d1a:	9f 93       	push	r25
    2d1c:	af 93       	push	r26
    2d1e:	bf 93       	push	r27
    2d20:	ef 93       	push	r30
    2d22:	ff 93       	push	r31
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr1 != NULL_PTR) {
    2d2c:	80 91 85 00 	lds	r24, 0x0085
    2d30:	90 91 86 00 	lds	r25, 0x0086
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	29 f0       	breq	.+10     	; 0x2d42 <__vector_7+0x40>
        (*g_callBackPtr1)();
    2d38:	e0 91 85 00 	lds	r30, 0x0085
    2d3c:	f0 91 86 00 	lds	r31, 0x0086
    2d40:	09 95       	icall
    }
}
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	ff 91       	pop	r31
    2d48:	ef 91       	pop	r30
    2d4a:	bf 91       	pop	r27
    2d4c:	af 91       	pop	r26
    2d4e:	9f 91       	pop	r25
    2d50:	8f 91       	pop	r24
    2d52:	7f 91       	pop	r23
    2d54:	6f 91       	pop	r22
    2d56:	5f 91       	pop	r21
    2d58:	4f 91       	pop	r20
    2d5a:	3f 91       	pop	r19
    2d5c:	2f 91       	pop	r18
    2d5e:	0f 90       	pop	r0
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	0f 90       	pop	r0
    2d64:	1f 90       	pop	r1
    2d66:	18 95       	reti

00002d68 <__vector_5>:

ISR(TIMER2_OVF_vect) {
    2d68:	1f 92       	push	r1
    2d6a:	0f 92       	push	r0
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	0f 92       	push	r0
    2d70:	11 24       	eor	r1, r1
    2d72:	2f 93       	push	r18
    2d74:	3f 93       	push	r19
    2d76:	4f 93       	push	r20
    2d78:	5f 93       	push	r21
    2d7a:	6f 93       	push	r22
    2d7c:	7f 93       	push	r23
    2d7e:	8f 93       	push	r24
    2d80:	9f 93       	push	r25
    2d82:	af 93       	push	r26
    2d84:	bf 93       	push	r27
    2d86:	ef 93       	push	r30
    2d88:	ff 93       	push	r31
    2d8a:	df 93       	push	r29
    2d8c:	cf 93       	push	r28
    2d8e:	cd b7       	in	r28, 0x3d	; 61
    2d90:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr2 != NULL_PTR) {
    2d92:	80 91 87 00 	lds	r24, 0x0087
    2d96:	90 91 88 00 	lds	r25, 0x0088
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	29 f0       	breq	.+10     	; 0x2da8 <__vector_5+0x40>
        (*g_callBackPtr2)();
    2d9e:	e0 91 87 00 	lds	r30, 0x0087
    2da2:	f0 91 88 00 	lds	r31, 0x0088
    2da6:	09 95       	icall
    }
}
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	ff 91       	pop	r31
    2dae:	ef 91       	pop	r30
    2db0:	bf 91       	pop	r27
    2db2:	af 91       	pop	r26
    2db4:	9f 91       	pop	r25
    2db6:	8f 91       	pop	r24
    2db8:	7f 91       	pop	r23
    2dba:	6f 91       	pop	r22
    2dbc:	5f 91       	pop	r21
    2dbe:	4f 91       	pop	r20
    2dc0:	3f 91       	pop	r19
    2dc2:	2f 91       	pop	r18
    2dc4:	0f 90       	pop	r0
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	0f 90       	pop	r0
    2dca:	1f 90       	pop	r1
    2dcc:	18 95       	reti

00002dce <__vector_4>:

ISR(TIMER2_COMP_vect) {
    2dce:	1f 92       	push	r1
    2dd0:	0f 92       	push	r0
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	0f 92       	push	r0
    2dd6:	11 24       	eor	r1, r1
    2dd8:	2f 93       	push	r18
    2dda:	3f 93       	push	r19
    2ddc:	4f 93       	push	r20
    2dde:	5f 93       	push	r21
    2de0:	6f 93       	push	r22
    2de2:	7f 93       	push	r23
    2de4:	8f 93       	push	r24
    2de6:	9f 93       	push	r25
    2de8:	af 93       	push	r26
    2dea:	bf 93       	push	r27
    2dec:	ef 93       	push	r30
    2dee:	ff 93       	push	r31
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr2 != NULL_PTR) {
    2df8:	80 91 87 00 	lds	r24, 0x0087
    2dfc:	90 91 88 00 	lds	r25, 0x0088
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	29 f0       	breq	.+10     	; 0x2e0e <__vector_4+0x40>
        (*g_callBackPtr2)();
    2e04:	e0 91 87 00 	lds	r30, 0x0087
    2e08:	f0 91 88 00 	lds	r31, 0x0088
    2e0c:	09 95       	icall
    }
}
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	ff 91       	pop	r31
    2e14:	ef 91       	pop	r30
    2e16:	bf 91       	pop	r27
    2e18:	af 91       	pop	r26
    2e1a:	9f 91       	pop	r25
    2e1c:	8f 91       	pop	r24
    2e1e:	7f 91       	pop	r23
    2e20:	6f 91       	pop	r22
    2e22:	5f 91       	pop	r21
    2e24:	4f 91       	pop	r20
    2e26:	3f 91       	pop	r19
    2e28:	2f 91       	pop	r18
    2e2a:	0f 90       	pop	r0
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	0f 90       	pop	r0
    2e30:	1f 90       	pop	r1
    2e32:	18 95       	reti

00002e34 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    2e34:	0f 93       	push	r16
    2e36:	1f 93       	push	r17
    2e38:	df 93       	push	r29
    2e3a:	cf 93       	push	r28
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <TWI_init+0xa>
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	9a 83       	std	Y+2, r25	; 0x02
    2e44:	89 83       	std	Y+1, r24	; 0x01
	/* Set bit rate register */
	TWBR = (uint8)((F_CPU / (Config_Ptr->bit_rate * 2UL)) - 8);
    2e46:	00 e2       	ldi	r16, 0x20	; 32
    2e48:	10 e0       	ldi	r17, 0x00	; 0
    2e4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2e4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2e4e:	81 81       	ldd	r24, Z+1	; 0x01
    2e50:	92 81       	ldd	r25, Z+2	; 0x02
    2e52:	a3 81       	ldd	r26, Z+3	; 0x03
    2e54:	b4 81       	ldd	r27, Z+4	; 0x04
    2e56:	9c 01       	movw	r18, r24
    2e58:	ad 01       	movw	r20, r26
    2e5a:	22 0f       	add	r18, r18
    2e5c:	33 1f       	adc	r19, r19
    2e5e:	44 1f       	adc	r20, r20
    2e60:	55 1f       	adc	r21, r21
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	92 e1       	ldi	r25, 0x12	; 18
    2e66:	aa e7       	ldi	r26, 0x7A	; 122
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 01 19 	call	0x3202	; 0x3202 <__udivmodsi4>
    2e72:	da 01       	movw	r26, r20
    2e74:	c9 01       	movw	r24, r18
    2e76:	88 50       	subi	r24, 0x08	; 8
    2e78:	f8 01       	movw	r30, r16
    2e7a:	80 83       	st	Z, r24

	/* Set prescaler to 0 */
	TWSR = 0x00;
    2e7c:	e1 e2       	ldi	r30, 0x21	; 33
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	10 82       	st	Z, r1

	/* Set the address register with the given address */
	TWAR = (Config_Ptr->address << 1);
    2e82:	a2 e2       	ldi	r26, 0x22	; 34
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e9 81       	ldd	r30, Y+1	; 0x01
    2e88:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8a:	80 81       	ld	r24, Z
    2e8c:	88 0f       	add	r24, r24
    2e8e:	8c 93       	st	X, r24

	/* Enable TWI */
	TWCR = (1 << TWEN);
    2e90:	e6 e5       	ldi	r30, 0x56	; 86
    2e92:	f0 e0       	ldi	r31, 0x00	; 0
    2e94:	84 e0       	ldi	r24, 0x04	; 4
    2e96:	80 83       	st	Z, r24

}
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	1f 91       	pop	r17
    2ea2:	0f 91       	pop	r16
    2ea4:	08 95       	ret

00002ea6 <TWI_start>:

void TWI_start(void)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2eae:	e6 e5       	ldi	r30, 0x56	; 86
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	84 ea       	ldi	r24, 0xA4	; 164
    2eb4:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2eb6:	e6 e5       	ldi	r30, 0x56	; 86
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	88 23       	and	r24, r24
    2ebe:	dc f7       	brge	.-10     	; 0x2eb6 <TWI_start+0x10>
}
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	08 95       	ret

00002ec6 <TWI_stop>:

void TWI_stop(void)
{
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2ece:	e6 e5       	ldi	r30, 0x56	; 86
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	84 e9       	ldi	r24, 0x94	; 148
    2ed4:	80 83       	st	Z, r24
}
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	0f 92       	push	r0
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2ee8:	e3 e2       	ldi	r30, 0x23	; 35
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN);
    2ef0:	e6 e5       	ldi	r30, 0x56	; 86
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	84 e8       	ldi	r24, 0x84	; 132
    2ef6:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2ef8:	e6 e5       	ldi	r30, 0x56	; 86
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	88 23       	and	r24, r24
    2f00:	dc f7       	brge	.-10     	; 0x2ef8 <TWI_writeByte+0x1c>
}
    2f02:	0f 90       	pop	r0
    2f04:	cf 91       	pop	r28
    2f06:	df 91       	pop	r29
    2f08:	08 95       	ret

00002f0a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2f0a:	df 93       	push	r29
    2f0c:	cf 93       	push	r28
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2f12:	e6 e5       	ldi	r30, 0x56	; 86
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	84 ec       	ldi	r24, 0xC4	; 196
    2f18:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2f1a:	e6 e5       	ldi	r30, 0x56	; 86
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	88 23       	and	r24, r24
    2f22:	dc f7       	brge	.-10     	; 0x2f1a <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    2f24:	e3 e2       	ldi	r30, 0x23	; 35
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
}
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2f38:	e6 e5       	ldi	r30, 0x56	; 86
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	84 e8       	ldi	r24, 0x84	; 132
    2f3e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2f40:	e6 e5       	ldi	r30, 0x56	; 86
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	88 23       	and	r24, r24
    2f48:	dc f7       	brge	.-10     	; 0x2f40 <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    2f4a:	e3 e2       	ldi	r30, 0x23	; 35
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	0f 92       	push	r0
    2f5c:	cd b7       	in	r28, 0x3d	; 61
    2f5e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    2f60:	e1 e2       	ldi	r30, 0x21	; 33
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	88 7f       	andi	r24, 0xF8	; 248
    2f68:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f6c:	0f 90       	pop	r0
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	08 95       	ret

00002f74 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2f74:	df 93       	push	r29
    2f76:	cf 93       	push	r28
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <UART_init+0x6>
    2f7a:	00 d0       	rcall	.+0      	; 0x2f7c <UART_init+0x8>
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	9c 83       	std	Y+4, r25	; 0x04
    2f82:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2f84:	1a 82       	std	Y+2, r1	; 0x02
    2f86:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2f88:	eb e2       	ldi	r30, 0x2B	; 43
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	82 e0       	ldi	r24, 0x02	; 2
    2f8e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2f90:	ea e2       	ldi	r30, 0x2A	; 42
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	88 e1       	ldi	r24, 0x18	; 24
    2f96:	80 83       	st	Z, r24

    if (Config_Ptr->bit_data == 9) {
    2f98:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9c:	80 81       	ld	r24, Z
    2f9e:	89 30       	cpi	r24, 0x09	; 9
    2fa0:	41 f4       	brne	.+16     	; 0x2fb2 <UART_init+0x3e>
        UCSRB |= (1 << UCSZ2);
    2fa2:	aa e2       	ldi	r26, 0x2A	; 42
    2fa4:	b0 e0       	ldi	r27, 0x00	; 0
    2fa6:	ea e2       	ldi	r30, 0x2A	; 42
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	84 60       	ori	r24, 0x04	; 4
    2fae:	8c 93       	st	X, r24
    2fb0:	07 c0       	rjmp	.+14     	; 0x2fc0 <UART_init+0x4c>
    } else {
        UCSRB &= ~(1 << UCSZ2);
    2fb2:	aa e2       	ldi	r26, 0x2A	; 42
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	ea e2       	ldi	r30, 0x2A	; 42
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	8b 7f       	andi	r24, 0xFB	; 251
    2fbe:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2fc0:	e0 e4       	ldi	r30, 0x40	; 64
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 e8       	ldi	r24, 0x80	; 128
    2fc6:	80 83       	st	Z, r24

	/* Set bit data size */
	if (Config_Ptr->bit_data == 5) {
    2fc8:	eb 81       	ldd	r30, Y+3	; 0x03
    2fca:	fc 81       	ldd	r31, Y+4	; 0x04
    2fcc:	80 81       	ld	r24, Z
    2fce:	85 30       	cpi	r24, 0x05	; 5
    2fd0:	31 f1       	breq	.+76     	; 0x301e <UART_init+0xaa>
		// 00: Already cleared, no changes needed.
	} else if (Config_Ptr->bit_data == 6) {
    2fd2:	eb 81       	ldd	r30, Y+3	; 0x03
    2fd4:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd6:	80 81       	ld	r24, Z
    2fd8:	86 30       	cpi	r24, 0x06	; 6
    2fda:	41 f4       	brne	.+16     	; 0x2fec <UART_init+0x78>
		UCSRC |= (1 << UCSZ0);
    2fdc:	a0 e4       	ldi	r26, 0x40	; 64
    2fde:	b0 e0       	ldi	r27, 0x00	; 0
    2fe0:	e0 e4       	ldi	r30, 0x40	; 64
    2fe2:	f0 e0       	ldi	r31, 0x00	; 0
    2fe4:	80 81       	ld	r24, Z
    2fe6:	82 60       	ori	r24, 0x02	; 2
    2fe8:	8c 93       	st	X, r24
    2fea:	19 c0       	rjmp	.+50     	; 0x301e <UART_init+0xaa>
	} else if (Config_Ptr->bit_data == 7) {
    2fec:	eb 81       	ldd	r30, Y+3	; 0x03
    2fee:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff0:	80 81       	ld	r24, Z
    2ff2:	87 30       	cpi	r24, 0x07	; 7
    2ff4:	41 f4       	brne	.+16     	; 0x3006 <UART_init+0x92>
		UCSRC |= (1 << UCSZ1);
    2ff6:	a0 e4       	ldi	r26, 0x40	; 64
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	e0 e4       	ldi	r30, 0x40	; 64
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	84 60       	ori	r24, 0x04	; 4
    3002:	8c 93       	st	X, r24
    3004:	0c c0       	rjmp	.+24     	; 0x301e <UART_init+0xaa>
	} else if (Config_Ptr->bit_data == 8) {
    3006:	eb 81       	ldd	r30, Y+3	; 0x03
    3008:	fc 81       	ldd	r31, Y+4	; 0x04
    300a:	80 81       	ld	r24, Z
    300c:	88 30       	cpi	r24, 0x08	; 8
    300e:	39 f4       	brne	.+14     	; 0x301e <UART_init+0xaa>
		UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
    3010:	a0 e4       	ldi	r26, 0x40	; 64
    3012:	b0 e0       	ldi	r27, 0x00	; 0
    3014:	e0 e4       	ldi	r30, 0x40	; 64
    3016:	f0 e0       	ldi	r31, 0x00	; 0
    3018:	80 81       	ld	r24, Z
    301a:	86 60       	ori	r24, 0x06	; 6
    301c:	8c 93       	st	X, r24
	}

	/* Set parity */
	if (Config_Ptr->parity == 1) { // Odd parity
    301e:	eb 81       	ldd	r30, Y+3	; 0x03
    3020:	fc 81       	ldd	r31, Y+4	; 0x04
    3022:	81 81       	ldd	r24, Z+1	; 0x01
    3024:	81 30       	cpi	r24, 0x01	; 1
    3026:	41 f4       	brne	.+16     	; 0x3038 <UART_init+0xc4>
		UCSRC |= (1 << UPM1) | (1 << UPM0);
    3028:	a0 e4       	ldi	r26, 0x40	; 64
    302a:	b0 e0       	ldi	r27, 0x00	; 0
    302c:	e0 e4       	ldi	r30, 0x40	; 64
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	80 81       	ld	r24, Z
    3032:	80 63       	ori	r24, 0x30	; 48
    3034:	8c 93       	st	X, r24
    3036:	0c c0       	rjmp	.+24     	; 0x3050 <UART_init+0xdc>
	} else if (Config_Ptr->parity == 2) { // Even parity
    3038:	eb 81       	ldd	r30, Y+3	; 0x03
    303a:	fc 81       	ldd	r31, Y+4	; 0x04
    303c:	81 81       	ldd	r24, Z+1	; 0x01
    303e:	82 30       	cpi	r24, 0x02	; 2
    3040:	39 f4       	brne	.+14     	; 0x3050 <UART_init+0xdc>
		UCSRC |= (1 << UPM1);
    3042:	a0 e4       	ldi	r26, 0x40	; 64
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e0 e4       	ldi	r30, 0x40	; 64
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	80 62       	ori	r24, 0x20	; 32
    304e:	8c 93       	st	X, r24
	} // Default is no parity (00)

	/* Set stop bit */
	if (Config_Ptr->stop_bit == 2) {
    3050:	eb 81       	ldd	r30, Y+3	; 0x03
    3052:	fc 81       	ldd	r31, Y+4	; 0x04
    3054:	82 81       	ldd	r24, Z+2	; 0x02
    3056:	82 30       	cpi	r24, 0x02	; 2
    3058:	41 f4       	brne	.+16     	; 0x306a <UART_init+0xf6>
		UCSRC |= (1 << USBS); // 2 stop bits
    305a:	a0 e4       	ldi	r26, 0x40	; 64
    305c:	b0 e0       	ldi	r27, 0x00	; 0
    305e:	e0 e4       	ldi	r30, 0x40	; 64
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	88 60       	ori	r24, 0x08	; 8
    3066:	8c 93       	st	X, r24
    3068:	07 c0       	rjmp	.+14     	; 0x3078 <UART_init+0x104>
	} else {
		UCSRC &= ~(1 << USBS); // 1 stop bit
    306a:	a0 e4       	ldi	r26, 0x40	; 64
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	e0 e4       	ldi	r30, 0x40	; 64
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	80 81       	ld	r24, Z
    3074:	87 7f       	andi	r24, 0xF7	; 247
    3076:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3078:	eb 81       	ldd	r30, Y+3	; 0x03
    307a:	fc 81       	ldd	r31, Y+4	; 0x04
    307c:	83 81       	ldd	r24, Z+3	; 0x03
    307e:	94 81       	ldd	r25, Z+4	; 0x04
    3080:	a5 81       	ldd	r26, Z+5	; 0x05
    3082:	b6 81       	ldd	r27, Z+6	; 0x06
    3084:	88 0f       	add	r24, r24
    3086:	99 1f       	adc	r25, r25
    3088:	aa 1f       	adc	r26, r26
    308a:	bb 1f       	adc	r27, r27
    308c:	88 0f       	add	r24, r24
    308e:	99 1f       	adc	r25, r25
    3090:	aa 1f       	adc	r26, r26
    3092:	bb 1f       	adc	r27, r27
    3094:	88 0f       	add	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	aa 1f       	adc	r26, r26
    309a:	bb 1f       	adc	r27, r27
    309c:	9c 01       	movw	r18, r24
    309e:	ad 01       	movw	r20, r26
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	92 e1       	ldi	r25, 0x12	; 18
    30a4:	aa e7       	ldi	r26, 0x7A	; 122
    30a6:	b0 e0       	ldi	r27, 0x00	; 0
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 01 19 	call	0x3202	; 0x3202 <__udivmodsi4>
    30b0:	da 01       	movw	r26, r20
    30b2:	c9 01       	movw	r24, r18
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	9a 83       	std	Y+2, r25	; 0x02
    30b8:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    30ba:	e0 e4       	ldi	r30, 0x40	; 64
    30bc:	f0 e0       	ldi	r31, 0x00	; 0
    30be:	89 81       	ldd	r24, Y+1	; 0x01
    30c0:	9a 81       	ldd	r25, Y+2	; 0x02
    30c2:	89 2f       	mov	r24, r25
    30c4:	99 27       	eor	r25, r25
    30c6:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    30c8:	e9 e2       	ldi	r30, 0x29	; 41
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	89 81       	ldd	r24, Y+1	; 0x01
    30ce:	80 83       	st	Z, r24
}
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	0f 92       	push	r0
    30e4:	cd b7       	in	r28, 0x3d	; 61
    30e6:	de b7       	in	r29, 0x3e	; 62
    30e8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    30ea:	eb e2       	ldi	r30, 0x2B	; 43
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	88 2f       	mov	r24, r24
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	80 72       	andi	r24, 0x20	; 32
    30f6:	90 70       	andi	r25, 0x00	; 0
    30f8:	00 97       	sbiw	r24, 0x00	; 0
    30fa:	b9 f3       	breq	.-18     	; 0x30ea <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    30fc:	ec e2       	ldi	r30, 0x2C	; 44
    30fe:	f0 e0       	ldi	r31, 0x00	; 0
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3104:	0f 90       	pop	r0
    3106:	cf 91       	pop	r28
    3108:	df 91       	pop	r29
    310a:	08 95       	ret

0000310c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    310c:	df 93       	push	r29
    310e:	cf 93       	push	r28
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3114:	eb e2       	ldi	r30, 0x2B	; 43
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	88 23       	and	r24, r24
    311c:	dc f7       	brge	.-10     	; 0x3114 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    311e:	ec e2       	ldi	r30, 0x2C	; 44
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
}
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <UART_sendString+0x6>
    3130:	0f 92       	push	r0
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	9b 83       	std	Y+3, r25	; 0x03
    3138:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    313a:	19 82       	std	Y+1, r1	; 0x01
    313c:	0e c0       	rjmp	.+28     	; 0x315a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	28 2f       	mov	r18, r24
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	9b 81       	ldd	r25, Y+3	; 0x03
    3148:	fc 01       	movw	r30, r24
    314a:	e2 0f       	add	r30, r18
    314c:	f3 1f       	adc	r31, r19
    314e:	80 81       	ld	r24, Z
    3150:	0e 94 6f 18 	call	0x30de	; 0x30de <UART_sendByte>
		i++;
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	8f 5f       	subi	r24, 0xFF	; 255
    3158:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	9b 81       	ldd	r25, Y+3	; 0x03
    3164:	fc 01       	movw	r30, r24
    3166:	e2 0f       	add	r30, r18
    3168:	f3 1f       	adc	r31, r19
    316a:	80 81       	ld	r24, Z
    316c:	88 23       	and	r24, r24
    316e:	39 f7       	brne	.-50     	; 0x313e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	cf 91       	pop	r28
    3178:	df 91       	pop	r29
    317a:	08 95       	ret

0000317c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	00 d0       	rcall	.+0      	; 0x3186 <UART_receiveString+0xa>
    3186:	0f 92       	push	r0
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	9b 83       	std	Y+3, r25	; 0x03
    318e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3190:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	28 2f       	mov	r18, r24
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	9b 81       	ldd	r25, Y+3	; 0x03
    319c:	8c 01       	movw	r16, r24
    319e:	02 0f       	add	r16, r18
    31a0:	13 1f       	adc	r17, r19
    31a2:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
    31a6:	f8 01       	movw	r30, r16
    31a8:	80 83       	st	Z, r24
    31aa:	0f c0       	rjmp	.+30     	; 0x31ca <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	8f 5f       	subi	r24, 0xFF	; 255
    31b0:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	28 2f       	mov	r18, r24
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ba:	9b 81       	ldd	r25, Y+3	; 0x03
    31bc:	8c 01       	movw	r16, r24
    31be:	02 0f       	add	r16, r18
    31c0:	13 1f       	adc	r17, r19
    31c2:	0e 94 86 18 	call	0x310c	; 0x310c <UART_recieveByte>
    31c6:	f8 01       	movw	r30, r16
    31c8:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    31ca:	89 81       	ldd	r24, Y+1	; 0x01
    31cc:	28 2f       	mov	r18, r24
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	8a 81       	ldd	r24, Y+2	; 0x02
    31d2:	9b 81       	ldd	r25, Y+3	; 0x03
    31d4:	fc 01       	movw	r30, r24
    31d6:	e2 0f       	add	r30, r18
    31d8:	f3 1f       	adc	r31, r19
    31da:	80 81       	ld	r24, Z
    31dc:	83 32       	cpi	r24, 0x23	; 35
    31de:	31 f7       	brne	.-52     	; 0x31ac <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	fc 01       	movw	r30, r24
    31ec:	e2 0f       	add	r30, r18
    31ee:	f3 1f       	adc	r31, r19
    31f0:	10 82       	st	Z, r1
}
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	cf 91       	pop	r28
    31fa:	df 91       	pop	r29
    31fc:	1f 91       	pop	r17
    31fe:	0f 91       	pop	r16
    3200:	08 95       	ret

00003202 <__udivmodsi4>:
    3202:	a1 e2       	ldi	r26, 0x21	; 33
    3204:	1a 2e       	mov	r1, r26
    3206:	aa 1b       	sub	r26, r26
    3208:	bb 1b       	sub	r27, r27
    320a:	fd 01       	movw	r30, r26
    320c:	0d c0       	rjmp	.+26     	; 0x3228 <__udivmodsi4_ep>

0000320e <__udivmodsi4_loop>:
    320e:	aa 1f       	adc	r26, r26
    3210:	bb 1f       	adc	r27, r27
    3212:	ee 1f       	adc	r30, r30
    3214:	ff 1f       	adc	r31, r31
    3216:	a2 17       	cp	r26, r18
    3218:	b3 07       	cpc	r27, r19
    321a:	e4 07       	cpc	r30, r20
    321c:	f5 07       	cpc	r31, r21
    321e:	20 f0       	brcs	.+8      	; 0x3228 <__udivmodsi4_ep>
    3220:	a2 1b       	sub	r26, r18
    3222:	b3 0b       	sbc	r27, r19
    3224:	e4 0b       	sbc	r30, r20
    3226:	f5 0b       	sbc	r31, r21

00003228 <__udivmodsi4_ep>:
    3228:	66 1f       	adc	r22, r22
    322a:	77 1f       	adc	r23, r23
    322c:	88 1f       	adc	r24, r24
    322e:	99 1f       	adc	r25, r25
    3230:	1a 94       	dec	r1
    3232:	69 f7       	brne	.-38     	; 0x320e <__udivmodsi4_loop>
    3234:	60 95       	com	r22
    3236:	70 95       	com	r23
    3238:	80 95       	com	r24
    323a:	90 95       	com	r25
    323c:	9b 01       	movw	r18, r22
    323e:	ac 01       	movw	r20, r24
    3240:	bd 01       	movw	r22, r26
    3242:	cf 01       	movw	r24, r30
    3244:	08 95       	ret

00003246 <__prologue_saves__>:
    3246:	2f 92       	push	r2
    3248:	3f 92       	push	r3
    324a:	4f 92       	push	r4
    324c:	5f 92       	push	r5
    324e:	6f 92       	push	r6
    3250:	7f 92       	push	r7
    3252:	8f 92       	push	r8
    3254:	9f 92       	push	r9
    3256:	af 92       	push	r10
    3258:	bf 92       	push	r11
    325a:	cf 92       	push	r12
    325c:	df 92       	push	r13
    325e:	ef 92       	push	r14
    3260:	ff 92       	push	r15
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	ca 1b       	sub	r28, r26
    3270:	db 0b       	sbc	r29, r27
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	09 94       	ijmp

0000327e <__epilogue_restores__>:
    327e:	2a 88       	ldd	r2, Y+18	; 0x12
    3280:	39 88       	ldd	r3, Y+17	; 0x11
    3282:	48 88       	ldd	r4, Y+16	; 0x10
    3284:	5f 84       	ldd	r5, Y+15	; 0x0f
    3286:	6e 84       	ldd	r6, Y+14	; 0x0e
    3288:	7d 84       	ldd	r7, Y+13	; 0x0d
    328a:	8c 84       	ldd	r8, Y+12	; 0x0c
    328c:	9b 84       	ldd	r9, Y+11	; 0x0b
    328e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3290:	b9 84       	ldd	r11, Y+9	; 0x09
    3292:	c8 84       	ldd	r12, Y+8	; 0x08
    3294:	df 80       	ldd	r13, Y+7	; 0x07
    3296:	ee 80       	ldd	r14, Y+6	; 0x06
    3298:	fd 80       	ldd	r15, Y+5	; 0x05
    329a:	0c 81       	ldd	r16, Y+4	; 0x04
    329c:	1b 81       	ldd	r17, Y+3	; 0x03
    329e:	aa 81       	ldd	r26, Y+2	; 0x02
    32a0:	b9 81       	ldd	r27, Y+1	; 0x01
    32a2:	ce 0f       	add	r28, r30
    32a4:	d1 1d       	adc	r29, r1
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	ed 01       	movw	r28, r26
    32b2:	08 95       	ret

000032b4 <itoa>:
    32b4:	fb 01       	movw	r30, r22
    32b6:	9f 01       	movw	r18, r30
    32b8:	e8 94       	clt
    32ba:	42 30       	cpi	r20, 0x02	; 2
    32bc:	c4 f0       	brlt	.+48     	; 0x32ee <itoa+0x3a>
    32be:	45 32       	cpi	r20, 0x25	; 37
    32c0:	b4 f4       	brge	.+44     	; 0x32ee <itoa+0x3a>
    32c2:	4a 30       	cpi	r20, 0x0A	; 10
    32c4:	29 f4       	brne	.+10     	; 0x32d0 <itoa+0x1c>
    32c6:	97 fb       	bst	r25, 7
    32c8:	1e f4       	brtc	.+6      	; 0x32d0 <itoa+0x1c>
    32ca:	90 95       	com	r25
    32cc:	81 95       	neg	r24
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	64 2f       	mov	r22, r20
    32d2:	77 27       	eor	r23, r23
    32d4:	0e 94 8b 19 	call	0x3316	; 0x3316 <__udivmodhi4>
    32d8:	80 5d       	subi	r24, 0xD0	; 208
    32da:	8a 33       	cpi	r24, 0x3A	; 58
    32dc:	0c f0       	brlt	.+2      	; 0x32e0 <itoa+0x2c>
    32de:	89 5d       	subi	r24, 0xD9	; 217
    32e0:	81 93       	st	Z+, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	a1 f7       	brne	.-24     	; 0x32d0 <itoa+0x1c>
    32e8:	16 f4       	brtc	.+4      	; 0x32ee <itoa+0x3a>
    32ea:	5d e2       	ldi	r21, 0x2D	; 45
    32ec:	51 93       	st	Z+, r21
    32ee:	10 82       	st	Z, r1
    32f0:	c9 01       	movw	r24, r18
    32f2:	0c 94 7b 19 	jmp	0x32f6	; 0x32f6 <strrev>

000032f6 <strrev>:
    32f6:	dc 01       	movw	r26, r24
    32f8:	fc 01       	movw	r30, r24
    32fa:	67 2f       	mov	r22, r23
    32fc:	71 91       	ld	r23, Z+
    32fe:	77 23       	and	r23, r23
    3300:	e1 f7       	brne	.-8      	; 0x32fa <strrev+0x4>
    3302:	32 97       	sbiw	r30, 0x02	; 2
    3304:	04 c0       	rjmp	.+8      	; 0x330e <strrev+0x18>
    3306:	7c 91       	ld	r23, X
    3308:	6d 93       	st	X+, r22
    330a:	70 83       	st	Z, r23
    330c:	62 91       	ld	r22, -Z
    330e:	ae 17       	cp	r26, r30
    3310:	bf 07       	cpc	r27, r31
    3312:	c8 f3       	brcs	.-14     	; 0x3306 <strrev+0x10>
    3314:	08 95       	ret

00003316 <__udivmodhi4>:
    3316:	aa 1b       	sub	r26, r26
    3318:	bb 1b       	sub	r27, r27
    331a:	51 e1       	ldi	r21, 0x11	; 17
    331c:	07 c0       	rjmp	.+14     	; 0x332c <__udivmodhi4_ep>

0000331e <__udivmodhi4_loop>:
    331e:	aa 1f       	adc	r26, r26
    3320:	bb 1f       	adc	r27, r27
    3322:	a6 17       	cp	r26, r22
    3324:	b7 07       	cpc	r27, r23
    3326:	10 f0       	brcs	.+4      	; 0x332c <__udivmodhi4_ep>
    3328:	a6 1b       	sub	r26, r22
    332a:	b7 0b       	sbc	r27, r23

0000332c <__udivmodhi4_ep>:
    332c:	88 1f       	adc	r24, r24
    332e:	99 1f       	adc	r25, r25
    3330:	5a 95       	dec	r21
    3332:	a9 f7       	brne	.-22     	; 0x331e <__udivmodhi4_loop>
    3334:	80 95       	com	r24
    3336:	90 95       	com	r25
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	08 95       	ret

0000333e <_exit>:
    333e:	f8 94       	cli

00003340 <__stop_program>:
    3340:	ff cf       	rjmp	.-2      	; 0x3340 <__stop_program>
